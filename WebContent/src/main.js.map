{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts","../ts/src/screen/TryAgainWindow.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","ctb","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","parent","dom","createContainer","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","destroyDelayedCall","ind","indexOf","splice","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","playBtnClickAnim","sc","hasOwnProperty","scaleX","scaleY","tweens","targets","duration","yoyo","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","FIT","core","Gameplay","allLettersNames","currentRound","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onNewRound","nextLetterDelay","failsNumToLose","Number","cache","json","get","useImages","Boolean","onComplete","onLose","totalRoundsNum","score","calculateScore","nextLetter","_this4","fn","thisRound","rounds","shift","blockLetters","correctWord","onLettersPlaced","getCurrentTotalAnswersCountThisRound","letter","_step4","_iterator4","d","setupCallbacks","letters","_step5","_iterator5","_Phaser$Scene","Scene","_super2","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_update","_Phaser$Scene3","_super4","load","_this5","_step6","_iterator6","l","image","_step7","_iterator7","r","_step8","_iterator8","audio","_step9","_iterator9","progressTxt","text","fontFamily","fontSize","color","align","setOrigin","pack","ceil","nextScene","start","animKey","sprite","undefined","mainScene","getScene","anims","exists","data","ANIMS_DATA","frames","generateFrameNames","end","zeroPad","prefix","suffix","frameRate","repeat","currentAnim","off","stop","once","idle","padNum","atlas","yelling_wrong","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this6","_areYouSurePage","Image","setInteractive","_btnSureYes","cursor","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this7","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","starScore","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this8","bgMusic","correctAudio","correctAudioWord","correctAudioWordDelay","idleDelayedCall","playIdle","playAnim","character","soundGooseYes","soundWrongDrop","wfsnd","showCompleteWindow","completeWindow","destroyGameplay","setInputEnabled","show","showLoseWindow","tryAgainWindow","TryAgainWindow","_gameStage","setScale","_btnClose","onCloseClick","_btnSound","onSoundClick","_this9","areYouSureWindow","parentContainer","pause","playCorrectAudio","_this10","loop","gameplayContainer","reset","prepareRound","createTallies","_this11","removeAll","randomizedLetter","Utils","Shuffle","fixedHeight","setText","selectableLetters","targetBlocks","b","x","y","charAt","a","txt","_step10","_iterator10","_loop","setSize","input","setDraggable","moveBridgeBackToStartPosition","createInput","isNewRound","isRoundsComplete","_step11","_iterator11","addAt","showOut","_this12","pointer","block","dragX","dragY","targetBlock","bringToTop","_step12","_iterator12","abs","disableInteractive","checkTargetBlockLetters","pixelPerfect","_step13","sameLettersNum","_iterator13","onCorrectAnswer","onWrongAnswer","_this13","Sine","Distance","Between","placeAppleOverBuckets","_this14","getCurrentTotalAnswersCount","tallyEmptyArray","visible","tally","completed","lost","showAreYouSurePage","_step14","_iterator14","te","_step15","_iterator15","tallyEmptyArrayPositions","_i2","_tallyEmptyArrayPosit","_BeehiveEmpty","_Beehive","_step16","_iterator16","bea","_step17","_iterator17","bee","k","_this15","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this16","pauseAll","pauseSounds","resumeAll","unpauseSounds","enabled","_step18","_iterator18","_step19","_iterator19","stopAll","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this17","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setWordWrapWidth","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this18","_bg","_star"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAmV,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,GAEnX,SAASK,kBAAkBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAE7S,SAASO,aAAaC,EAAaC,EAAYC,GAAmJ,OAAhID,GAAYd,kBAAkBa,EAAYd,UAAWe,GAAiBC,GAAaf,kBAAkBa,EAAaE,GAAqBF,EAEzM,SAASG,2BAA2BC,EAAGC,GAAkB,IAAIC,EAAI,GAAsB,oBAAXvB,QAAgD,MAAtBqB,EAAErB,OAAOC,UAAmB,CAAE,GAAIuB,MAAMC,QAAQJ,KAAOE,EAAKG,4BAA4BL,KAAOC,GAAkBD,GAAyB,iBAAbA,EAAEb,OAAqB,CAAMe,IAAIF,EAAIE,GAAI,IAAIhB,EAAI,EAAOoB,EAAI,aAAiB,MAAO,CAAEC,EAAGD,EAAGE,EAAG,WAAe,OAAItB,GAAKc,EAAEb,OAAe,CAAEsB,MAAM,GAAe,CAAEA,MAAM,EAAOC,MAAOV,EAAEd,OAAWyB,EAAG,SAAWC,GAAM,MAAMA,GAAOC,EAAGP,GAAO,MAAM,IAAIQ,UAAU,yIAA4I,IAA6CC,EAAzCC,GAAmB,EAAMC,GAAS,EAAY,MAAO,CAAEV,EAAG,WAAeL,EAAKF,EAAErB,OAAOC,aAAgB4B,EAAG,WAAe,IAAIU,EAAOhB,EAAGiB,OAAsC,OAA9BH,EAAmBE,EAAKT,KAAaS,GAASP,EAAG,SAAWS,GAAOH,GAAS,EAAMF,EAAMK,GAAQP,EAAG,WAAe,IAAWG,GAAiC,MAAbd,EAAGmB,QAAgBnB,EAAGmB,SAAY,QAAU,GAAIJ,EAAQ,MAAMF,KAEl9B,SAASV,4BAA4BL,EAAGsB,GAAU,GAAKtB,EAAL,CAAgB,GAAiB,iBAANA,EAAgB,OAAOuB,kBAAkBvB,EAAGsB,GAAS,IAAId,EAAIhB,OAAOV,UAAU0C,SAASC,KAAKzB,GAAG0B,MAAM,GAAI,GAAiE,MAAnD,WAANlB,GAAkBR,EAAEnB,cAAa2B,EAAIR,EAAEnB,YAAY8C,MAAgB,QAANnB,GAAqB,QAANA,EAAoBL,MAAMyB,KAAK5B,GAAc,cAANQ,GAAqB,2CAA2CqB,KAAKrB,GAAWe,kBAAkBvB,EAAGsB,QAAzG,GAE7S,SAASC,kBAAkBO,EAAKC,IAAkB,MAAPA,GAAeA,EAAMD,EAAI3C,UAAQ4C,EAAMD,EAAI3C,QAAQ,IAAK,IAAID,EAAI,EAAG8C,EAAO,IAAI7B,MAAM4B,GAAM7C,EAAI6C,EAAK7C,IAAO8C,EAAK9C,GAAK4C,EAAI5C,GAAM,OAAO8C,EAEhL,SAASC,gBAAgBC,EAAUtC,GAAe,KAAMsC,aAAoBtC,GAAgB,MAAM,IAAIkB,UAAU,qCAEhH,SAASqB,UAAUC,EAAUC,GAAc,GAA0B,mBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIvB,UAAU,sDAAyDsB,EAAStD,UAAYU,OAAO8C,OAAOD,GAAcA,EAAWvD,UAAW,CAAED,YAAa,CAAE6B,MAAO0B,EAAU7C,UAAU,EAAMD,cAAc,KAAe+C,GAAYE,gBAAgBH,EAAUC,GAEnX,SAASE,gBAAgBvC,EAAGwC,GAA+G,OAA1GD,gBAAkB/C,OAAOiD,gBAAkB,SAAyBzC,EAAGwC,GAAsB,OAAjBxC,EAAE0C,UAAYF,EAAUxC,IAA6BA,EAAGwC,GAErK,SAASG,aAAaC,GAAW,IAAIC,EAA4BC,4BAA6B,OAAO,WAAkC,IAAsCC,EAAlCC,EAAQC,gBAAgBL,GAAkB,GAAIC,EAA2B,CAAE,IAAIK,EAAYD,gBAAgBE,MAAMtE,YAAakE,EAASK,QAAQC,UAAUL,EAAOM,UAAWJ,QAAqBH,EAASC,EAAMO,MAAMJ,KAAMG,WAAc,OAAOE,2BAA2BL,KAAMJ,IAE5Z,SAASS,2BAA2BC,EAAMhC,GAAQ,OAAIA,GAA2B,WAAlBhD,QAAQgD,IAAsC,mBAATA,EAA8CiC,uBAAuBD,GAAtChC,EAEnI,SAASiC,uBAAuBD,GAAQ,QAAa,IAATA,EAAmB,MAAM,IAAIE,eAAe,6DAAgE,OAAOF,EAE/J,SAASX,4BAA8B,GAAuB,oBAAZM,UAA4BA,QAAQC,UAAW,OAAO,EAAO,GAAID,QAAQC,UAAUO,KAAM,OAAO,EAAO,GAAqB,mBAAVC,MAAsB,OAAO,EAAM,IAAiF,OAA3EC,KAAKhF,UAAU0C,SAASC,KAAK2B,QAAQC,UAAUS,KAAM,IAAI,iBAAyB,EAAQ,MAAOnD,GAAK,OAAO,GAE1T,SAASsC,gBAAgBjD,GAAwJ,OAAnJiD,gBAAkBzD,OAAOiD,eAAiBjD,OAAOuE,eAAiB,SAAyB/D,GAAK,OAAOA,EAAE0C,WAAalD,OAAOuE,eAAe/D,KAA8BA,GC5BxM,IAgCIgE,MAhCJ,SAAUC,GAAG,IACIC,EADJ,SAAAC,GAAAhC,UAAA+B,EACgBE,OAAOC,MADvB,IAAAC,EAAA3B,aAAAuB,GAML,SAAAA,IAAA,IAAAK,EAAAtC,gBAAAkB,KAAAe,GACI,IAAIM,EAAuC,CACvCC,KAAML,OAAOM,KACbC,MAAOT,EAAIU,aACXC,OAAQX,EAAIY,cACZC,OAAO,iBDFPC,ICGI,CACAC,iBAAY,GAEhBC,MAAA,CACAC,KAAOC,gBAAAC,sBACHC,WAAWlB,OAAEmB,MAAAC,aDDjBC,aCGK,EDFLC,MCGC,CACHpD,OAAA,WACUiC,EAAEmB,MAAAC,IAAA,OAAA1B,EAAAyB,MAAAE,MAAA,MAhBlB,OAAArB,EAAAD,EAAA7C,KAAA0B,KAFuBqB,GAJlB,OAAAN,EAAA,GA2BTA,EAAaU,aAAC,IAClBV,EAAOY,cAAc,IACjBb,EAAIC,IAAGA,EA7BX,CA8BED,MAAAA,IAAA,KAGF4B,OAAAC,OAAS,WACL9B,KAAI,IAAKC,IAAGC,KDAhB,IAAI6B,aCEa,GDDjB,SCEQC,YAAaC,EAAOC,EAAEC,EAAAC,GDD1B,ICEIV,EAAO1B,KAAG0B,MAAAW,MAAA,GDDd,GCECX,EAAA,CACG,IAAIY,EAAAZ,EAAWa,KAAAP,YAAiBC,EAAAC,EAAAC,EAAAC,GAEpC,OADAL,aAAiBS,KAAIF,GACZA,EAEb,IAAAG,EAASC,WAAAR,EAAoBD,GDAzB,OCCAF,aAAWS,KAAIC,GACXA,EDAR,SCESE,uBAAA,IAAAC,EAAAC,EAAA9G,2BACJgG,cADI,IDDL,IAAAc,EAAAtG,MAAAqG,EAAAC,EAAArG,KAAAC,MCEC,CAAA,IAAA6F,EAAAM,EAAAlG,MACJ4F,aAAAlC,OAAA0C,KAAAC,aACQT,EAAAU,QAAA,IAHA,MAAAjG,GAAA8F,EAAAlG,EAAAI,GAAA,QAAA8F,EAAAhG,KDKT,SCESoG,wBAAA,IAAAC,EAAAC,EAAApH,2BACJgG,cADI,IDDL,IAAAoB,EAAA5G,MAAA2G,EAAAC,EAAA3G,KAAAC,MCEC,CAAA,IAAA6F,EAAAY,EAAAxG,MACJ4F,aAAAlC,OAAA0C,KAAAC,aACQT,EAAAU,QAAA,IAHA,MAAAjG,GAAAoG,EAAAxG,EAAAI,GAAA,QAAAoG,EAAAtG,KDKT,SCESuG,yBAAA,IAAAC,EAAAC,EAAAvH,2BAAMgG,cAAN,IDDL,IAAAuB,EAAA/G,MAAA8G,EAAAC,EAAA9G,KAAAC,MCCW,CAAA,IAAA6F,EAAAe,EAAA3G,MACH4F,aAAalC,OAAI0C,KAAAC,WACpBT,EAAAiB,QAAA,GAGRC,aAAAlB,IALQ,MAAAvF,GAAAuG,EAAA3G,EAAAI,GAAA,QAAAuG,EAAAzG,IDOLkF,aCC0C,GDC9C,SCAW0B,mBAAAnB,GACHA,aAAalC,OAAI0C,KAAAC,WACpBT,EAAAiB,QAAA,GAEaC,aAAalB,GAG/B,IAAAoB,EAAS3B,aAAkB4B,QAAUrB,GACjCoB,GAAS,GACZ3B,aAAA6B,OAAAF,EAAA,GDED,SCCQG,kBAAkBC,GACtBC,SAAOC,cAAe,QAAKC,MAAIC,gBAAiB,mBAAwBJ,EAAK,QDCjF,SCCQK,YAAGC,EAAaC,GACvBD,EAAAE,GAAA,eAAA,WAAAF,EAAAG,SAAAF,EAAAA,iBACDD,EAAAE,GAAS,eAAA,WAAwBF,EAA8BG,SAASF,EAAAA,cAAYrE,KAAA0B,MAAAW,MAAA,GAAAmC,MAAA7C,IAAA,gBAAA8C,UAChFL,EAAIE,GAAG,cAAa,WAAMF,EAAIG,SAACF,EAAW,WAC1CD,EAAIE,GAAG,aAAa,WAAMF,EAACG,SAAIF,EAAW,QAAarE,KAAC0B,MAAKW,MAAM,GAAOmC,MAAE7C,IAAM,yCAA8B8C,UDCpH,SCCQC,wBAAqBN,EAAIO,EAAWC,GAC3CR,EAAAE,GAAA,eAAA,WAAAF,EAAAS,WAAAD,MAIDR,EAAAE,GAAS,eAAiB,WAAMF,EAAAS,WAAAD,GAAA5E,KAAA0B,MAAAW,MAAA,GAAAmC,MAAA7C,IAAA,gBAAA8C,UAC5BL,EAAIE,GAAE,cAAiB,WAAAF,EAAeS,WAAaF,MACnDP,EAAAE,GAAO,aAAS,WAAOF,EAASS,WAAGF,GAAA3E,KAAA0B,MAAAW,MAAA,GAAAmC,MAAA7C,IAAA,yCAAA8C,UDFvC,SCISK,iBAAY9J,GDHjB,ICII+J,EAAA/J,EAASgK,eAAM,YAAAhK,EAAA,SAAA,EDHnBA,ECIIiK,OAAUjK,EAAQkK,OAAAH,EACV/E,KAAK0B,MAAKW,MAAA,GAClB8C,OAAQxD,IAAK,CACbyD,QAAMpK,EACPiK,OAAA,GAAAF,EACNG,OAAA,GAAAH,EC5GDM,SAAA,IF0GQC,MAAM,IA0Hd,IAmyBIrF,IAj5BEmB,gBA8G6B,WA7G/B,SAAAA,EEnDQpB,GAAA,IAAAuF,EAAApG,KAAAlB,gBAAAkB,KAAAiC,GFoDJjC,KElDAqG,SAAK,WACL,IAAItE,EAACqE,EAAYE,iBAEbC,EAAaH,EAAAI,mBAAqBhF,MAAaO,EAC/C0E,EAAaL,EAASI,mBAAW9E,OAAcK,EACrDqE,EAAAM,YAAAlF,MAAA+E,EAAA,KAlDMH,EAAKM,YAAQhF,OAAA+E,EAAA,KAEbL,EAACM,YAAcC,YAAgBjE,OAAOkE,WAAAL,GAAA,EAAA,KACtCH,EAACM,YAAAG,WAA0BnE,OAAUoE,YAACL,GAAA,EAAA,MAjBvCzG,KAAOa,KAAAA,EACVb,KAAI0G,YAAM1G,KAAAa,KAAmBkG,OAAKjC,MAClC9E,KAAIwG,mBAAmBxG,KAAAa,KAAUkB,MFyRvC,OA5CAvF,aAAayF,EAAiB,CAAC,CAC7B1F,IAAK,QAKLgB,MAAO,WEtNCyC,KAAAwG,mBAAcQ,YAAA/F,OAAAmB,MAAA6E,OAAAC,OAAAlH,KAAAmH,SAAAnH,MAClBA,KAAIoH,iCFsGJpH,KEtG+CmH,aF0NlD,CACD5K,IAAK,iBACLgB,MAAO,WEpNC,OAAAsD,KAAAkB,MAAAsF,WAA8BpG,OAAAmB,MAAAkF,KACxB,EACNC,KAAQC,IAAA9E,OAAQkE,WAAc5G,KAAAwG,mBAAuBhF,MAAUkB,OAAMoE,YAAQ9G,KAAAwG,mBAAiB9E,UFsNrG,CACDnF,IAAK,iCACLgB,MAAO,WEtN0B,IAAAkK,EAAAzH,KFkG7BA,KEjGIa,KAAAkB,MAAQ2F,WAAiB,SAAAC,GAC3B,OAAAA,EAAAC,SAAAH,EAAAf,YAAAC,WAAAkB,MAAA,MAAA,KAAAJ,EAAAnB,kBAGEtG,KAAQa,KAAAkB,MAAA+F,WAAA,SAAAC,GACZ,OAAWA,EAAKH,SAAUH,EAAAf,YAAgBG,UAAcgB,MAAA,MAAA,KAAAJ,EAAAnB,oBF2N3D,CACD/J,IAAK,WACLgB,MAAO,WG7IVgG,WAAAvD,KAAAqG,SAAApE,EAAA+F,iBHgJK,CAAC,CACHzL,IAAK,sBACLgB,MAAO,WEhRL,IAAA0K,EAAA,mBAAAvJ,KAAAwJ,UAAAC,UAAA,IAgBFC,EAAA1F,OAAAwF,UAAAG,UAAAC,cAAA9D,QAAA,YAAA,EFyGI,OAAOyD,GAAOG,EAAYnH,OAAOmB,MAAMmG,IAAMtH,OAAOmB,MAAMkF,SA8JzDrF,EAlE0B,GAhEnCA,gBGpKc+F,aAAI,IHsKlB,SAAWlH,IAEP,SAAW0H,GGjKC,IHkKFC,EGlKE,WHmKJ,SAAAA,IG5JI3J,gBAAAkB,KAAAyI,GACDzI,KAAA0I,gBAAA,KACA1I,KAAA2I,aAAA,EAIC3I,KAAA4I,oBAA2B,EA+B5B5I,KAAA6I,kBAA2B,EA1B9B7I,KAAK8I,6BAA6B,EAClC9I,KAAK+I,2BAAyB,EACjC/I,KAAAgJ,WAAA,KAEMhJ,KAAAiJ,gBAAkE,EACrEjJ,KAAKkJ,eAAaC,OAAWtI,KAAAuI,MAAAC,KAAAC,IAAA,YAAA,gBAC7BtJ,KAAKuJ,UAASC,QAAO3I,KAAAuI,MAAAC,KAAAC,IAAA,YAAA,WAxBjB,OAAA9M,aAAAiM,EAAA,CAAA,CAAAlM,IAAA,iBAAAgB,MAAA,SA0BPkM,EAAAC,EAAAV,GAEMhJ,KAAAyJ,WAAcA,EACjBzJ,KAAA0J,OAAYA,EACf1J,KAAAgJ,WAAAA,IA9BO,CAAAzM,IAAA,iBAAAgB,MAAA,WAkCJ,OAAIyC,KAAK2J,eAAoB3J,KAAC6I,oBAlC1B,CAAAtM,IAAA,kBAAAgB,MAAA,WHyLA,GADAyC,KGnJA2I,eACH3I,KAAA2I,cAAA3I,KAAA2J,eAAA,CHoJO,IGpJDC,EAAA5J,KAAA6J,iBAEN,OADG7J,KAAKyJ,WAAUG,EAAGA,IACrB,EHyJG,OGpJD5J,KAAU8J,cAET,IA/CA,CAAAvN,IAAA,aAAAgB,MAAA,WAiDK,IAAAwM,EAAA/J,KAELgK,EAAK,WACL,IAAIC,EAACF,EAAAG,OAAAC,QAELJ,EAAIK,aAAeH,EAAA,aHiJfF,EGjJiBM,YAAeJ,EAAG,YACzCF,EAAAjB,6BAAA,EACEiB,EAAKhB,2BAAsB,EACvBgB,EAACf,YACRe,EAAAf,cACoB,GAAjBhJ,KAAAiJ,gBACHe,IAIGnH,YAAC7C,KAAAiJ,gBAAsBe,KAhEvB,CAAAzN,IAAA,kBAAAgB,MAAA,WA0EJ,OAJHyC,KAAA4I,sBAEM5I,KAAA8I,+BACH9I,KAAKiJ,gBAAiB,KACjBjJ,KAAAsK,oBA1ED,CAAA/N,IAAA,gBAAAgB,MAAA,WH8NA,OAHAyC,KG5IA6I,oBH6IA7I,KG5IA+I,6BH6IA/I,KG5IHiJ,gBAAA,IH6IOjJ,KG7ID6I,mBAAA7I,KAAAkJ,gBACHlJ,KAAK0J,OAAA,EAAA,IACR,IAIE1J,KAAAsK,mBAEN,KAzFO,CAAA/N,IAAA,8BAAAgB,MAAA,WA6FP,OAAAyC,KAAA4I,oBAAA5I,KAAA6I,oBA7FO,CAAAtM,IAAA,uCAAAgB,MAAA,WAiGP,OAAAyC,KAAA8I,6BAAA9I,KAAA+I,6BAjGO,CAAAxM,IAAA,aAAAgB,MAAA,WAqGP,OAAA,GAAAyC,KAAAuK,yCArGO,CAAAhO,IAAA,mBAAAgB,MAAA,WAyGJ,OAAIyC,KAAO2I,cAAiB3I,KAAE2J,iBAzG1B,CAAApN,IAAA,oBAAAgB,MAAA,SA2GUiN,GHyIV,IGzIgBC,EAAAC,EAAA9N,2BACZiE,KAAQuI,MAACC,KAAUC,IAAE,YACxB,SAFe,IH2IhB,IAAAoB,EAAAtN,MAAAqN,EAAAC,EAAArN,KAAAC,MGxIH,CAAA,IAAAqN,EAAAF,EAAAlN,MACD,GAAOiN,GAAKG,EAAA,WACf,OAAAA,EAAA,UALuB,MAAA/M,GAAA8M,EAAAlN,EAAAI,GAAA,QAAA8M,EAAAhN,IASpB,OAAK,OApHD,CAAAnB,IAAA,QAAAgB,MAAA,WAwHJyC,KAAKiJ,gBAAiB,EACtBjJ,KAAK4K,eAAe,KAAA,KAAW,MAC/B,IAAIvB,EAACxI,KAAAuI,MAAeC,KAAMC,IAAA,YAC1BtJ,KAAKkK,OAASb,EAAI,OAAQ9K,QHuItByB,KGvIwB2J,eAAK3J,KAAgBkK,OAAOlO,OAExDgE,KAAK6K,QAAUxB,EAAG,QAAA9K,QAElByB,KAAK0I,gBAAiB,GARlB,IAAAoC,EAAAC,EAAAnO,2BASCoD,KAAA6K,SATD,IASJ,IAAAE,EAAA3N,MAAA0N,EAAAC,EAAA1N,KAAAC,MAAA,CAAA,IAAKqN,EAALG,EAAAvN,MACIyC,KAAC0I,gBAAoBrF,KAAEsH,EAAA,aAVvB,MAAA/M,GAAAmN,EAAAvN,EAAAI,GAAA,QAAAmN,EAAArN,IAWJsC,KAAK8J,aACL9J,KAAK2I,aAAA,EACR3I,KAAA4I,oBAAA,EACJ5I,KAAA6I,kBAAA,EA3IY7I,KAAQ8I,6BA2IpB,EA5IS9I,KAAA+I,2BA6Ib,MAtIeN,EAAA,GCPhBD,EAAOC,SAAGA,EJwKN,CI7JH3H,EAAA0H,OAAA1H,EAAA0H,KAAA,KJ2JD,CAkHG1H,MIxRQA,IAAA,KJ0RX,SAAWA,IAEP,SIxRKyB,GAAA,IAEDE,EAFC,SAAAuI,GAAAhM,UAAAyD,EAEKxB,OAAAgK,OAFL,IAAAC,EAAA1L,aAAAiD,GAAA,SAAAA,IAAA,OAAA3D,gBAAAkB,KAAAyC,GAAAyI,EAAA9K,MAAAJ,KAAAG,WAAA,OAAA3D,aAAAiG,EAAA,CAAA,CAAAlG,IAAA,OAAAgB,MAAA,cAAA,CAAAhB,IAAA,SAAAgB,MAAA,WAHQsD,KAAI0B,MAShB6B,OAAA,QAVMvD,KAAA0B,MAAKC,IAAL,YAAK1B,EAWfyB,MAAA4I,WAAA,OAPQ1I,EAAA,GCJTF,EAAaE,KAAAA,EL4RT,CKtQH3B,EAAAyB,QAAAzB,EAAAyB,MAAA,KLoQD,CAcGzB,MKxSWA,IAAA,KL0Sd,SKrSIA,ILuSA,SAAWyB,GACP,IAAIkG,EKhSK3H,EAAA0H,KAAAC,SLiSH2C,EKnSG,SAAAC,GAAArM,UAAAoM,EAGSnK,OAASgK,OAHlB,IAAAK,EAAA9L,aAAA4L,GAAA,SAAAA,IAAA,OAAAtM,gBAAAkB,KAAAoL,GAAAE,EAAAlL,MAAAJ,KAAAG,WAAA,OAAA3D,aAAA4O,EAAA,CAAA,CAAA7O,IAAA,SAAAgB,MAAA,WAKRyC,KAAAuL,SAAA,IAAA9C,EAEMzI,KAAMwL,eAAA,IAAA1K,EAAA2K,OAAAC,eAAA1L,KAAAA,KAAAuL,UACTvL,KAAK2L,SAAAnJ,IAAAxC,KAAewL,gBACvBxL,KAAAwL,eAAAI,wBATQ,CAAArP,IAAA,SAAAgB,MAAA,WAXHyC,KAAAwL,eAAAK,cAWGT,EAAA,GCXjB7I,EAAU6I,UAAAA,EN4SN,CM3MHtK,EAAAyB,QAAAzB,EAAAyB,MAAA,KNyMD,CAiBGzB,MM3TQA,IAAA,KN6TX,SAAWA,IAEP,SMpSKyB,GAAA,IAED4I,EAFC,SAAAW,GAAA9M,UAAAmM,EAEKlK,OAAAgK,OAFL,IAAAc,EAAAvM,aAAA2L,GAAA,SAAAA,IAAA,OAAArM,gBAAAkB,KAAAmL,GAAAY,EAAA3L,MAAAJ,KAAAG,WAAA,OAAA3D,aAAA2O,EAAA,CAAA,CAAA5O,IAAA,UAAAgB,MAAA,WAIGyC,KAAIgM,KAAK3C,KAAA,WAAc,+BAJ1B,CAAA9M,IAAA,SAAAgB,MAAA,WNySY,IAAA0O,EAAAjM,KACDqJ,EMnSHxI,KAAAuI,MAAAC,KAAAC,IAAA,YNoSD,GMnSAD,EAAA,UAAmB,CAAA,IAAA6C,EAAAC,EAAAvP,2BACLyM,EAAA,SADK,INoSf,IAAA8C,EAAA/O,MAAA8O,EAAAC,EAAA9O,KAAAC,MMnSkB,CAAA,IAAb8O,EAAaF,EAAA3O,MACrByC,KAAAgM,KAAAK,MAAAD,EAAA,WAAA,uBAAAA,EAAA,WAAA,SAFkB,MAAAxO,GAAAuO,EAAA3O,EAAAI,GAAA,QAAAuO,EAAAzO,IAAA,IAAA4O,EAAAC,EAAA3P,2BAILyM,EAAC,QAJI,IAIvB,IAAAkD,EAAAnP,MAAAkP,EAAAC,EAAAlP,KAAAC,MAA+B,CAAA,IAArBkP,EAAqBF,EAAA/O,MACvByC,KAAKgM,KAACK,MAAQG,EAAA,YAAa,qBAA4BA,EAAC,YAAa,SALtD,MAAA5O,GAAA2O,EAAA/O,EAAAI,GAAA,QAAA2O,EAAA7O,KNiSd,IAAA+O,EAAAC,EAAA9P,2BMzRKyM,EAAA,SNyRL,IAUL,IAAAqD,EAAAtP,MAAAqP,EAAAC,EAAArP,KAAAC,MMnSkB,CAAA,IAAb8O,EAAaK,EAAAlP,MACrByC,KAAAgM,KAAAW,MAAAP,EAAA,SAAA,4BAAAA,EAAA,SAAA,SNwRQ,MAAAxO,GAAA8O,EAAAlP,EAAAI,GAAA,QAAA8O,EAAAhP,IAAA,IAAAkP,EAAAC,EAAAjQ,2BMrRLyM,EAAc,QNqRT,IAaL,IAAAwD,EAAAzP,MAAAwP,EAAAC,EAAAxP,KAAAC,MMlSc,CAAA,IAAdkP,EAAcI,EAAArP,MACdyC,KAAAgM,KAAUW,MAAIH,EAAA,YAAA,0BAAAA,EAAA,YAAA,SNoRT,MAAA5O,GAAAiP,EAAArP,EAAAI,GAAA,QAAAiP,EAAAnP,IAgBL,IMlSAoP,EAAS9M,KAAQwC,IAAAuK,KAAAlM,KAAAkB,MAAAP,MAAA,EAAAX,KAAAkB,MAAAL,OAAA,EAAA,GAAA,CAClBsL,WAAA,iBACHC,SAAY,GAERC,MAAM,UAENC,MAAS,WAEbL,EAASM,UAAA,GAAA,IAETpN,KAAKgM,KAAKqB,KAAG,YAAe,oBNgSxBrN,KM/RAgM,KAAK7G,GAAA,YAAY,SAAA5H,GAClBuP,EAAAC,KAAAxF,KAAA+F,KAAA,IAAA/P,GAAA,MAEHyC,MACHA,KAAAgM,KAAA7G,GAAA,YAAA,WAEa8G,EAAAsB,eAEVvN,KAAKgM,KAAAwB,UA1CR,CAAAjR,IAAA,YAAAgB,MAAA,WAvBsBsD,KAAA0B,MAAA6B,OAAoB,aACvCvD,KAAQ0B,MAAAC,IAAA,aAAA1B,EAAAyB,MAAA6I,WAAA,MAsBX,CAAA,CAAA7O,IAAA,WAAAgB,MAAA,SA4COkQ,EAAgBC,GAAO,IAAAjE,EAAAtJ,UAAAnE,OAAA,QAAA2R,IAAAxN,UAAA,GAAAA,UAAA,GAAA,KN8RnByN,EM7RK/M,KAAO0B,MAAAsL,SAAA,cN8RhB,IAAKD,EM7RKE,MAAEC,OAAUN,GAAM,CN8RxB,IAAIO,EM7RA7C,EAAY8C,WAAUR,GN8R1BG,EM7RIE,MAAQ3O,OAAK,CN8Rb5C,IM7RFkR,EACFS,OAAAN,EAAgBE,MAAAK,mBAAYH,EAAA,MAAA,CAC5BR,MAAQQ,EAAK,MAASI,IAAAJ,EAAA,IAAAK,QAAAL,EAAA,OACvBM,OAAAN,EAAA,OAAAO,OAAA,KAEHC,UAAaR,EAAA,UACbS,OAAYT,EAAC,SAYjB,OATAN,EAAWI,MAACY,aACZhB,EAAOI,MAAMY,YAAgBC,IAAC,YN+R1BjB,EAAOI,MM9RSc,OACpBlB,EAAGpI,KAAAmI,GACHC,EAAOI,MAAMY,YAACG,KAAA,YAAA,WACjBpF,GAEgBA,OAERiE,MAnERvC,EAAA,GNuWDA,EM1XQ8C,WAAW,CN2Xfa,KM1XI,CACAtB,MAAQ,EACRY,IAAA,GACAW,OAAS,EACZT,OAAA,OACDG,OAAA,EACID,UAAU,GACVQ,MAAS,oBN4XbC,cM1Xc,CACVzB,MAAQ,EACRY,IAAA,GACAW,OAAS,EACZT,OAAA,gBACHG,OAAA,EArBOD,UAAS,GAFfQ,MAAK,wBCAhBzM,EAAa4I,UAAAA,EP+TT,COlSHrK,EAAAyB,QAAAzB,EAAAyB,MAAA,KPgSD,CA2FGzB,MOxZWA,IAAA,KP0Zd,SAAWA,IAEP,SAAW2K,GOlZE,IPmZHyD,EOnZG,SAAAC,GAAAnQ,UAAAkQ,EACgBjO,OAASmO,YAAOC,WADhC,IAAAC,EAAA9P,aAAA0P,GPoZL,SAAAA,EOlZK3M,EAAAgN,EAAgBC,GAAA,IAAAC,EAAA,OAAA3Q,gBAAAkB,KAAAkP,IAErBO,EAAAH,EAAAhR,KAAA0B,KAAKuC,IACAmN,gBAAY,IAAAzO,OAAgBmO,YAAQO,MAASF,EAAGlN,OAAA,KAAA,GAAA,gBACrDkN,EAAKC,gBAAgBtC,UAAC,EAAW,GACjCqC,EAAAC,gBAAAE,iBAEAH,EAAKI,YAAa,IAAI5O,OAAOmO,YAAYO,MAAMF,EAAKlN,MAAO1B,KAAKkB,MAAMP,MAAS,EAAG,GAAI,IAAQ,WAC9FiO,EAAKI,YAAWD,eAAe,CAACE,OAAQ,YACxCL,EAAKI,YAAWhB,KAAK,YAAaU,GAClChK,wBAAwBkK,EAAKI,YAAY,UAAU,WAEnDJ,EAAKM,WAAS,IAAA9O,OAAemO,YAAEO,MAAAF,EAAAlN,MAAA1B,KAAAkB,MAAAP,MAAA,EAAA,GAAA,IAAA,UAC/BiO,EAAKM,WAASH,eAAa,CAAAE,OAAA,YAC3BL,EAAKM,WAASlB,KAAA,YAAYW,GAC7BjK,wBAAAkK,EAAAM,WAAA,SAAA,UACJN,EAAAjN,IAAAiN,EAAAC,iBA3BYD,EAAAjN,IAAAiN,EAAAI,aADHJ,EAAAjN,IAAAiN,EAAMM,YAYaN,EAFhB,OAAAP,EAAA,GCVjBzD,EAAayD,iBAAAA,ER4ZT,CQnTHpO,EAAA2K,SAAA3K,EAAA2K,OAAA,KRiTD,CAwBG3K,MQlbWA,IAAA,KRobd,SAAWA,IAEP,SAAW2K,GQ/VC,IRgWFuE,EQhWE,SAAAC,GAAAjR,UAAAgR,EAxEc/O,OAAUmO,YAAEC,WAwE1B,IAAAa,EAAA1Q,aAAAwQ,GRiWJ,SAAAA,EQvaKzN,EAAA4N,EAAkBC,EAAOC,GAAW,IAAAC,EAAAxR,gBAAAkB,KAAAgQ,IACzCM,EAAAJ,EAAA5R,KAAA0B,KAAKuC,IACAgO,MAAA,KACLD,EAAKE,aAAW,OAAO,IACvBF,EAAKG,YAAW,IAAIxP,OAAOmO,YAAYO,MAAMW,EAAK/N,MAAU,EAAE,EAAG,kCACjE+N,EAAKG,YAAUrD,UAAO,EAAO,GAC7BkD,EAAKG,YAAWb,iBAEhBU,EAAII,KAAA,IAAAzP,OAAmBmO,YAAWO,MAAAW,EAAY/N,MAAM,IAAK,IAAK,UAE9D+N,EAAKK,SAAA,IAAa1P,OAAQmO,YAAUO,MAAQW,EAAK/N,MAAM,IAAA,IAAA,YRsanD+N,EQraAM,WAAc,IAAA3P,OAAAmO,YAAgBO,MAAAW,EAAA/N,MAAA,IAAA,IAAA,cRsa9B+N,EQraAO,SAAY,IAAE5P,OAAAmO,YAAAO,MAAAW,EAAA/N,MAAA,IAAA,IAAA,YRsad,IQraAuO,EAAkB,IAAA7P,OAAAmO,YAAAO,MAAAW,EAAA/N,MAAA,IAAA,IAAA,oBRsalB+N,EQraAS,cAAiBT,EAAA/N,MAAAC,IAAAuK,KAAA,IAAA,IAAA,GAAA,CACjBC,WAAU,iBACVC,SAAA,GACDC,MAAA,UACCC,MAAC,SAED6D,OAAU,UACVC,gBAAgB,IAEpBX,EAAKS,cAAc3D,UAAQ,GAAK,IAEhC,IAAI8D,EAACZ,EAAAS,cAAoBI,QAAUC,qBAAmB,EAAA,EAAA,EAAAd,EAAAS,cAAArP,QAzBb,OR6brCwP,EQnaAG,aAAY,EAAE,WRoadH,EQnaAG,aAAY,EAAE,WRoadf,EQnaAS,cAASO,QAASJ,GRoalBZ,EQnaAiB,aAASjB,EAAQ/N,MAAAC,IAAAuK,KAAA,IAAA,IAAA,GAAA,CAClBC,WAAA,iBACCC,SAAC,GAEDC,MAAK,UACLC,MAAK,WRoaLmD,EQlaAiB,aAASnE,UAAA,GAAA,IRmaTkD,EQlaA9N,IAAK,CACL8N,EAAKG,YACLK,EACAR,EAAKI,KACLJ,EAAKK,SACNL,EAAAM,WAECN,EAACO,SACDP,EAACS,cACDT,EAAAiB,eRmaAjB,EQjaAK,SAAAf,eAAyB,CAAAE,OAAA,YRkazBQ,EQjaAK,SAAIxL,GAAA,aAAA,WACLgL,EAAAG,EAAAK,aRsaCpL,wBQjagB+K,EAAAK,SAAA,WAAA,YRkahBL,EAAKM,WQjaIhB,eAAa,CAAAE,OAAA,YRkatBQ,EQjaCM,WAAA/B,KAAA,aAAA,WACFuB,EAAAE,EAAAM,YACHN,EAAAC,OACKD,EAAQC,MAAC3B,URoaVrJ,wBQjaoB+K,EAAAM,WAAA,aAAA,cRkapBN,EQjaAO,SAAAjB,eAAyB,CAAAE,OAAA,YRkazBQ,EQjaAO,SAAI1L,GAAA,aAAA,WACLkL,EAAAC,EAAAO,aAOHtL,wBAAsB+K,EAAAO,SAAA,WAAA,YAzEmBP,EAsErC,OAAA9T,aAAAwT,EAAA,CAAA,CAAAzT,IAAA,OAAAgB,MAAA,SRoaCqM,EQ/ZD4H,GRgaAxR,KQ/ZA0Q,KAAA3O,MAAa,KRgab/B,KQ/ZAuC,MAAMyD,OAAOxD,IAAK,CACnByD,QAAAjG,KAAA0Q,KAEC3O,MAAC,EACDmE,SAAC,IAELuL,KAAAxQ,OAAAsG,KAAAmK,OAAAC,KAAAC,MAEA5R,KAAK+Q,cAAahE,KAAA8E,OAAAjI,GACrB5J,KAAAuR,aAAAxE,KAAA8E,OAAAL,GAtGQxR,KAAAuQ,MAAcvQ,KAAAuC,MAAA8C,MAuG1B7C,IAAA,iCAxGSxC,KAAAuQ,MAAMjL,WAuFJ0K,EAAA,GCvFhBvE,EAAauE,eAAAA,ETsbT,CSgHHlP,EAAA2K,SAAA3K,EAAA2K,OAAA,KTlHD,CAwFG3K,MS5gBWA,IAAA,KT8gBd,SSzgBIA,IT2gBA,SAAW2K,GACP,IAAIN,ES/fIrK,EAAOyB,MAAO4I,UTggBhBO,ESxfI,SAAAoG,GAAA9S,UAAA0M,EAgCazK,OAAKmO,YAAAC,WAhClB,IAAA0C,EAAAvS,aAAAkM,GTyfN,SAAAA,ESxdInJ,EAAAgJ,GAAmB,IAAAyG,EAAA,OAAAlT,gBAAAkB,KAAA0L,IACnBsG,EAAAD,EAAAzT,KAAA0B,KAAAuC,IA0BA0P,QAAA,KACAD,EAAAE,aAAsB,KTgctBF,ES/bJG,iBAAmB,KTgcfH,EAAKI,sBS/be,KTgcpBJ,EAAKK,gBS/bI,KTgcTL,EAAKM,SS/bF,WACPnH,EAAGoH,SAAA,OAAAP,EAAAQ,WAAA,WACLR,EAAAK,gBAAAxP,YAAA,KAAA,WAgPMmP,EAAAM,kBToNAN,ES3DJS,cAAI,KT4DAT,EAAKU,eS3DL,KT4DAV,ES3DHW,MAAG,KT4DAX,EAAKY,mBS3DY,SAAAhJ,EAAQ4H,GT4DrB,IS3DJqB,EAAK,IAAepH,EAAGuE,eAAAgC,EAAAzP,OAAA,SAAA1G,GACvB8J,iBAAY9J,MT4DL,SS3DPA,GACA8J,iBAAU9J,GACVmW,EAAAc,kBACDd,EAAA5N,OAAAyO,GACCb,EAACpG,yBACL,SAAA/P,GACI8J,iBAAiB9J,MT6DbmW,ES1DJe,iBAAe,GT2DXlQ,YSzDC,KAAQ,WACd6B,kBAAA,WACLsN,EAAAxP,IAAAqQ,GAEKA,EAA8DG,KAAapJ,EAAE4H,GAC5EQ,EAAAC,QAAArD,WT2DAoD,EAAKiB,eSxDL,SAAArJ,EAAiB4H,GTyDb,ISxDJ0B,EAAK,IAAezH,EAAG0H,eAAAnB,EAAAzP,OAAA,SAAA1G,GACvB8J,iBAAY9J,MTyDL,SSxDPA,GACD8J,iBAAA9J,GACCmW,EAACc,kBACLd,EAAA5N,OAAgB8O,GACZlB,EAAApG,yBT0DIoG,ESvDJe,iBAAe,GTwDXlQ,YStDC,MAAQ,WACd6B,kBAAA,WACLsN,EAAAxP,IAAA0Q,GAlfOA,EAAWF,KAASpJ,EAAA4H,GAAOQ,EAAKC,QAAMrD,WAI3CoD,EAAKzG,SAAWA,EAChB7I,OAAK,GAALnC,uBAAAyR,GACAA,EAAKoB,WAAS,IAAAnS,OAAYmO,YAAAO,MAAAqC,EAAAzP,MAAA1B,KAAAkB,MAAAP,MAAA,EAAAX,KAAAkB,MAAAL,OAAA,EAAA,MAE1BsQ,EAAKoB,WAAShG,UAAO,GAAO,IAC5B4E,EAAKoB,WAAUC,SAAA,MACfrB,EAAKoB,WAAUxD,iBACfoC,EAAAxP,IAAAwP,EAAAoB,YACApB,EAAKsB,UAAS,IAAArS,OAAWmO,YAAAO,MAAAqC,EAAAzP,MAAA,IAAA,GAAA,YACzByP,EAAKsB,UAAU1D,eAAc,CAAEE,OAAK,YTyiBhCkC,ESxiBAsB,UTwiBA,SSxiBsBtB,EAAAsB,UAAWvR,MTyiBjCwD,wBSviBoByM,EAAAsB,UAAA,WAAA,yBACxBtB,EAAGxP,IAAAwP,EAAAsB,WACHtB,EAAKsB,UAASnO,GAAG,aAAW,WACxBQ,iBAAWqM,EAAAsB,WACXtB,EAACuB,kBAELvB,EAAKwB,UAAS,IAAAvS,OAAWmO,YAAAO,MAAAqC,EAAAzP,MAAA,GAAA,GAAA,SACzByP,EAAKwB,UAAU5D,eAAc,CAAEE,OAAK,YTwiBhCkC,ESviBAwB,UTuiBA,SSviBsBxB,EAAAwB,UAAWzR,MTwiBjCwD,wBStiBoByM,EAAAwB,UAAA,QAAA,sBACxBxB,EAAGxP,IAAAwP,EAAAwB,WACNxB,EAAAwB,UAAArO,GAAA,aAAA,WAMOQ,iBAAgBqM,EAAAwB,WAChBxB,EAAKyB,kBAHczB,EAjCjB,OAAAxV,aAAAkP,EAAA,CAAA,CAAAnP,IAAA,mBAAAgB,MAAA,WAuCD,IAAAmW,EAAA1T,KACDA,KAACkS,cACDlS,KAAKkS,aAAAtD,OTmiBL5O,KSjiBHkS,aAAAlS,KAAAuC,MAAA8C,MAAA7C,IAAA,qBAEDxC,KAAIkS,aAAK5M,OAAkBtF,KAAK2T,kBAAiB3T,KAAO2T,iBAAAC,iBAAA5T,MACpDA,KAAKkS,aAAA2B,QAEL7T,KAAKmS,kBACRnS,KAAAmS,iBAAAvD,OACG5O,KAACoS,wBACD9N,mBAAKtE,KAAmBoS,uBACxBpS,KAAKoS,sBAAwB,MAEpCpS,KAAAoS,sBAAAvP,YAAA,MAAA,WAEM6Q,EAAYvB,iBAAAuB,EAAAnR,MAAA8C,MAAA7C,IAAAkR,EAAAnI,SAAAlB,aACXqJ,EAACvB,iBAAmB7M,YAzDlB,CAAA/I,IAAA,eAAAgB,MAAA,WAwENyC,KAAK8T,qBAxEC,CAAAvX,IAAA,eAAAgB,MAAA,WA0ED,IAAAwW,EAAA/T,KAEL0E,kBAAK,gBACL1E,KAAKiS,QAASjS,KAAAuC,MAAA8C,MAAkB7C,IAAC,uBAEjCxC,KAAKiS,QAAQ3M,OAEbtF,KAAKiS,QAAA+B,MAAe,EACpBhU,KAAKiU,kBAAS,IAAehT,OAAKmO,YAAAC,UAAwBrP,KAACuC,OTmhBvDvC,KSlhBAwC,IAAKxC,KAAAiU,mBACTjU,KAAGuL,SAAA2I,QAEHlU,KAAKmU,eACRnU,KAAAuL,SAAAX,eAAA5K,KAAA4S,mBAAA5S,KAAAiT,gBAAA,WAEMc,EAAY/K,YAAA,MAGfhJ,KAAKoU,kBA5FC,CAAA7X,IAAA,eAAAgB,MAAA,WA8FD,IAAA8W,EAAArU,KAELA,KAAIiU,kBAA4BK,YAEhCtU,KAAIwS,UAAaxS,KAACuC,MAASC,IAAEkL,OAAA,EAAA,EAAA,MT8gBzB1N,KS7gBAwS,UAAIhC,YAAkB,IAAM,KT8gB5BxQ,KS7gBAsS,WT8gBA,IS7gBHiC,EAAAtT,OAAAuT,MAAAxX,MAAAyX,QAAAzU,KAAAuL,SAAAnB,aAAA7L,ST8gBG,GAAIyB,KS9gBDuL,SAAAhC,UAAA,CACH,IAAIc,EAAsC,IAAIpJ,OAAOmO,YAAYO,MAAK3P,KAAMuC,MAAA,IAAA,IAAAvC,KAAAuL,SAAAlB,aT+gBxErK,KS9gBAiU,kBAAczR,IAAA6H,OTghBb,CACD,IS9gBAA,EAASrK,KAAQuC,MAAAC,IAAAuK,KAAA,IAAA,IAAA,GAAA,CAClBC,WAAA,iBACHC,SAAY,GACZC,MAAY,UACZC,MAAY,WAEf9C,EAAA+C,UAAA,GAAA,IAGG/C,EAACvF,MAAiB4P,YAAM,IACxBrK,EAACsK,QAAkB3U,KAAAuL,SAAAlB,aACvBrK,KAASiU,kBAAuBzR,IAAA6H,GT8gB5BrK,KAAK4U,kBS5gBc,GT6gBnB5U,KS5gBC6U,aAAC,GT6gBF,IS5gBC,IAAC9Y,EAAA,EAAAA,EAAAiE,KAAmBuL,SAAMlB,YAAArO,OAAAD,IAAA,CAC3B,IAAI+Y,EAAC,CACHC,EAAA,IAAe,IAAfhZ,EAAkBiZ,EAAK,IAE5BF,eAAA,GACD9U,KAAS6U,aAAkBxR,KAAAyR,GACvBA,EAAA,gBAAgD9U,KAAAuL,SAAYlB,YAAe4K,OAAOjV,KAAGuL,SAAUlB,YAAOrO,OAAA,EAAAD,GACtG+Y,EAAE,WAAM,KT8gBR,IS5gBA,IAAK/Y,EAAA,EAAAA,EAAAwY,EAA0BvY,OAAAD,IAAA,CAE/B,IAAImZ,EAAuD,IAAAjU,OAAAmO,YAAAC,UAAArP,KAAAuC,MAAA,IAAA,IAAAxG,EAAA,KAC3DmZ,EAAA1S,IAAI0S,EAAI,WAAU,IAAAjU,OAAWmO,YAAAO,MAAA3P,KAAAuC,MAAA,EAAA,EAAA,aT4gBzB2S,EAAE,WS3gBI9H,UAAW,GAAA,IT4gBjBpN,KS3gBC4U,kBAAUvR,KAAA6R,GT4gBX,IS3gBHC,OAAA,ET4gBOnV,KS5gBDuL,SAAAhC,WACH4L,EAAM,IAAIlU,OAAOmO,YAAYO,MAAK3P,KAAEuC,MAAA,EAAA,EAAAgS,EAAAxY,IT6gBhCmZ,EAAE1S,IS5gBF2S,MT+gBAA,ES5gBAnV,KAAOuC,MAAEC,IAAQuK,KAAA,EAAA,EAAA,GAAA,CAClBC,WAAA,iBACCC,SAAU,GACVC,MAAM,UACNC,MAAQ,YAEfC,UAAA,GAAA,IACC+H,EAAArQ,MAAA4P,YAAwB,GAExBS,EAAAR,QAAcJ,EAAIxY,IAClBmZ,EAAA1S,IAAA2S,IAEFD,EAAC,cAAkB,CAAIH,EAACG,EAAAH,EAAAC,EAAAE,EAAAF,GAC3BE,EAAA,YAAAC,EAEDD,EAAK,gBAAcX,EAAmBxY,GAClCiE,KAAEiU,kBAAqBzR,IAAA0S,GACvBA,EAAE,gBAAe,EAhEhB,IAAAE,EAAAC,EAAAzY,2BAmEIoD,KAAA4U,mBAnEJ,IAAA,IAAAU,EAAA,WAAA,IAmEIJ,EAnEJE,EAAA7X,MT6kBG2X,EAAEK,QSzgBAL,EAAA,WAAgB1T,MAAQ0T,EAAA,WAAAxT,QAC9BwT,EAAEtF,iBACFyE,EAAK9R,MAAAiT,MAAWC,aAAOP,GT0gBnBA,EAAE/P,GSzgBD,eAAC,WACF+P,EAAA,kBAAqB,KT2gBrBA,EAAE/P,GS1gBF,aAAK,WACN+P,EAAA,kBAAA,EACEA,EAAA,gBT4gBGb,ES3gBmBqB,8BAAOR,EAAA,ST6gB9BA,EAAE/P,GAAG,cS5gB2B,WAC3B+P,EAAA,gBAEZA,EAAA,kBAGIb,EAAAqB,8BAAuBR,EAAA,UTyfxB,IAAAG,EAAAjY,MAAAgY,EAAAC,EAAAhY,KAAAC,MSzgByBgY,IAnExB,MAAA1X,GAAAyX,EAAA7X,EAAAI,GAAA,QAAAyX,EAAA3X,ITimBDsC,KSzgBA2V,cT0gBA3V,KAAK+S,iBSzgBD,GT2gBA/S,KSzgBAuL,SAAMqK,cACT5V,KAAAuL,SAAAsK,oBAOR7V,KAAA+S,iBAAA,GT4gBO/S,KSxgBAiU,kBAAmBzR,IAAAxC,KAAAwS,aArMjB,CAAAjW,IAAA,UAAAgB,MAAA,WTgtBF,GAAIyC,KSxgBC4U,kBAAA,CAAA,IAAAkB,EAAAC,EAAAnZ,2BAAWoD,KAAK4U,mBAAhB,ITygBD,IAAAmB,EAAA3Y,MAAA0Y,EAAAC,EAAA1Y,KAAAC,MSzgBoC,CAAA,IAA7B4X,EAA6BY,EAAAvY,MAChC2X,EAAEH,EAAI,EAAIG,EAAC,WAAW1T,MAAK,EAC9B0T,EAAAH,EAAA,EAAAG,EAAA,WAAA1T,MAAA,EAEM0T,EAAIH,EAAClU,KAAAkB,MAAWP,MAAS0T,EAAA,WAAA1T,MAAA,IAC/B0T,EAAAH,EAAAlU,KAAAkB,MAAAP,MAAA0T,EAAA,WAAA1T,MAAA,GACG0T,EAAEF,EAAI,EAAIE,EAAC,WAAYxT,OAAK,EAC/BwT,EAAAF,EAAAE,EAAA,WAAAxT,OAAA,EAERwT,EAAAF,EAAAnU,KAAAkB,MAAAL,OAAAwT,EAAA,WAAAxT,OAAA,IACJwT,EAAAF,EAAAnU,KAAAkB,MAAAL,OAAAwT,EAAA,WAAAxT,OAAA,IAVY,MAAA9D,GAAAmY,EAAAvY,EAAAI,GAAA,QAAAmY,EAAArY,QAxMH,CAAAnB,IAAA,wBAAAgB,MAAA,SAuND2X,GACRA,EAAAtB,kBAGG5T,KAAKiU,kBAAgB7P,OAAA8Q,GAErBlV,KAAKiU,kBAAgB+B,MAAOd,EAAAlV,KAAAiU,kBAAAjY,WA7NtB,CAAAO,IAAA,aAAAgB,MAAA,SAgOF0Y,GTwgBAjW,KSvgBHuC,MAAA8C,MAAA7C,IAAA,cAAA8C,OACJtF,KAAA+S,iBAAA,GAEMkD,GACCjW,KAACmU,iBArOC,CAAA5X,IAAA,cAAAgB,MAAA,WAwOI,IAAA2Y,EAAAlW,KTugBNA,KStgBAuC,MAAOiT,MAAGrQ,GAAM,QAAA,SAAAgR,EAAAC,EAAAC,EAAAC,GAChB,GAAKF,EAAA,eAAL,CT2gBI,ISrgBAG,EAHJH,EAAKrB,EAAAsB,ETsgBDD,ESrgBApB,EAAIsB,ETsgBJJ,EAAKjC,kBStgBsCuC,WAAAJ,GAL/B,IAAAK,EAAAC,EAAA9Z,2BAQFsZ,EAAArB,cARE,IT6gBZ,IAAA6B,EAAAtZ,MAAAqZ,EAAAC,EAAArZ,KAAAC,OAAKiZ,ESrgB4BE,EAAAlZ,OACvB,eAINgK,KAAKoP,IAAAP,EAAMrB,EAAOwB,EAAIxB,GAAA,IAAAxN,KAAAoP,IAAAP,EAAApB,EAAAuB,EAAAvB,GAAA,IAAAoB,EAAApB,EAAAuB,EAAAvB,EAAA,ITogBlBoB,ESngBA,gBAAc,ETogBdA,ESngBCQ,qBTogBDL,ESngBG,eAAa,ETogBhBL,ESngBA3T,MAAAyD,OAAaxD,IAAA,CACbyD,QAAMmQ,EACPrB,EAAAwB,EAAAxB,EAEHC,EAAAuB,EAAYvB,EAER9O,SAAC,IAEDuL,KAAMxQ,OAAOsG,KAAImK,OAAAC,KAAAC,MAE5B2E,EAAA,WAAAH,EACFF,EAAAW,0BAGEX,EAAU3T,MAAA8C,MAAc7C,IAAE,sBAAmB8C,QA/B9B,MAAA1H,GAAA8Y,EAAAlZ,EAAAI,GAAA,QAAA8Y,EAAAhZ,SAoCpBsC,KAAKsT,UAAI1D,eAAoB,CAAAE,OAAA,UAAcgH,cAAA,MA7QrC,CAAAva,IAAA,0BAAAgB,MAAA,WT6wBF,IS/foCwZ,EAEpCC,EAAgB,EAFoBC,EAAAra,2BAGhBoD,KAAC6U,cAHe,ITggBpC,IAAAoC,EAAA7Z,MAAA2Z,EAAAE,EAAA5Z,KAAAC,MS7fqB,CAAA,IAAjBiZ,EAAiBQ,EAAAxZ,MT8fjB,IS7fHgZ,EAAA,WACJ,OACIA,EAAe,iBAAQA,EAAA,WAAA,iBACxBS,KAPoC,MAAApZ,GAAAqZ,EAAAzZ,EAAAI,GAAA,QAAAqZ,EAAAvZ,ITugBpCsC,KS5fH+S,iBAAA,GT6fOiE,GS7fDhX,KAAA6U,aAAA7Y,QACHgE,KAAKkX,kBACRlX,KAAAuC,MAAA8C,MAAA7C,IAAAxC,KAAAuL,SAAAlB,aAAA/E,QAIGtF,KAACmX,kBA/RC,CAAA5a,IAAA,gCAAAgB,MAAA,SAkSO6Y,EAAkB3M,GAAA,IAAA2N,EAAApX,KT6f3BA,KS5fAuC,MAAAyD,OAAaxD,IAAA,CACbyD,QAAMmQ,EACNrB,EAAAqB,EAAA,cAAerB,ET6fXC,EAAGoB,ES5fC,cAAUpB,ET6fd9O,SS7fgB,IACpBuL,KAACxQ,OAAAsG,KAAAmK,OAAA2F,KAAAzF,IACFnI,WAAA,WACQA,GACPA,OAIHxI,OAAAsG,KAAA+P,SAAAC,QAAAnB,EAAA,cAAArB,EAAAqB,EAAA,cAAApB,EAAAoB,EAAArB,EAAAqB,EAAApB,GAAA,IAEGnS,YAAC,KAAA,WACRuU,EAAA7U,MAAA8C,MAAA7C,IAAA,sBAAA8C,UAKGtF,KAAKwX,sBAAmBpB,KAtTlB,CAAA7Z,IAAA,kBAAAgB,MAAA,WAyTO,IAAAka,EAAAzX,KAETjE,EAACiE,KAAAuL,SAAgBmM,8BACrB1X,KAAK2X,gBAAc5b,GAAI6b,SAAG,EAE1B5X,KAAK6X,MAAM9b,GAAA6b,SAAW,ETuflB,IStfAE,EAAS9X,KAAKuL,SAAS2L,kBAgB3B,OTueIlX,KStfCyS,cAAKzS,KAAAuC,MAAA8C,MAAA7C,IAAA,gBTufNxC,KStfAyS,cAAcnN,OTufdtF,KStfAuC,MAAMyD,OAAOxD,IAAK,CACnByD,QAAAjG,KAAAwS,UAEHuC,EAAA,IACI7O,SAAK,KACNuL,KAAAxQ,OAAAsG,KAAAmK,OAAA2F,KAAAzF,MAGNzG,EAAAoH,SAAA,gBAAAvS,KAAAwS,WAAA,WAGMiF,EAAanF,cAEXwF,IA/UC,CAAAvb,IAAA,gBAAAgB,MAAA,WAmVN,IAAIxB,EAAIiE,KAAWuL,SAAKmM,8BAExB1X,KAAK2X,gBAAc5b,GAAG6b,SAAW,EACjC5X,KAAK2X,gBAAe5b,GAAI6b,SAAG,EAC3B5X,KAAK6X,MAAM9b,GAAA6b,SAAU,EAErB,IAAIG,EAAK/X,KAAAuL,SAAe4L,gBAUxB,OTseInX,KS/eA0S,eAAkB1S,KAAKuC,MAAC8C,MAAA7C,IAAe,cTgfvCxC,KS/eA0S,eAAKpN,OTgfLtF,KS/eHuC,MAAA8C,MAAA7C,IAAA,YAAA8C,OAEW,MAAZtF,KAAOqS,kBACV/N,mBAAAtE,KAAAqS,iBAEMrS,KAAYqS,gBAAA,MAEV0F,IAnWC,CAAAxb,IAAA,eAAAgB,MAAA,WAuWNyC,KAAIgY,qBT6eAhY,KS5eAuC,MAAK8C,MAAM7C,IAAI,2BAAsB8C,SAxWnC,CAAA/I,IAAA,gBAAAgB,MAAA,WTu1BF,GAAIyC,KS5eH6X,MT4eD,CS5eC,IAAAI,EAAAC,EAAAtb,2BACaoD,KAAK2X,iBADlB,IACD,IAAAO,EAAA9a,MAAA6a,EAAAC,EAAA7a,KAAAC,MAA0B,CAAA,IAAjB6a,EAAiBF,EAAA1a,MACtB4a,EAAEP,SAAU,EACZ5X,KAAKwW,WAAW2B,IAHnB,MAAAva,GAAAsa,EAAA1a,EAAAI,GAAA,QAAAsa,EAAAxa,IAAA,IAAA0a,EAAAC,EAAAzb,2BAKMoD,KAAA6X,OALN,IAKD,IAAAQ,EAAAjb,MAAAgb,EAAAC,EAAAhb,KAAAC,MAAO,CAAA,IAAAgG,EAAA8U,EAAA7a,MACV+F,EAAAsU,SAAA,EAEG5X,KAAiBwW,WAAGlT,IARnB,MAAA1F,GAAAya,EAAA7a,EAAAI,GAAA,QAAAya,EAAA3a,ST4eD,CS5dJ,IAJA,IAGI4a,EAAsB,GACrBvc,EAAQ,EAAGA,EAAA,GAAAA,IAEhBuc,EAAcjV,KAAA,CAAA0R,EAND,GAM2BC,EALpC,IACH,GAIuCjZ,IT4epCiE,KS1eA2X,gBAAK,GT2eL3X,KS1eA6X,MAAA,GT2eA,IAAA,IAAAU,EAAA,EAAAC,ESzeIF,ETyeJC,EAAAC,EAAAxc,OAAAuc,ISze0B,CAA1B,IAAIlZ,EAAAmZ,EAAAD,GACAE,EAAY,IAAQxX,OAAEmO,YAAAO,MAAA3P,KAAAuC,MAAAlD,EAAA,EAAAA,EAAA,EAAA,eAC7BW,KAAA2X,gBAAAtU,KAAAoV,GAEDA,EAAgBb,SAAK,EACjB,IAAIc,EAAU,IAAAzX,OAAAmO,YAAAO,MAAA3P,KAAAuC,MAAAlD,EAAA,EAAAA,EAAA,EAAA,SACjBW,KAAA6X,MAAAxU,KAAAqV,GA9BW,IAAAC,EAAAC,EAAAhc,2BAgCIoD,KAAE2X,iBAhCN,ITwgBR,IAAAiB,EAAAxb,MAAAub,EAAAC,EAAAvb,KAAAC,MSxec,CAAA,IAATub,EAASF,EAAApb,MACdyC,KAAIwC,IAAAqW,IAjCI,MAAAjb,GAAAgb,EAAApb,EAAAI,GAAA,QAAAgb,EAAAlb,IAAA,IAAAob,EAAAC,EAAAnc,2BAmCfoD,KAAA6X,OAnCe,IAmCf,IAAAkB,EAAA3b,MAAA0b,EAAAC,EAAA1b,KAAAC,MAAA,CAAA,IAAA0b,EAAAF,EAAAvb,MAEMyC,KAAAwC,IAAAwW,GACCA,EAAYpB,SAAK,GAtCT,MAAAha,GAAAmb,EAAAvb,EAAAI,GAAA,QAAAmb,EAAArb,QA1WN,CAAAnB,IAAA,uBAAAgB,MAAA,WAqZT,ITseO,ISteP0b,EADIjZ,KAAAuL,SAAAmM,8BACJ,EAAAuB,EAAAjZ,KAAA2X,gBAAA3b,OAAAid,IAIMjZ,KAAA2X,gBAAmBsB,GAAArB,SAAA,EACtB5X,KAAA6X,MAAAoB,GAAkBrB,SAAU,IA1ZtB,CAAArb,IAAA,sBAAAgB,MAAA,WA8ZY,IAAA2b,EAAAlZ,KToed0E,kBSneC,WToeD,ISneAyU,EAAuB,WACnBD,EAACvG,OACPuG,EAAAvG,MAAA/D,OAGEsK,EAAAvG,MAAAuG,EAAiB3W,MAAO8C,MAAC7C,IAAA,wCACzB0W,EAAKvG,MAAMrN,QToeXtF,KSjeAoZ,gBAAgB,IAAA3N,EAAA4N,gBAAArZ,KAAAuC,OAAA,SAAA1G,GTkeZ8J,iBSjeW9J,GTkeXqd,ESjeH9U,OAAA8U,EAAAE,iBACFF,EAAAI,eACCJ,EAAAvG,OACAuG,EAAAvG,MAAA/D,UAEJ,SAAI/S,GACJ8J,iBAAoB9J,GACvBsd,OAIGnZ,KAAAwC,IAAAxC,KAAAoZ,iBACAD,MAvbM,CAAA5c,IAAA,qBAAAgB,MAAA,WA0bU,IAAAgc,EAAAvZ,KAEhBwD,uBT8dIkB,kBS7dW,WT8dX1E,KS7dAuC,MAAKyD,OAAOwT,WT8dZxZ,KS7dAyZ,cT8dAzZ,KS7dA2T,iBAAK,IAAmBlI,EAAGyD,iBAAAlP,KAAAuC,OAAA,WAC7BgX,EAAIhX,MAAAyD,OAAA0T,YACFH,EAAKnV,OAAMmV,EAAM5F,kBACjB4F,EAAKzG,kBACLyG,EAAK3N,yBT8dF,WS5dH2N,EAAAhX,MAAAyD,OAAkB0T,YACnBH,EAAAnV,OAAAmV,EAAA5F,kBACC4F,EAAKI,gBACZ7V,wBA4CMY,kBAAgC,mBTob/B1E,KSlbAwC,IAAKxC,KAAK2T,oBAvfR,CAAApX,IAAA,kBAAAgB,MAAA,SAwfLqc,GTobG,GAAIA,ESpbD,CAAA,IAAAC,EAAAC,EAAAld,2BACWoD,KAAK4U,mBADhB,IACH,IAAAkF,EAAA1c,MAAAyc,EAAAC,EAAAzc,KAAAC,MAAA,CAAAuc,EAAAtc,MAAwCqS,kBADrC,MAAAhS,GAAAkc,EAAAtc,EAAAI,GAAA,QAAAkc,EAAApc,SAGV,CAAA,IAAAqc,EAAAC,EAAApd,2BAEiBoD,KAAA4U,mBAFjB,IAEM,IAAAoF,EAAA5c,MAAA2c,EAAAC,EAAA3c,KAAAC,MAAA,CAAAyc,EAAAxc,MACOqZ,sBAHb,MAAAhZ,GAAAoc,EAAAxc,EAAAI,GAAA,QAAAoc,EAAAtc,QA3fS,CAAAnB,IAAA,cAAAgB,MAAA,WAmgBTyC,KAAAuC,MAAA8C,MAAAmU,aAngBS,CAAAjd,IAAA,gBAAAgB,MAAA,WAugBNyC,KAAKuC,MAAM8C,MAAMqU,cAvgBX,CAAAnd,IAAA,kBAAAgB,MAAA,WA0gBTyC,KAAA+S,iBAAA,GACJ/S,KAAAoE,OAAApE,KAAAiU,mBAhiBYjU,KAAAuC,MAAA8C,MAAc4U,UALjBhW,6BA0BIyH,EAAA,GC1BlBD,EAAaC,eAAAA,EVghBT,CUjeH5K,EAAA2K,SAAA3K,EAAA2K,OAAA,KV+dD,CAgdG3K,MU99BWA,IAAA,KVg+Bd,SAAWA,IAEP,SAAW2K,GUt9BE,IVu9BH4N,EUv9BG,SAAAa,GAAAlb,UAAAqa,EACiBpY,OAAAmO,YAAgBC,WADjC,IAAA8K,EAAA3a,aAAA6Z,GVw9BL,SAAAA,EUt9BK9W,EAAA6X,EAAiBC,GAAiB,IAAAC,EAAA,OAAAxb,gBAAAkB,KAAAqZ,IAEvCiB,EAAAH,EAAA7b,KAAA0B,KAAKuC,IACAgY,iBAAA,IAAsBtZ,OAAQmO,YAAOO,MAAA2K,EAAA/X,OAAA,KAAA,GAAA,2CAE1C+X,EAAKC,iBAAenN,UAAO,EAAA,GAC3BkN,EAAKC,iBAAS3K,iBACd0K,EAAKE,sBAAc,IAAavZ,OAAAmO,YAAaO,MAAA2K,EAAA/X,MAAA,IAAA,IAAA,cAC7C+X,EAAAE,sBAAwBnH,SAAK,KAE7BiH,EAAKG,SAAW,IAAIxZ,OAAOmO,YAASO,MAAK2K,EAAM/X,MAAS1B,KAAMkB,MAAMP,MAAO,EAAI,IAAE,YVo9B7E8Y,EUn9BAG,SAAA7K,eAAc,CAAAE,OAAgB,YVo9B9BwK,EUn9BAG,SAAU5L,KAAI,YAAAuL,GVo9Bd7U,wBUn9BkB+U,EAAAG,SAAA,WAAA,YVo9BlBH,EUn9BAI,SAASJ,EAAQ/X,MAAAC,IAAAuK,KAAAlM,KAAAkB,MAAAP,MAAA,EAAAX,KAAAkB,MAAAL,OAAA,EAAA,wCAAA,CAClBsL,WAAA,iBACCC,SAAU,GACVC,MAAS,UACTC,MAAS,WAGbmN,EAAKI,SAAAtN,UAAA,GAAqB,IAC1BkN,EAAKI,SAAAC,iBAAwB,KAC7BL,EAAKI,SAAAE,eAAqB,GAC1BN,EAAAO,qBAA4B,IAAC5Z,OAAAmO,YAAsBO,MAAA2K,EAAQ/X,MAAA,IAAoB,IAAE,SAEjF+X,EAAKO,qBAASjL,eAAkB,CAAAE,OAAA,YAChCwK,EAAKO,qBAAS1V,GAAA,YAAuBkV,GACrCC,EAAKO,qBAAL,SAAwBP,EAAAO,qBAAA9Y,MACxBwD,wBAAwB+U,EAAAO,qBAAA,QAAA,sBACxBP,EAAK9X,IAAI8X,EAAKC,kBACjBD,EAAA9X,IAAA8X,EAAAE,uBACJF,EAAA9X,IAAA8X,EAAAI,UA7CYJ,EAAA9X,IAAA8X,EAAeG,UADlBH,EAAA9X,IAAA8X,EAAMO,sBAc+BP,EAFlC,OAAAjB,EAAA,GCZjB5N,EAAa4N,gBAAAA,EXk+BT,CWx4BHvY,EAAA2K,SAAA3K,EAAA2K,OAAA,KXs4BD,CAsCG3K,MWtgCWA,IAAA,KXwgCd,SAAWA,IAEP,SAAW2K,GWj8BC,IXk8BF0H,EWl8BE,SAAA2H,GAAA9b,UAAAmU,EA3DiBlS,OAAOmO,YAAAC,WA2DxB,IAAA0L,EAAAvb,aAAA2T,GXm8BJ,SAAAA,EW5/BQ5Q,EAAO4N,EAAOC,GAAW,IAAA4K,EAAAlc,gBAAAkB,KAAAmT,IACjC6H,EAAAD,EAAAzc,KAAA0B,KAAKuC,IACAgO,MAAI,KACTyK,EAAKxK,aAAY,KAAO,IACxBwK,EAAKC,IAAA,IAAQha,OAAOmO,YAAOO,MAAYqL,EAAMzY,MAAK,EAAK,EAAE,kBACzDyY,EAAKC,IAAA7N,UAAa,EAAI,GAEtB4N,EAAKC,IAAArL,iBX4/BDoL,EW3/BAE,MAAA,IAAYja,OAAEmO,YAAgBO,MAAAqL,EAAAzY,MAAA,IAAA,IAAA,cX4/B9ByY,EW3/BArK,SAAY,IAAE1P,OAAAmO,YAAAO,MAAAqL,EAAAzY,MAAA,IAAA,IAAA,YX4/BdyY,EW3/BApK,WAAS,IAAS3P,OAAAmO,YAAAO,MAAAqL,EAAAzY,MAAA,IAAA,IAAA,cX4/BlByY,EW3/BAjK,cAAiBiK,EAAAzY,MAAAC,IAAAuK,KAAA,IAAA,IAAA,GAAA,CACjBC,WAAU,iBACVC,SAAA,GACDC,MAAA,UACCC,MAAC,SAED6D,OAAU,UACVC,gBAAgB,IAEpB+J,EAAKjK,cAAc3D,UAAQ,GAAK,IAEhC,IAAI8D,EAAC8J,EAAAjK,cAAoBI,QAAUC,qBAAmB,EAAA,EAAA,EAAA4J,EAAAjK,cAAArP,QAtBrB,OXghC7BwP,EWz/BAG,aAAY,EAAE,WX0/BdH,EWz/BAG,aAAY,EAAE,WX0/Bd2J,EWz/BAjK,cAASO,QAASJ,GX0/BlB8J,EWz/BAzJ,aAASyJ,EAAQzY,MAAAC,IAAAuK,KAAA,IAAA,IAAA,GAAA,CAClBC,WAAA,iBACCC,SAAC,GAEDC,MAAK,UACLC,MAAQ,WX0/BR6N,EWx/BAzJ,aAAanE,UAAA,GAAA,IXy/Bb4N,EWx/BAxY,IAAK,CACLwY,EAAKC,IACLD,EAAKE,MACNF,EAAArK,SAECqK,EAACpK,WACDoK,EAACjK,cACDiK,EAAAzJ,eXy/BAyJ,EWv/BArK,SAAAf,eAAyB,CAAAE,OAAA,YXw/BzBkL,EWv/BArK,SAAIxL,GAAA,aAAA,WACLgL,EAAA6K,EAAArK,aX4/BCpL,wBWv/BgByV,EAAArK,SAAA,WAAA,YXw/BhBqK,EAAKpK,WWv/BIhB,eAAa,CAAAE,OAAA,YXw/BtBkL,EWv/BCpK,WAAA/B,KAAA,aAAA,WACFuB,EAAA4K,EAAApK,YACHoK,EAAAzK,OACHyK,EAAAzK,MAAA3B,UAKGrJ,wBAAsByV,EAAApK,WAAA,aAAA,cA5DWoK,EAyD7B,OAAAxe,aAAA2W,EAAA,CAAA,CAAA5W,IAAA,OAAAgB,MAAA,SX0/BCqM,EWr/BD4H,GXs/BAxR,KWr/BAkb,MAAAnZ,MAAa,KXs/Bb/B,KWr/BAuC,MAAMyD,OAAOxD,IAAK,CACnByD,QAAAjG,KAAAkb,MAECnZ,MAAC,EACDmE,SAAC,IAEDuL,KAAMxQ,OAAOsG,KAACmK,OAAWC,KAAKC,MAErC5R,KAAA+Q,cAAAhE,KAAA8E,OAAAjI,GACJ5J,KAAAuR,aAAAxE,KAAA8E,OAAAL,GAxFYxR,KAAAuQ,MAAcvQ,KAAAuC,MAAA8C,MAwF1B7C,IAAA,oBAzFSxC,KAAAuQ,MAAMjL,WAyEJ6N,EAAA,GXwgCR1H,EAAO0H,eAAiBA,EAvE5B,CAwEYrS,EAAI2K,SAAW3K,EAAI2K,OAAS,KA1E5C,CA2EG3K,MAAQA,IAAM","file":"main.js","sourcesContent":["var ctb;\n(function (ctb) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                parent: 'game-container',\n                dom: {\n                    createContainer: false\n                },\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', ctb.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    ctb.App = App;\n})(ctb || (ctb = {}));\nlet game;\nwindow.onload = () => {\n    game = new ctb.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction destroyDelayedCall(dc) {\n    if (dc instanceof Phaser.Time.TimerEvent) {\n        dc.remove(false);\n    }\n    else {\n        clearTimeout(dc);\n    }\n    let ind = delayedCalls.indexOf(dc);\n    if (ind >= 0)\n        delayedCalls.splice(ind, 1);\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction playBtnClickAnim(target) {\n    let sc = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\n    target.scaleX = target.scaleY = sc;\n    let scene = game.scene.getAt(0);\n    scene.tweens.add({\n        targets: target,\n        \"scaleX\": 0.9 * sc,\n        \"scaleY\": 0.9 * sc,\n        duration: 100,\n        yoyo: true\n    });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar ctb;\n(function (ctb) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.allLettersNames = null;\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n                this.onNewRound = null;\n                this.nextLetterDelay = 0;\n                this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\n                this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\n            }\n            setupCallbacks(onComplete, onLose, onNewRound) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n                this.onNewRound = onNewRound;\n            }\n            calculateScore() {\n                return this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLettersPlaced() {\n                this.currentRound++;\n                if (this.currentRound >= this.totalRoundsNum) {\n                    let score = this.calculateScore();\n                    this.onComplete(score, score);\n                    return true;\n                }\n                else {\n                    this.nextLetter();\n                }\n                return false;\n            }\n            nextLetter() {\n                let fn = () => {\n                    let thisRound = this.rounds.shift();\n                    this.blockLetters = thisRound[\"blockLetters\"];\n                    this.correctWord = thisRound[\"correctWord\"];\n                    this.correctAnswersCountThisRound = 0;\n                    this.wrongAnswersCountThisRound = 0;\n                    if (this.onNewRound)\n                        this.onNewRound();\n                };\n                if (this.nextLetterDelay == 0) {\n                    fn();\n                }\n                else {\n                    delayedCall(this.nextLetterDelay, fn);\n                }\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                this.nextLetterDelay = 3500;\n                return this.onLettersPlaced();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                this.nextLetterDelay = 2000;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLettersPlaced();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.currentRound >= this.totalRoundsNum;\n            }\n            getAudioKeyOfChar(letter) {\n                let json = game.cache.json.get('gameplay');\n                let letters = json[\"letters\"];\n                for (let d of letters) {\n                    if (letter == d['letterName']) {\n                        return d['audioKey'];\n                    }\n                }\n                return null;\n            }\n            reset() {\n                this.nextLetterDelay = 0;\n                this.setupCallbacks(null, null, null);\n                let json = game.cache.json.get('gameplay');\n                this.rounds = json[\"rounds\"].slice();\n                this.totalRoundsNum = this.rounds.length;\n                this.letters = json[\"letters\"].slice();\n                this.allLettersNames = [];\n                for (let d of this.letters)\n                    this.allLettersNames.push(d[\"letterName\"]);\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = ctb.core || (ctb.core = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                // new FitScaleManager(this.game).setup();\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', ctb.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        var Gameplay = ctb.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n            update() {\n                this.gameplayScreen._update();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n            }\n            create() {\n                let json = game.cache.json.get('gameplay');\n                if (json[\"useImages\"]) {\n                    for (let l of json[\"letters\"]) {\n                        this.load.image(l[\"letterName\"], \"assets/imgs/letters/\" + l[\"letterName\"] + \".png\");\n                    }\n                    for (let r of json[\"rounds\"]) {\n                        this.load.image(r[\"correctWord\"], \"assets/imgs/words/\" + r[\"correctWord\"] + \".png\");\n                    }\n                }\n                for (let l of json[\"letters\"]) {\n                    this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\" + l[\"audioKey\"] + \".mp3\");\n                }\n                for (let r of json[\"rounds\"]) {\n                    this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\" + r[\"correctWord\"] + \".mp3\");\n                }\n                let progressTxt = this.add.text(game.scale.width / 2, game.scale.height / 2, \"\", {\n                    \"fontFamily\": \"Quran Era font\",\n                    \"fontSize\": 25,\n                    \"color\": \"#000000\",\n                    \"align\": 'center'\n                });\n                progressTxt.setOrigin(0.5, 0.5);\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                    progressTxt.text = Math.ceil(value * 100) + \"%\";\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            static playAnim(animKey, sprite, onComplete = null) {\n                let mainScene = game.scene.getScene('ScreenMain');\n                if (!mainScene.anims.exists(animKey)) {\n                    let data = Preloader.ANIMS_DATA[animKey];\n                    mainScene.anims.create({\n                        key: animKey,\n                        frames: mainScene.anims.generateFrameNames(data['atlas'], {\n                            start: data['start'], end: data['end'], zeroPad: data['padNum'],\n                            prefix: data['prefix'], suffix: ''\n                        }),\n                        frameRate: data['frameRate'],\n                        repeat: data['repeat']\n                    });\n                }\n                if (sprite.anims.currentAnim) {\n                    sprite.anims.currentAnim.off('complete');\n                }\n                sprite.anims.stop();\n                sprite.play(animKey);\n                sprite.anims.currentAnim.once('complete', () => {\n                    if (onComplete)\n                        onComplete();\n                });\n                return sprite;\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', ctb.scene.MainScene, true);\n            }\n        }\n        Preloader.ANIMS_DATA = {\n            'idle': {\n                'start': 0,\n                'end': 51,\n                'padNum': 4,\n                'prefix': 'idle',\n                'repeat': 0,\n                'frameRate': 12,\n                'atlas': 'atlas-shake-idle'\n            },\n            'yelling_wrong': {\n                'start': 0,\n                'end': 46,\n                'padNum': 4,\n                'prefix': 'yelling_wrong',\n                'repeat': 0,\n                'frameRate': 12,\n                'atlas': 'atlas-yelling_wrong'\n            }\n        };\n        scene.Preloader = Preloader;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        var Preloader = ctb.scene.Preloader;\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.bgMusic = null;\n                this.correctAudio = null;\n                this.correctAudioWord = null;\n                this.correctAudioWordDelay = null;\n                this.idleDelayedCall = null;\n                this.playIdle = () => {\n                    Preloader.playAnim('idle', this.character, () => {\n                        this.idleDelayedCall = delayedCall(5000, () => {\n                            this.playIdle();\n                        });\n                    });\n                };\n                this.soundGooseYes = null;\n                this.soundWrongDrop = null;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(2000, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"gs\"] = this;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\n                this._gameStage.setOrigin(0.5, 0.5);\n                this._gameStage.setScale(1.02);\n                this._gameStage.setInteractive();\n                this.add(this._gameStage);\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                this._btnClose[\"defScale\"] = this._btnClose.scale;\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.add(this._btnClose);\n                this._btnClose.on('pointerup', () => {\n                    playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                this._btnSound[\"defScale\"] = this._btnSound.scale;\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._btnSound);\n                this._btnSound.on('pointerup', () => {\n                    playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                this.correctAudio = this.scene.sound.add('Make the word map');\n                this.correctAudio.play();\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                    this.correctAudio.pause();\n                }\n                if (this.correctAudioWord)\n                    this.correctAudioWord.stop();\n                if (this.correctAudioWordDelay) {\n                    destroyDelayedCall(this.correctAudioWordDelay);\n                    this.correctAudioWordDelay = null;\n                }\n                this.correctAudioWordDelay = delayedCall(1250, () => {\n                    this.correctAudioWord = this.scene.sound.add(this.gameplay.correctWord);\n                    this.correctAudioWord.play();\n                });\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.add(this.gameplayContainer);\n                this.gameplay.reset();\n                this.prepareRound();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, () => {\n                    this.onNewRound(true);\n                });\n                this.createTallies();\n            }\n            prepareRound() {\n                this.gameplayContainer.removeAll();\n                this.character = this.scene.add.sprite(0, 0, null);\n                this.character.setPosition(750, 310);\n                this.playIdle();\n                let randomizedLetter = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\n                if (this.gameplay.useImages) {\n                    let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                else {\n                    let correctWord = this.scene.add.text(750, 180, \"\", {\n                        \"fontFamily\": \"Quran Era font\",\n                        \"fontSize\": 90,\n                        \"color\": \"#000000\",\n                        \"align\": 'center'\n                    });\n                    correctWord.setOrigin(0.5, 0.5);\n                    correctWord.style.fixedHeight = 140;\n                    correctWord.setText(this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                this.selectableLetters = [];\n                this.targetBlocks = [];\n                for (let i = 0; i < this.gameplay.correctWord.length; i++) {\n                    let b = {\n                        x: 174 + i * 133, y: 215\n                    };\n                    b['alreadyFilled'] = false;\n                    this.targetBlocks.push(b);\n                    b[\"-letter-text\"] = this.gameplay.correctWord.charAt(this.gameplay.correctWord.length - 1 - i);\n                    b[\"-block-\"] = null;\n                }\n                for (let i = 0; i < randomizedLetter.length; i++) {\n                    let a = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\n                    a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'IceBlock'));\n                    a[\"-image-\"].setOrigin(0.5, 0.5);\n                    this.selectableLetters.push(a);\n                    let txt;\n                    if (this.gameplay.useImages) {\n                        txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    else {\n                        txt = this.scene.add.text(0, 0, \"\", {\n                            \"fontFamily\": \"Quran Era font\",\n                            \"fontSize\": 55,\n                            \"color\": \"#000000\",\n                            \"align\": 'center'\n                        });\n                        txt.setOrigin(0.5, 0.5);\n                        txt.style.fixedHeight = 75;\n                        txt.setText(randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    a['startPosition'] = { x: a.x, y: a.y };\n                    a[\"-letter-\"] = txt;\n                    a[\"-letter-text\"] = randomizedLetter[i];\n                    this.gameplayContainer.add(a);\n                    a['-draggable-'] = true;\n                }\n                for (let a of this.selectableLetters) {\n                    a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\n                    a.setInteractive( /*{cursor: 'pointer', pixelPerfect:true}*/);\n                    this.scene.input.setDraggable(a);\n                    a.on('pointerdown', () => {\n                        a['-pointerdown-'] = true;\n                    });\n                    a.on('pointerup', () => {\n                        a['-pointerdown-'] = false;\n                        if (!a['-draggable-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null);\n                    });\n                    a.on('pointerout', () => {\n                        if (!a['-draggable-'])\n                            return;\n                        if (!a['-pointerdown-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null);\n                    });\n                }\n                this.createInput();\n                this.setInputEnabled(false);\n                // delayedCall(1200, ()=>{\n                if (this.gameplay.isNewRound()) {\n                    if (!this.gameplay.isRoundsComplete()) {\n                        // delayedCall(2000, ()=>{\n                        this.setInputEnabled(true);\n                        // });\n                    }\n                }\n                else {\n                    this.setInputEnabled(true);\n                }\n                // });\n                this.gameplayContainer.add(this.character);\n            }\n            _update() {\n                if (this.selectableLetters) {\n                    for (let a of this.selectableLetters) {\n                        if (a.x < 0 + a[\"-image-\"].width / 2) {\n                            a.x = 0 + a[\"-image-\"].width / 2;\n                        }\n                        else if (a.x > game.scale.width - a[\"-image-\"].width / 2) {\n                            a.x = game.scale.width - a[\"-image-\"].width / 2;\n                        }\n                        if (a.y < 0 + a[\"-image-\"].height / 2) {\n                            a.y = a[\"-image-\"].height / 2;\n                        }\n                        else if (a.y > game.scale.height - a[\"-image-\"].height / 2) {\n                            a.y = game.scale.height - a[\"-image-\"].height / 2;\n                        }\n                    }\n                }\n            }\n            placeAppleOverBuckets(a) {\n                if (!a.parentContainer)\n                    return;\n                this.gameplayContainer.remove(a);\n                this.gameplayContainer.addAt(a, this.gameplayContainer.length);\n            }\n            onNewRound(showOut) {\n                this.scene.sound.add(\"next_round\").play();\n                this.setInputEnabled(false);\n                if (showOut) {\n                    this.prepareRound();\n                }\n            }\n            createInput() {\n                this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\n                    if (!block['-draggable-'])\n                        return;\n                    block.x = dragX;\n                    block.y = dragY;\n                    this.gameplayContainer.bringToTop(block);\n                    let targetBlock;\n                    for (targetBlock of this.targetBlocks) {\n                        if (targetBlock['alreadyFilled'])\n                            continue;\n                        if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\n                            block['-draggable-'] = false;\n                            block.disableInteractive();\n                            targetBlock['alreadyFilled'] = true;\n                            this.scene.tweens.add({\n                                targets: block,\n                                x: targetBlock.x,\n                                y: targetBlock.y,\n                                duration: 300,\n                                ease: Phaser.Math.Easing.Back.Out\n                            });\n                            targetBlock[\"-block-\"] = block;\n                            this.checkTargetBlockLetters();\n                            this.scene.sound.add(\"drag from its spot\").play();\n                        }\n                    }\n                });\n                this._btnClose.setInteractive({ cursor: 'pointer', pixelPerfect: true });\n            }\n            checkTargetBlockLetters() {\n                let sameLettersNum = 0;\n                for (let targetBlock of this.targetBlocks) {\n                    if (!targetBlock['-block-'])\n                        return;\n                    if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\n                        sameLettersNum++;\n                    }\n                }\n                this.setInputEnabled(false);\n                if (sameLettersNum == this.targetBlocks.length) {\n                    this.onCorrectAnswer();\n                    this.scene.sound.add(this.gameplay.correctWord).play();\n                }\n                else {\n                    this.onWrongAnswer();\n                }\n            }\n            moveBridgeBackToStartPosition(block, onComplete) {\n                this.scene.tweens.add({\n                    targets: block,\n                    x: block['startPosition'].x,\n                    y: block['startPosition'].y,\n                    duration: 250,\n                    ease: Phaser.Math.Easing.Sine.Out,\n                    onComplete: () => {\n                        if (onComplete)\n                            onComplete();\n                    }\n                });\n                if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\n                    delayedCall(100, () => {\n                        this.scene.sound.add(\"drag from its spot\").play();\n                    });\n                }\n                this.placeAppleOverBuckets(block);\n            }\n            onCorrectAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = false;\n                this.tally[i].visible = true;\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"correct drop\");\n                this.soundGooseYes.play();\n                this.scene.tweens.add({\n                    targets: this.character,\n                    x: 700,\n                    duration: 2500,\n                    ease: Phaser.Math.Easing.Sine.Out\n                });\n                Preloader.playAnim('yelling_wrong', this.character, () => {\n                    this.playIdle();\n                });\n                return completed;\n            }\n            onWrongAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = true;\n                this.tallyEmptyArray[i].visible = true;\n                this.tally[i].visible = false;\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\n                this.soundWrongDrop.play();\n                this.scene.sound.add(\"Goose no\").play();\n                if (this.idleDelayedCall != null) {\n                    destroyDelayedCall(this.idleDelayedCall);\n                    this.idleDelayedCall = null;\n                }\n                return lost;\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            createTallies() {\n                if (this.tally) {\n                    for (let te of this.tallyEmptyArray) {\n                        te.visible = false;\n                        this.bringToTop(te);\n                    }\n                    for (let t of this.tally) {\n                        t.visible = false;\n                        this.bringToTop(t);\n                    }\n                    return;\n                }\n                let startX = 18;\n                let startY = 148;\n                let dy = 34;\n                let tallyEmptyArrayPositions = [];\n                for (let i = 0; i < 12; i++) {\n                    tallyEmptyArrayPositions.push({ x: startX, y: startY + i * dy });\n                }\n                this.tallyEmptyArray = [];\n                this.tally = [];\n                for (let p of tallyEmptyArrayPositions) {\n                    let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\n                    this.tallyEmptyArray.push(_BeehiveEmpty);\n                    _BeehiveEmpty.visible = false;\n                    let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\n                    this.tally.push(_Beehive);\n                }\n                for (let bea of this.tallyEmptyArray) {\n                    this.add(bea);\n                }\n                for (let bee of this.tally) {\n                    this.add(bee);\n                    bee.visible = false;\n                }\n            }\n            hideAllUnusedTallies() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                for (let k = i + 1; k < this.tallyEmptyArray.length; k++) {\n                    this.tallyEmptyArray[k].visible = false;\n                    this.tally[k].visible = false;\n                }\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.scene.tweens.pauseAll();\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let a of this.selectableLetters)\n                        a.setInteractive( /*{cursor: 'pointer', pixelPerfect:true}*/);\n                }\n                else {\n                    for (let a of this.selectableLetters)\n                        a.disableInteractive();\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                this.scene.sound.stopAll();\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this.instrTxt.setWordWrapWidth(500);\n                this.instrTxt.setLineSpacing(5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\n","namespace ctb {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                parent: 'game-container',\r\n                dom: {\r\n                    createContainer: false\r\n                },\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', ctb.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: ctb.App;\r\nwindow.onload = () => {\r\n    game = new ctb.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\nfunction destroyDelayedCall(dc) {\r\n    if (dc instanceof Phaser.Time.TimerEvent) {\r\n        (dc as Phaser.Time.TimerEvent).remove(false);\r\n    } else {\r\n        clearTimeout(dc);\r\n    }\r\n    let ind = delayedCalls.indexOf(dc);\r\n    if (ind >= 0) delayedCalls.splice(ind, 1);\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\n\r\n\r\n\r\nfunction playBtnClickAnim(target): void {\r\n    let sc:number = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\r\n    target.scaleX = target.scaleY = sc;\r\n    let scene = game.scene.getAt(0);\r\n    scene.tweens.add({\r\n        targets: target,\r\n        \"scaleX\": 0.9 * sc,\r\n        \"scaleY\": 0.9 * sc,\r\n        duration: 100,\r\n        yoyo: true\r\n    });\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace ctb.core {\r\n    export class Gameplay {\r\n        public allLettersNames:string[] = null;\r\n\r\n        public totalRoundsNum:number;\r\n        public readonly failsNumToLose:number;\r\n\r\n        private currentRound:number = 0;\r\n        private letters:object[];\r\n        private rounds:object[];\r\n        public blockLetters:string[];\r\n        public correctWord:string;\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n        private onNewRound:()=>void = null;\r\n\r\n        public useImages:boolean;\r\n\r\n        constructor() {\r\n            this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\r\n            this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void, onNewRound:()=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n            this.onNewRound = onNewRound;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLettersPlaced():boolean {\r\n            this.currentRound++;\r\n            if (this.currentRound >= this.totalRoundsNum) {\r\n                let score:number = this.calculateScore();\r\n                this.onComplete(score, score);\r\n                return true;\r\n            } else {\r\n                this.nextLetter();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetterDelay:number = 0;\r\n        public nextLetter():void {\r\n            let fn:()=>void = ()=>{\r\n                let thisRound = this.rounds.shift();\r\n                this.blockLetters = thisRound[\"blockLetters\"];\r\n                this.correctWord = thisRound[\"correctWord\"];\r\n\r\n                this.correctAnswersCountThisRound = 0;\r\n                this.wrongAnswersCountThisRound = 0;\r\n\r\n                if (this.onNewRound) this.onNewRound();\r\n            };\r\n            if (this.nextLetterDelay == 0) {\r\n                fn();\r\n            } else {\r\n                delayedCall(this.nextLetterDelay, fn);\r\n            }\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 3500;\r\n\r\n            return this.onLettersPlaced();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 2000;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLettersPlaced();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.currentRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public getAudioKeyOfChar(letter:string):string {\r\n            let json = game.cache.json.get('gameplay');\r\n            let letters = json[\"letters\"];\r\n            for (let d of letters) {\r\n                if (letter == d['letterName']) {\r\n                    return d['audioKey'];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public reset():void {\r\n            this.nextLetterDelay = 0;\r\n            this.setupCallbacks(null, null, null);\r\n\r\n            let json = game.cache.json.get('gameplay');\r\n            this.rounds = json[\"rounds\"].slice();\r\n            this.totalRoundsNum = this.rounds.length;\r\n            this.letters = json[\"letters\"].slice();\r\n            this.allLettersNames = [];\r\n            for (let d of this.letters) this.allLettersNames.push(d[\"letterName\"]);\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            // new FitScaleManager(this.game).setup();\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', ctb.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace ctb.scene {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import GameplayScreen = ctb.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n\r\n        public update(): void {\r\n            this.gameplayScreen._update();\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        public static readonly ANIMS_DATA:object = {\r\n            'idle': {\r\n                'start': 0,\r\n                'end': 51,\r\n                'padNum': 4,\r\n                'prefix': 'idle',\r\n                'repeat': 0,\r\n                'frameRate': 12,\r\n                'atlas': 'atlas-shake-idle'\r\n            },\r\n            'yelling_wrong': {\r\n                'start': 0,\r\n                'end': 46,\r\n                'padNum': 4,\r\n                'prefix': 'yelling_wrong',\r\n                'repeat': 0,\r\n                'frameRate': 12,\r\n                'atlas': 'atlas-yelling_wrong'\r\n            }\r\n        };\r\n\r\n        preload() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n        }\r\n\r\n        create() {\r\n            let json = game.cache.json.get('gameplay');\r\n            if (json[\"useImages\"]) {\r\n                for (let l of json[\"letters\"]) {\r\n                    this.load.image(l[\"letterName\"], \"assets/imgs/letters/\"+l[\"letterName\"]+\".png\");\r\n                }\r\n                for (let r of json[\"rounds\"]) {\r\n                    this.load.image(r[\"correctWord\"], \"assets/imgs/words/\"+r[\"correctWord\"]+\".png\");\r\n                }\r\n            }\r\n            for (let l of json[\"letters\"]) {\r\n                this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\"+l[\"audioKey\"]+\".mp3\");\r\n            }\r\n            for (let r of json[\"rounds\"]) {\r\n                this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\"+r[\"correctWord\"]+\".mp3\");\r\n            }\r\n\r\n            let progressTxt:Phaser.GameObjects.Text = this.add.text(game.scale.width/2, game.scale.height/2, \"\", {\r\n                \"fontFamily\": \"Quran Era font\",\r\n                \"fontSize\": 25,\r\n                \"color\": \"#000000\",\r\n                \"align\": 'center'\r\n            });\r\n            progressTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n                progressTxt.text = Math.ceil(value * 100) + \"%\";\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        public static playAnim(animKey:string, sprite:Phaser.GameObjects.Sprite, onComplete:()=>void = null):Phaser.GameObjects.Sprite {\r\n            let mainScene = game.scene.getScene('ScreenMain');\r\n            if (!mainScene.anims.exists(animKey)) {\r\n                let data = Preloader.ANIMS_DATA[animKey];\r\n                mainScene.anims.create({\r\n                    key: animKey,\r\n                    frames: mainScene.anims.generateFrameNames(data['atlas'], {\r\n                        start: data['start'], end: data['end'], zeroPad: data['padNum'],\r\n                        prefix: data['prefix'], suffix: ''\r\n                    }),\r\n                    frameRate: data['frameRate'],\r\n                    repeat: data['repeat']\r\n                });\r\n            }\r\n            if (sprite.anims.currentAnim) {\r\n                sprite.anims.currentAnim.off('complete');\r\n            }\r\n            sprite.anims.stop();\r\n            sprite.play(animKey);\r\n            sprite.anims.currentAnim.once('complete', ()=>{\r\n                if (onComplete) onComplete();\r\n            });\r\n            return sprite;\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', ctb.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import Preloader = ctb.scene.Preloader;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        gameplay: Gameplay;\r\n\r\n        _btnSound: Phaser.GameObjects.Image;\r\n\r\n        selectableLetters:Phaser.GameObjects.Container[];\r\n        targetBlocks:object[];\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private character:Phaser.GameObjects.Sprite;\r\n\r\n        tallyEmptyArray: Phaser.GameObjects.Image[];\r\n        tally: Phaser.GameObjects.Image[];\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"gs\"]=this;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\r\n            this._gameStage.setOrigin(0.5, 0.5);\r\n            this._gameStage.setScale(1.02);\r\n            this._gameStage.setInteractive();\r\n            this.add(this._gameStage);\r\n\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            this._btnClose[\"defScale\"] = this._btnClose.scale;\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n            this.add(this._btnClose);\r\n            this._btnClose.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            this._btnSound[\"defScale\"] = this._btnSound.scale;\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this.add(this._btnSound);\r\n            this._btnSound.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n        }\r\n\r\n\r\n        private correctAudio = null;\r\n        private correctAudioWord = null;\r\n        private correctAudioWordDelay = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            this.correctAudio = this.scene.sound.add('Make the word map');\r\n            this.correctAudio.play();\r\n            if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                this.correctAudio.pause();\r\n            }\r\n\r\n            if (this.correctAudioWord) this.correctAudioWord.stop();\r\n            if (this.correctAudioWordDelay) {\r\n                destroyDelayedCall(this.correctAudioWordDelay);\r\n                this.correctAudioWordDelay = null;\r\n            }\r\n            this.correctAudioWordDelay = delayedCall(1250, ()=>{\r\n                this.correctAudioWord = this.scene.sound.add(this.gameplay.correctWord);\r\n                this.correctAudioWord.play();\r\n            });\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        private idleDelayedCall = null;\r\n        private playIdle:()=>void = ()=>{\r\n            Preloader.playAnim('idle', this.character, ()=>{\r\n                this.idleDelayedCall = delayedCall(5000, ()=>{\r\n                    this.playIdle();\r\n                });\r\n            });\r\n        };\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.add(this.gameplayContainer);\r\n\r\n            this.gameplay.reset();\r\n\r\n            this.prepareRound();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, ()=>{\r\n                this.onNewRound(true);\r\n            });\r\n\r\n            this.createTallies();\r\n        }\r\n\r\n        public prepareRound():void {\r\n            this.gameplayContainer.removeAll();\r\n\r\n            this.character = this.scene.add.sprite(0, 0, null);\r\n            this.character.setPosition(750, 310);\r\n            this.playIdle();\r\n\r\n            let randomizedLetter:string[] = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\r\n\r\n            if (this.gameplay.useImages) {\r\n                let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            } else {\r\n                let correctWord:Phaser.GameObjects.Text = this.scene.add.text(750, 180, \"\", {\r\n                    \"fontFamily\": \"Quran Era font\",\r\n                    \"fontSize\": 90 as any,\r\n                    \"color\": \"#000000\",\r\n                    \"align\": 'center'\r\n                });\r\n                correctWord.setOrigin(0.5, 0.5);\r\n                correctWord.style.fixedHeight = 140;\r\n                correctWord.setText(this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            }\r\n\r\n\r\n            this.selectableLetters = [];\r\n            this.targetBlocks = [];\r\n            for (let i:number = 0; i < this.gameplay.correctWord.length; i++) {\r\n                let b = {\r\n                    x:174 + i * 133, y:215\r\n                };\r\n                b['alreadyFilled'] = false;\r\n                this.targetBlocks.push(b);\r\n                b[\"-letter-text\"] = this.gameplay.correctWord.charAt(this.gameplay.correctWord.length-1-i);\r\n                b[\"-block-\"] = null;\r\n            }\r\n            for (let i:number = 0; i < randomizedLetter.length; i++) {\r\n                let a:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\r\n                a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0,'IceBlock'));\r\n                a[\"-image-\"].setOrigin(0.5, 0.5);\r\n                this.selectableLetters.push(a);\r\n\r\n                let txt:Phaser.GameObjects.Text | Phaser.GameObjects.Image;\r\n                if (this.gameplay.useImages) {\r\n                    txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\r\n                    a.add(txt);\r\n                } else {\r\n                    txt = this.scene.add.text(0, 0, \"\", {\r\n                        \"fontFamily\": \"Quran Era font\",\r\n                        \"fontSize\": 55 as any,\r\n                        \"color\": \"#000000\",\r\n                        \"align\": 'center'\r\n                    });\r\n                    txt.setOrigin(0.5, 0.5);\r\n                    txt.style.fixedHeight = 75;\r\n                    txt.setText(randomizedLetter[i]);\r\n                    a.add(txt);\r\n                }\r\n                a['startPosition'] = {x:a.x, y:a.y};\r\n\r\n                a[\"-letter-\"] = txt;\r\n                a[\"-letter-text\"] = randomizedLetter[i];\r\n                this.gameplayContainer.add(a);\r\n                a['-draggable-'] = true;\r\n            }\r\n\r\n            for (let a of this.selectableLetters) {\r\n                a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\r\n                a.setInteractive(/*{cursor: 'pointer', pixelPerfect:true}*/);\r\n                this.scene.input.setDraggable(a);\r\n\r\n                a.on('pointerdown', () => {\r\n                    a['-pointerdown-'] = true;\r\n                });\r\n                a.on('pointerup', () => {\r\n                    a['-pointerdown-'] = false;\r\n                    if (!a['-draggable-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null);\r\n                });\r\n                a.on('pointerout', () => {\r\n                    if (!a['-draggable-']) return;\r\n                    if (!a['-pointerdown-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null);\r\n                });\r\n            }\r\n\r\n            this.createInput();\r\n            this.setInputEnabled(false);\r\n\r\n            // delayedCall(1200, ()=>{\r\n\r\n            if (this.gameplay.isNewRound()) {\r\n                if (!this.gameplay.isRoundsComplete()) {\r\n                    // delayedCall(2000, ()=>{\r\n                    this.setInputEnabled(true);\r\n                    // });\r\n                }\r\n            } else {\r\n                this.setInputEnabled(true);\r\n            }\r\n            // });\r\n\r\n            this.gameplayContainer.add(this.character);\r\n        }\r\n\r\n        public _update() {\r\n            if (this.selectableLetters) {\r\n                for (let a of this.selectableLetters) {\r\n                    if (a.x < 0 + a[\"-image-\"].width/2) {\r\n                        a.x = 0 + a[\"-image-\"].width/2;\r\n                    } else if (a.x > game.scale.width - a[\"-image-\"].width/2) {\r\n                        a.x = game.scale.width - a[\"-image-\"].width/2;\r\n                    }\r\n                    if (a.y < 0 + a[\"-image-\"].height/2) {\r\n                        a.y = a[\"-image-\"].height/2;\r\n                    } else if (a.y > game.scale.height - a[\"-image-\"].height/2) {\r\n                        a.y = game.scale.height - a[\"-image-\"].height/2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public placeAppleOverBuckets(a):void {\r\n            if (!a.parentContainer) return;\r\n            this.gameplayContainer.remove(a);\r\n            this.gameplayContainer.addAt(a, this.gameplayContainer.length);\r\n        }\r\n\r\n        private onNewRound(showOut:boolean):void {\r\n            this.scene.sound.add(\"next_round\").play();\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            if (showOut) {\r\n                this.prepareRound();\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\r\n                if (!block['-draggable-']) return;\r\n\r\n                block.x = dragX;\r\n                block.y = dragY;\r\n                this.gameplayContainer.bringToTop(block);\r\n\r\n                let targetBlock:any;\r\n                for (targetBlock of this.targetBlocks) {\r\n                    if (targetBlock['alreadyFilled']) continue;\r\n\r\n                    if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\r\n                        block['-draggable-'] = false;\r\n                        block.disableInteractive();\r\n\r\n                        targetBlock['alreadyFilled'] = true;\r\n\r\n                        this.scene.tweens.add({\r\n                            targets: block,\r\n                            x: targetBlock.x,\r\n                            y: targetBlock.y,\r\n                            duration: 300,\r\n                            ease: Phaser.Math.Easing.Back.Out\r\n                        });\r\n\r\n                        targetBlock[\"-block-\"] = block;\r\n\r\n                        this.checkTargetBlockLetters();\r\n\r\n                        this.scene.sound.add(\"drag from its spot\").play();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            this._btnClose.setInteractive({cursor: 'pointer', pixelPerfect:true});\r\n        }\r\n\r\n        private checkTargetBlockLetters():void {\r\n            let sameLettersNum:number = 0;\r\n            for (let targetBlock of this.targetBlocks) {\r\n                if (!targetBlock['-block-']) return;\r\n\r\n                if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\r\n                    sameLettersNum++;\r\n                }\r\n            }\r\n            this.setInputEnabled(false);\r\n            if (sameLettersNum == this.targetBlocks.length) {\r\n                this.onCorrectAnswer();\r\n\r\n                this.scene.sound.add(this.gameplay.correctWord).play();\r\n            } else {\r\n                this.onWrongAnswer();\r\n            }\r\n        }\r\n\r\n        private moveBridgeBackToStartPosition(block, onComplete):void {\r\n            this.scene.tweens.add({\r\n                targets: block,\r\n                x: block['startPosition'].x,\r\n                y: block['startPosition'].y,\r\n                duration: 250,\r\n                ease: Phaser.Math.Easing.Sine.Out,\r\n                onComplete:()=>{\r\n                    if (onComplete) onComplete();\r\n                }\r\n            });\r\n            if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\r\n                delayedCall(100, ()=>{\r\n                    this.scene.sound.add(\"drag from its spot\").play();\r\n                });\r\n\r\n            }\r\n\r\n            this.placeAppleOverBuckets(block);\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = false;\r\n            this.tally[i].visible = true;\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"correct drop\");\r\n            this.soundGooseYes.play();\r\n\r\n            this.scene.tweens.add({\r\n                targets: this.character,\r\n                x: 700,\r\n                duration: 2500,\r\n                ease: Phaser.Math.Easing.Sine.Out\r\n            });\r\n\r\n            Preloader.playAnim('yelling_wrong', this.character, ()=>{\r\n                this.playIdle();\r\n            });\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundWrongDrop = null;\r\n        public onWrongAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tally[i].visible = false;\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\r\n            this.soundWrongDrop.play();\r\n            this.scene.sound.add(\"Goose no\").play();\r\n\r\n            if (this.idleDelayedCall != null) {\r\n                destroyDelayedCall(this.idleDelayedCall);\r\n                this.idleDelayedCall = null;\r\n            }\r\n\r\n            return lost;\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private createTallies(): void {\r\n            if (this.tally) {\r\n                for (let te of this.tallyEmptyArray) {\r\n                    te.visible = false;\r\n                    this.bringToTop(te);\r\n                }\r\n                for (let t of this.tally) {\r\n                    t.visible = false;\r\n                    this.bringToTop(t);\r\n                }\r\n                return;\r\n            }\r\n\r\n            let startX: number = 18;\r\n            let startY: number = 148;\r\n            let dy: number = 34;\r\n            let tallyEmptyArrayPositions = [];\r\n            for (let i = 0; i < 12; i++) {\r\n                tallyEmptyArrayPositions.push({x: startX, y: startY + i * dy});\r\n            }\r\n            this.tallyEmptyArray = [];\r\n            this.tally = [];\r\n\r\n            for (let p of tallyEmptyArrayPositions) {\r\n                let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\r\n                this.tallyEmptyArray.push(_BeehiveEmpty);\r\n                _BeehiveEmpty.visible = false;\r\n\r\n                let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\r\n                this.tally.push(_Beehive);\r\n            }\r\n\r\n            for (let bea of this.tallyEmptyArray) {\r\n                this.add(bea);\r\n            }\r\n            for (let bee of this.tally) {\r\n                this.add(bee);\r\n                bee.visible = false;\r\n            }\r\n        }\r\n\r\n        public hideAllUnusedTallies():void {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            for (let k:number = i + 1; k < this.tallyEmptyArray.length; k++) {\r\n                this.tallyEmptyArray[k].visible = false;\r\n                this.tally[k].visible = false;\r\n            }\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n            this.scene.tweens.pauseAll();\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(2000, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(1500, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let a of this.selectableLetters) a.setInteractive(/*{cursor: 'pointer', pixelPerfect:true}*/);\r\n            } else {\r\n                for (let a of this.selectableLetters) a.disableInteractive();\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            this.scene.sound.stopAll();\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n            this.instrTxt.setWordWrapWidth(500);\r\n            this.instrTxt.setLineSpacing(5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}"]}