{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/screen/TryAgainWindow.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","ctb","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","destroyDelayedCall","ind","indexOf","splice","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","playBtnClickAnim","sc","hasOwnProperty","scaleX","scaleY","tweens","targets","duration","yoyo","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","FIT","core","Gameplay","allLettersNames","currentRound","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onNewRound","nextLetterDelay","failsNumToLose","Number","cache","json","get","useImages","Boolean","onComplete","onLose","totalRoundsNum","score","calculateScore","nextLetter","_this4","fn","thisRound","rounds","shift","blockLetters","correctWord","onLettersPlaced","getCurrentTotalAnswersCountThisRound","letter","_step4","_iterator4","d","setupCallbacks","letters","_step5","_iterator5","_Phaser$Scene","Scene","_super2","setup","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_update","_Phaser$Scene3","_super4","load","_this5","_step6","_iterator6","l","image","_step7","_iterator7","r","_step8","_iterator8","audio","_step9","_iterator9","progressTxt","text","fontFamily","fontSize","color","align","setOrigin","pack","ceil","nextScene","start","animKey","sprite","undefined","mainScene","getScene","anims","exists","data","ANIMS_DATA","frames","generateFrameNames","end","zeroPad","prefix","suffix","frameRate","repeat","currentAnim","off","stop","once","idle","padNum","atlas","yelling_wrong","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this6","_areYouSurePage","Image","setInteractive","_btnSureYes","cursor","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this7","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","starScore","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this8","bgMusic","correctAudio","correctAudioWord","correctAudioWordDelay","idleDelayedCall","playIdle","playAnim","character","soundGooseYes","soundWrongDrop","wfsnd","showCompleteWindow","completeWindow","destroyGameplay","setInputEnabled","show","showLoseWindow","tryAgainWindow","TryAgainWindow","_gameStage","setScale","_btnClose","onCloseClick","_btnSound","onSoundClick","_this9","areYouSureWindow","parentContainer","pause","playCorrectAudio","_this10","loop","gameplayContainer","reset","prepareRound","createTallies","_this11","removeAll","randomizedLetter","Utils","Shuffle","fixedHeight","setText","selectableLetters","targetBlocks","b","x","y","charAt","a","txt","_step10","_iterator10","_loop","setSize","input","setDraggable","moveBridgeBackToStartPosition","createInput","isNewRound","isRoundsComplete","_step11","_iterator11","addAt","showOut","_this12","pointer","block","dragX","dragY","targetBlock","bringToTop","_step12","_iterator12","abs","disableInteractive","checkTargetBlockLetters","pixelPerfect","_step13","sameLettersNum","_iterator13","onCorrectAnswer","onWrongAnswer","_this13","Sine","Distance","Between","placeAppleOverBuckets","_this14","getCurrentTotalAnswersCount","tallyEmptyArray","visible","tally","completed","lost","showAreYouSurePage","_step14","_iterator14","te","_step15","_iterator15","tallyEmptyArrayPositions","_i2","_tallyEmptyArrayPosit","_BeehiveEmpty","_Beehive","_step16","_iterator16","bea","_step17","_iterator17","bee","k","_this15","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this16","pauseAll","pauseSounds","resumeAll","unpauseSounds","enabled","_step18","_iterator18","_step19","_iterator19","stopAll","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this17","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setWordWrapWidth","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this18","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var ctb;\n(function (ctb) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', ctb.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    ctb.App = App;\n})(ctb || (ctb = {}));\nlet game;\nwindow.onload = () => {\n    game = new ctb.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction destroyDelayedCall(dc) {\n    if (dc instanceof Phaser.Time.TimerEvent) {\n        dc.remove(false);\n    }\n    else {\n        clearTimeout(dc);\n    }\n    let ind = delayedCalls.indexOf(dc);\n    if (ind >= 0)\n        delayedCalls.splice(ind, 1);\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction playBtnClickAnim(target) {\n    let sc = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\n    target.scaleX = target.scaleY = sc;\n    let scene = game.scene.getAt(0);\n    scene.tweens.add({\n        targets: target,\n        \"scaleX\": 0.9 * sc,\n        \"scaleY\": 0.9 * sc,\n        duration: 100,\n        yoyo: true\n    });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar ctb;\n(function (ctb) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.allLettersNames = null;\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n                this.onNewRound = null;\n                this.nextLetterDelay = 0;\n                this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\n                this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\n            }\n            setupCallbacks(onComplete, onLose, onNewRound) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n                this.onNewRound = onNewRound;\n            }\n            calculateScore() {\n                return this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLettersPlaced() {\n                this.currentRound++;\n                if (this.currentRound >= this.totalRoundsNum) {\n                    let score = this.calculateScore();\n                    this.onComplete(score, score);\n                    return true;\n                }\n                else {\n                    this.nextLetter();\n                }\n                return false;\n            }\n            nextLetter() {\n                let fn = () => {\n                    let thisRound = this.rounds.shift();\n                    this.blockLetters = thisRound[\"blockLetters\"];\n                    this.correctWord = thisRound[\"correctWord\"];\n                    this.correctAnswersCountThisRound = 0;\n                    this.wrongAnswersCountThisRound = 0;\n                    if (this.onNewRound)\n                        this.onNewRound();\n                };\n                if (this.nextLetterDelay == 0) {\n                    fn();\n                }\n                else {\n                    delayedCall(this.nextLetterDelay, fn);\n                }\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                this.nextLetterDelay = 3500;\n                return this.onLettersPlaced();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                this.nextLetterDelay = 2000;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLettersPlaced();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.currentRound >= this.totalRoundsNum;\n            }\n            getAudioKeyOfChar(letter) {\n                let json = game.cache.json.get('gameplay');\n                let letters = json[\"letters\"];\n                for (let d of letters) {\n                    if (letter == d['letterName']) {\n                        return d['audioKey'];\n                    }\n                }\n                return null;\n            }\n            reset() {\n                this.nextLetterDelay = 0;\n                this.setupCallbacks(null, null, null);\n                let json = game.cache.json.get('gameplay');\n                this.rounds = json[\"rounds\"].slice();\n                this.totalRoundsNum = this.rounds.length;\n                this.letters = json[\"letters\"].slice();\n                this.allLettersNames = [];\n                for (let d of this.letters)\n                    this.allLettersNames.push(d[\"letterName\"]);\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = ctb.core || (ctb.core = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                new FitScaleManager(this.game).setup();\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', ctb.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        var Gameplay = ctb.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n            update() {\n                this.gameplayScreen._update();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n            }\n            create() {\n                let json = game.cache.json.get('gameplay');\n                if (json[\"useImages\"]) {\n                    for (let l of json[\"letters\"]) {\n                        this.load.image(l[\"letterName\"], \"assets/imgs/letters/\" + l[\"letterName\"] + \".png\");\n                    }\n                    for (let r of json[\"rounds\"]) {\n                        this.load.image(r[\"correctWord\"], \"assets/imgs/words/\" + r[\"correctWord\"] + \".png\");\n                    }\n                }\n                for (let l of json[\"letters\"]) {\n                    this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\" + l[\"audioKey\"] + \".mp3\");\n                }\n                for (let r of json[\"rounds\"]) {\n                    this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\" + r[\"correctWord\"] + \".mp3\");\n                }\n                let progressTxt = this.add.text(game.scale.width / 2, game.scale.height / 2, \"\", {\n                    \"fontFamily\": \"Quran Era font\",\n                    \"fontSize\": 25,\n                    \"color\": \"#000000\",\n                    \"align\": 'center'\n                });\n                progressTxt.setOrigin(0.5, 0.5);\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                    progressTxt.text = Math.ceil(value * 100) + \"%\";\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            static playAnim(animKey, sprite, onComplete = null) {\n                let mainScene = game.scene.getScene('ScreenMain');\n                if (!mainScene.anims.exists(animKey)) {\n                    let data = Preloader.ANIMS_DATA[animKey];\n                    mainScene.anims.create({\n                        key: animKey,\n                        frames: mainScene.anims.generateFrameNames(data['atlas'], {\n                            start: data['start'], end: data['end'], zeroPad: data['padNum'],\n                            prefix: data['prefix'], suffix: ''\n                        }),\n                        frameRate: data['frameRate'],\n                        repeat: data['repeat']\n                    });\n                }\n                if (sprite.anims.currentAnim) {\n                    sprite.anims.currentAnim.off('complete');\n                }\n                sprite.anims.stop();\n                sprite.play(animKey);\n                sprite.anims.currentAnim.once('complete', () => {\n                    if (onComplete)\n                        onComplete();\n                });\n                return sprite;\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', ctb.scene.MainScene, true);\n            }\n        }\n        Preloader.ANIMS_DATA = {\n            'idle': {\n                'start': 0,\n                'end': 51,\n                'padNum': 4,\n                'prefix': 'idle',\n                'repeat': 0,\n                'frameRate': 12,\n                'atlas': 'atlas-shake-idle'\n            },\n            'yelling_wrong': {\n                'start': 0,\n                'end': 46,\n                'padNum': 4,\n                'prefix': 'yelling_wrong',\n                'repeat': 0,\n                'frameRate': 12,\n                'atlas': 'atlas-yelling_wrong'\n            }\n        };\n        scene.Preloader = Preloader;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        var Preloader = ctb.scene.Preloader;\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.bgMusic = null;\n                this.correctAudio = null;\n                this.correctAudioWord = null;\n                this.correctAudioWordDelay = null;\n                this.idleDelayedCall = null;\n                this.playIdle = () => {\n                    Preloader.playAnim('idle', this.character, () => {\n                        this.idleDelayedCall = delayedCall(5000, () => {\n                            this.playIdle();\n                        });\n                    });\n                };\n                this.soundGooseYes = null;\n                this.soundWrongDrop = null;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(2000, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"gs\"] = this;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\n                this._gameStage.setOrigin(0.5, 0.5);\n                this._gameStage.setScale(1.02);\n                this._gameStage.setInteractive();\n                this.add(this._gameStage);\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                this._btnClose[\"defScale\"] = this._btnClose.scale;\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.add(this._btnClose);\n                this._btnClose.on('pointerup', () => {\n                    playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                this._btnSound[\"defScale\"] = this._btnSound.scale;\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._btnSound);\n                this._btnSound.on('pointerup', () => {\n                    playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                this.correctAudio = this.scene.sound.add('Make the word map');\n                this.correctAudio.play();\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                    this.correctAudio.pause();\n                }\n                if (this.correctAudioWord)\n                    this.correctAudioWord.stop();\n                if (this.correctAudioWordDelay) {\n                    destroyDelayedCall(this.correctAudioWordDelay);\n                    this.correctAudioWordDelay = null;\n                }\n                this.correctAudioWordDelay = delayedCall(1250, () => {\n                    this.correctAudioWord = this.scene.sound.add(this.gameplay.correctWord);\n                    this.correctAudioWord.play();\n                });\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.add(this.gameplayContainer);\n                this.gameplay.reset();\n                this.prepareRound();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, () => {\n                    this.onNewRound(true);\n                });\n                this.createTallies();\n            }\n            prepareRound() {\n                this.gameplayContainer.removeAll();\n                this.character = this.scene.add.sprite(0, 0, null);\n                this.character.setPosition(750, 310);\n                this.playIdle();\n                let randomizedLetter = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\n                if (this.gameplay.useImages) {\n                    let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                else {\n                    let correctWord = this.scene.add.text(750, 180, \"\", {\n                        \"fontFamily\": \"Quran Era font\",\n                        \"fontSize\": 90,\n                        \"color\": \"#000000\",\n                        \"align\": 'center'\n                    });\n                    correctWord.setOrigin(0.5, 0.5);\n                    correctWord.style.fixedHeight = 140;\n                    correctWord.setText(this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                this.selectableLetters = [];\n                this.targetBlocks = [];\n                for (let i = 0; i < this.gameplay.correctWord.length; i++) {\n                    let b = {\n                        x: 174 + i * 133, y: 215\n                    };\n                    b['alreadyFilled'] = false;\n                    this.targetBlocks.push(b);\n                    b[\"-letter-text\"] = this.gameplay.correctWord.charAt(this.gameplay.correctWord.length - 1 - i);\n                    b[\"-block-\"] = null;\n                }\n                for (let i = 0; i < randomizedLetter.length; i++) {\n                    let a = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\n                    a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'IceBlock'));\n                    a[\"-image-\"].setOrigin(0.5, 0.5);\n                    this.selectableLetters.push(a);\n                    let txt;\n                    if (this.gameplay.useImages) {\n                        txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    else {\n                        txt = this.scene.add.text(0, 0, \"\", {\n                            \"fontFamily\": \"Quran Era font\",\n                            \"fontSize\": 55,\n                            \"color\": \"#000000\",\n                            \"align\": 'center'\n                        });\n                        txt.setOrigin(0.5, 0.5);\n                        txt.style.fixedHeight = 75;\n                        txt.setText(randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    a['startPosition'] = { x: a.x, y: a.y };\n                    a[\"-letter-\"] = txt;\n                    a[\"-letter-text\"] = randomizedLetter[i];\n                    this.gameplayContainer.add(a);\n                    a['-draggable-'] = true;\n                }\n                for (let a of this.selectableLetters) {\n                    a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\n                    a.setInteractive( /*{cursor: 'pointer', pixelPerfect:true}*/);\n                    this.scene.input.setDraggable(a);\n                    a.on('pointerdown', () => {\n                        a['-pointerdown-'] = true;\n                    });\n                    a.on('pointerup', () => {\n                        a['-pointerdown-'] = false;\n                        if (!a['-draggable-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null);\n                    });\n                    a.on('pointerout', () => {\n                        if (!a['-draggable-'])\n                            return;\n                        if (!a['-pointerdown-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null);\n                    });\n                }\n                this.createInput();\n                this.setInputEnabled(false);\n                // delayedCall(1200, ()=>{\n                if (this.gameplay.isNewRound()) {\n                    if (!this.gameplay.isRoundsComplete()) {\n                        // delayedCall(2000, ()=>{\n                        this.setInputEnabled(true);\n                        // });\n                    }\n                }\n                else {\n                    this.setInputEnabled(true);\n                }\n                // });\n                this.gameplayContainer.add(this.character);\n            }\n            _update() {\n                if (this.selectableLetters) {\n                    for (let a of this.selectableLetters) {\n                        if (a.x < 0 + a[\"-image-\"].width / 2) {\n                            a.x = 0 + a[\"-image-\"].width / 2;\n                        }\n                        else if (a.x > game.scale.width - a[\"-image-\"].width / 2) {\n                            a.x = game.scale.width - a[\"-image-\"].width / 2;\n                        }\n                        if (a.y < 0 + a[\"-image-\"].height / 2) {\n                            a.y = a[\"-image-\"].height / 2;\n                        }\n                        else if (a.y > game.scale.height - a[\"-image-\"].height / 2) {\n                            a.y = game.scale.height - a[\"-image-\"].height / 2;\n                        }\n                    }\n                }\n            }\n            placeAppleOverBuckets(a) {\n                if (!a.parentContainer)\n                    return;\n                this.gameplayContainer.remove(a);\n                this.gameplayContainer.addAt(a, this.gameplayContainer.length);\n            }\n            onNewRound(showOut) {\n                this.scene.sound.add(\"next_round\").play();\n                this.setInputEnabled(false);\n                if (showOut) {\n                    this.prepareRound();\n                }\n            }\n            createInput() {\n                this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\n                    if (!block['-draggable-'])\n                        return;\n                    block.x = dragX;\n                    block.y = dragY;\n                    this.gameplayContainer.bringToTop(block);\n                    let targetBlock;\n                    for (targetBlock of this.targetBlocks) {\n                        if (targetBlock['alreadyFilled'])\n                            continue;\n                        if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\n                            block['-draggable-'] = false;\n                            block.disableInteractive();\n                            targetBlock['alreadyFilled'] = true;\n                            this.scene.tweens.add({\n                                targets: block,\n                                x: targetBlock.x,\n                                y: targetBlock.y,\n                                duration: 300,\n                                ease: Phaser.Math.Easing.Back.Out\n                            });\n                            targetBlock[\"-block-\"] = block;\n                            this.checkTargetBlockLetters();\n                            this.scene.sound.add(\"drag from its spot\").play();\n                        }\n                    }\n                });\n                this._btnClose.setInteractive({ cursor: 'pointer', pixelPerfect: true });\n            }\n            checkTargetBlockLetters() {\n                let sameLettersNum = 0;\n                for (let targetBlock of this.targetBlocks) {\n                    if (!targetBlock['-block-'])\n                        return;\n                    if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\n                        sameLettersNum++;\n                    }\n                }\n                this.setInputEnabled(false);\n                if (sameLettersNum == this.targetBlocks.length) {\n                    this.onCorrectAnswer();\n                    this.scene.sound.add(this.gameplay.correctWord).play();\n                }\n                else {\n                    this.onWrongAnswer();\n                }\n            }\n            moveBridgeBackToStartPosition(block, onComplete) {\n                this.scene.tweens.add({\n                    targets: block,\n                    x: block['startPosition'].x,\n                    y: block['startPosition'].y,\n                    duration: 250,\n                    ease: Phaser.Math.Easing.Sine.Out,\n                    onComplete: () => {\n                        if (onComplete)\n                            onComplete();\n                    }\n                });\n                if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\n                    delayedCall(100, () => {\n                        this.scene.sound.add(\"drag from its spot\").play();\n                    });\n                }\n                this.placeAppleOverBuckets(block);\n            }\n            onCorrectAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = false;\n                this.tally[i].visible = true;\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"correct drop\");\n                this.soundGooseYes.play();\n                this.scene.tweens.add({\n                    targets: this.character,\n                    x: 700,\n                    duration: 2500,\n                    ease: Phaser.Math.Easing.Sine.Out\n                });\n                Preloader.playAnim('yelling_wrong', this.character, () => {\n                    this.playIdle();\n                });\n                return completed;\n            }\n            onWrongAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = true;\n                this.tallyEmptyArray[i].visible = true;\n                this.tally[i].visible = false;\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\n                this.soundWrongDrop.play();\n                this.scene.sound.add(\"Goose no\").play();\n                if (this.idleDelayedCall != null) {\n                    destroyDelayedCall(this.idleDelayedCall);\n                    this.idleDelayedCall = null;\n                }\n                return lost;\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            createTallies() {\n                if (this.tally) {\n                    for (let te of this.tallyEmptyArray) {\n                        te.visible = false;\n                        this.bringToTop(te);\n                    }\n                    for (let t of this.tally) {\n                        t.visible = false;\n                        this.bringToTop(t);\n                    }\n                    return;\n                }\n                let startX = 18;\n                let startY = 148;\n                let dy = 34;\n                let tallyEmptyArrayPositions = [];\n                for (let i = 0; i < 12; i++) {\n                    tallyEmptyArrayPositions.push({ x: startX, y: startY + i * dy });\n                }\n                this.tallyEmptyArray = [];\n                this.tally = [];\n                for (let p of tallyEmptyArrayPositions) {\n                    let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\n                    this.tallyEmptyArray.push(_BeehiveEmpty);\n                    _BeehiveEmpty.visible = false;\n                    let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\n                    this.tally.push(_Beehive);\n                }\n                for (let bea of this.tallyEmptyArray) {\n                    this.add(bea);\n                }\n                for (let bee of this.tally) {\n                    this.add(bee);\n                    bee.visible = false;\n                }\n            }\n            hideAllUnusedTallies() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                for (let k = i + 1; k < this.tallyEmptyArray.length; k++) {\n                    this.tallyEmptyArray[k].visible = false;\n                    this.tally[k].visible = false;\n                }\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.scene.tweens.pauseAll();\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let a of this.selectableLetters)\n                        a.setInteractive( /*{cursor: 'pointer', pixelPerfect:true}*/);\n                }\n                else {\n                    for (let a of this.selectableLetters)\n                        a.disableInteractive();\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                this.scene.sound.stopAll();\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this.instrTxt.setWordWrapWidth(500);\n                this.instrTxt.setLineSpacing(5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\n","namespace ctb {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', ctb.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: ctb.App;\r\nwindow.onload = () => {\r\n    game = new ctb.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\nfunction destroyDelayedCall(dc) {\r\n    if (dc instanceof Phaser.Time.TimerEvent) {\r\n        (dc as Phaser.Time.TimerEvent).remove(false);\r\n    } else {\r\n        clearTimeout(dc);\r\n    }\r\n    let ind = delayedCalls.indexOf(dc);\r\n    if (ind >= 0) delayedCalls.splice(ind, 1);\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\n\r\n\r\n\r\nfunction playBtnClickAnim(target): void {\r\n    let sc:number = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\r\n    target.scaleX = target.scaleY = sc;\r\n    let scene = game.scene.getAt(0);\r\n    scene.tweens.add({\r\n        targets: target,\r\n        \"scaleX\": 0.9 * sc,\r\n        \"scaleY\": 0.9 * sc,\r\n        duration: 100,\r\n        yoyo: true\r\n    });\r\n}","namespace ctb.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace ctb.core {\r\n    export class Gameplay {\r\n        public allLettersNames:string[] = null;\r\n\r\n        public totalRoundsNum:number;\r\n        public readonly failsNumToLose:number;\r\n\r\n        private currentRound:number = 0;\r\n        private letters:object[];\r\n        private rounds:object[];\r\n        public blockLetters:string[];\r\n        public correctWord:string;\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n        private onNewRound:()=>void = null;\r\n\r\n        public useImages:boolean;\r\n\r\n        constructor() {\r\n            this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\r\n            this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void, onNewRound:()=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n            this.onNewRound = onNewRound;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLettersPlaced():boolean {\r\n            this.currentRound++;\r\n            if (this.currentRound >= this.totalRoundsNum) {\r\n                let score:number = this.calculateScore();\r\n                this.onComplete(score, score);\r\n                return true;\r\n            } else {\r\n                this.nextLetter();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetterDelay:number = 0;\r\n        public nextLetter():void {\r\n            let fn:()=>void = ()=>{\r\n                let thisRound = this.rounds.shift();\r\n                this.blockLetters = thisRound[\"blockLetters\"];\r\n                this.correctWord = thisRound[\"correctWord\"];\r\n\r\n                this.correctAnswersCountThisRound = 0;\r\n                this.wrongAnswersCountThisRound = 0;\r\n\r\n                if (this.onNewRound) this.onNewRound();\r\n            };\r\n            if (this.nextLetterDelay == 0) {\r\n                fn();\r\n            } else {\r\n                delayedCall(this.nextLetterDelay, fn);\r\n            }\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 3500;\r\n\r\n            return this.onLettersPlaced();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 2000;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLettersPlaced();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.currentRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public getAudioKeyOfChar(letter:string):string {\r\n            let json = game.cache.json.get('gameplay');\r\n            let letters = json[\"letters\"];\r\n            for (let d of letters) {\r\n                if (letter == d['letterName']) {\r\n                    return d['audioKey'];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public reset():void {\r\n            this.nextLetterDelay = 0;\r\n            this.setupCallbacks(null, null, null);\r\n\r\n            let json = game.cache.json.get('gameplay');\r\n            this.rounds = json[\"rounds\"].slice();\r\n            this.totalRoundsNum = this.rounds.length;\r\n            this.letters = json[\"letters\"].slice();\r\n            this.allLettersNames = [];\r\n            for (let d of this.letters) this.allLettersNames.push(d[\"letterName\"]);\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            new FitScaleManager(this.game).setup();\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', ctb.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace ctb.scene {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import GameplayScreen = ctb.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n\r\n        public update(): void {\r\n            this.gameplayScreen._update();\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        public static readonly ANIMS_DATA:object = {\r\n            'idle': {\r\n                'start': 0,\r\n                'end': 51,\r\n                'padNum': 4,\r\n                'prefix': 'idle',\r\n                'repeat': 0,\r\n                'frameRate': 12,\r\n                'atlas': 'atlas-shake-idle'\r\n            },\r\n            'yelling_wrong': {\r\n                'start': 0,\r\n                'end': 46,\r\n                'padNum': 4,\r\n                'prefix': 'yelling_wrong',\r\n                'repeat': 0,\r\n                'frameRate': 12,\r\n                'atlas': 'atlas-yelling_wrong'\r\n            }\r\n        };\r\n\r\n        preload() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n        }\r\n\r\n        create() {\r\n            let json = game.cache.json.get('gameplay');\r\n            if (json[\"useImages\"]) {\r\n                for (let l of json[\"letters\"]) {\r\n                    this.load.image(l[\"letterName\"], \"assets/imgs/letters/\"+l[\"letterName\"]+\".png\");\r\n                }\r\n                for (let r of json[\"rounds\"]) {\r\n                    this.load.image(r[\"correctWord\"], \"assets/imgs/words/\"+r[\"correctWord\"]+\".png\");\r\n                }\r\n            }\r\n            for (let l of json[\"letters\"]) {\r\n                this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\"+l[\"audioKey\"]+\".mp3\");\r\n            }\r\n            for (let r of json[\"rounds\"]) {\r\n                this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\"+r[\"correctWord\"]+\".mp3\");\r\n            }\r\n\r\n            let progressTxt:Phaser.GameObjects.Text = this.add.text(game.scale.width/2, game.scale.height/2, \"\", {\r\n                \"fontFamily\": \"Quran Era font\",\r\n                \"fontSize\": 25,\r\n                \"color\": \"#000000\",\r\n                \"align\": 'center'\r\n            });\r\n            progressTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n                progressTxt.text = Math.ceil(value * 100) + \"%\";\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        public static playAnim(animKey:string, sprite:Phaser.GameObjects.Sprite, onComplete:()=>void = null):Phaser.GameObjects.Sprite {\r\n            let mainScene = game.scene.getScene('ScreenMain');\r\n            if (!mainScene.anims.exists(animKey)) {\r\n                let data = Preloader.ANIMS_DATA[animKey];\r\n                mainScene.anims.create({\r\n                    key: animKey,\r\n                    frames: mainScene.anims.generateFrameNames(data['atlas'], {\r\n                        start: data['start'], end: data['end'], zeroPad: data['padNum'],\r\n                        prefix: data['prefix'], suffix: ''\r\n                    }),\r\n                    frameRate: data['frameRate'],\r\n                    repeat: data['repeat']\r\n                });\r\n            }\r\n            if (sprite.anims.currentAnim) {\r\n                sprite.anims.currentAnim.off('complete');\r\n            }\r\n            sprite.anims.stop();\r\n            sprite.play(animKey);\r\n            sprite.anims.currentAnim.once('complete', ()=>{\r\n                if (onComplete) onComplete();\r\n            });\r\n            return sprite;\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', ctb.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import Preloader = ctb.scene.Preloader;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        gameplay: Gameplay;\r\n\r\n        _btnSound: Phaser.GameObjects.Image;\r\n\r\n        selectableLetters:Phaser.GameObjects.Container[];\r\n        targetBlocks:object[];\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private character:Phaser.GameObjects.Sprite;\r\n\r\n        tallyEmptyArray: Phaser.GameObjects.Image[];\r\n        tally: Phaser.GameObjects.Image[];\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"gs\"]=this;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\r\n            this._gameStage.setOrigin(0.5, 0.5);\r\n            this._gameStage.setScale(1.02);\r\n            this._gameStage.setInteractive();\r\n            this.add(this._gameStage);\r\n\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            this._btnClose[\"defScale\"] = this._btnClose.scale;\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n            this.add(this._btnClose);\r\n            this._btnClose.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            this._btnSound[\"defScale\"] = this._btnSound.scale;\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this.add(this._btnSound);\r\n            this._btnSound.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n        }\r\n\r\n\r\n        private correctAudio = null;\r\n        private correctAudioWord = null;\r\n        private correctAudioWordDelay = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            this.correctAudio = this.scene.sound.add('Make the word map');\r\n            this.correctAudio.play();\r\n            if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                this.correctAudio.pause();\r\n            }\r\n\r\n            if (this.correctAudioWord) this.correctAudioWord.stop();\r\n            if (this.correctAudioWordDelay) {\r\n                destroyDelayedCall(this.correctAudioWordDelay);\r\n                this.correctAudioWordDelay = null;\r\n            }\r\n            this.correctAudioWordDelay = delayedCall(1250, ()=>{\r\n                this.correctAudioWord = this.scene.sound.add(this.gameplay.correctWord);\r\n                this.correctAudioWord.play();\r\n            });\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        private idleDelayedCall = null;\r\n        private playIdle:()=>void = ()=>{\r\n            Preloader.playAnim('idle', this.character, ()=>{\r\n                this.idleDelayedCall = delayedCall(5000, ()=>{\r\n                    this.playIdle();\r\n                });\r\n            });\r\n        };\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.add(this.gameplayContainer);\r\n\r\n            this.gameplay.reset();\r\n\r\n            this.prepareRound();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, ()=>{\r\n                this.onNewRound(true);\r\n            });\r\n\r\n            this.createTallies();\r\n        }\r\n\r\n        public prepareRound():void {\r\n            this.gameplayContainer.removeAll();\r\n\r\n            this.character = this.scene.add.sprite(0, 0, null);\r\n            this.character.setPosition(750, 310);\r\n            this.playIdle();\r\n\r\n            let randomizedLetter:string[] = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\r\n\r\n            if (this.gameplay.useImages) {\r\n                let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            } else {\r\n                let correctWord:Phaser.GameObjects.Text = this.scene.add.text(750, 180, \"\", {\r\n                    \"fontFamily\": \"Quran Era font\",\r\n                    \"fontSize\": 90 as any,\r\n                    \"color\": \"#000000\",\r\n                    \"align\": 'center'\r\n                });\r\n                correctWord.setOrigin(0.5, 0.5);\r\n                correctWord.style.fixedHeight = 140;\r\n                correctWord.setText(this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            }\r\n\r\n\r\n            this.selectableLetters = [];\r\n            this.targetBlocks = [];\r\n            for (let i:number = 0; i < this.gameplay.correctWord.length; i++) {\r\n                let b = {\r\n                    x:174 + i * 133, y:215\r\n                };\r\n                b['alreadyFilled'] = false;\r\n                this.targetBlocks.push(b);\r\n                b[\"-letter-text\"] = this.gameplay.correctWord.charAt(this.gameplay.correctWord.length-1-i);\r\n                b[\"-block-\"] = null;\r\n            }\r\n            for (let i:number = 0; i < randomizedLetter.length; i++) {\r\n                let a:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\r\n                a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0,'IceBlock'));\r\n                a[\"-image-\"].setOrigin(0.5, 0.5);\r\n                this.selectableLetters.push(a);\r\n\r\n                let txt:Phaser.GameObjects.Text | Phaser.GameObjects.Image;\r\n                if (this.gameplay.useImages) {\r\n                    txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\r\n                    a.add(txt);\r\n                } else {\r\n                    txt = this.scene.add.text(0, 0, \"\", {\r\n                        \"fontFamily\": \"Quran Era font\",\r\n                        \"fontSize\": 55 as any,\r\n                        \"color\": \"#000000\",\r\n                        \"align\": 'center'\r\n                    });\r\n                    txt.setOrigin(0.5, 0.5);\r\n                    txt.style.fixedHeight = 75;\r\n                    txt.setText(randomizedLetter[i]);\r\n                    a.add(txt);\r\n                }\r\n                a['startPosition'] = {x:a.x, y:a.y};\r\n\r\n                a[\"-letter-\"] = txt;\r\n                a[\"-letter-text\"] = randomizedLetter[i];\r\n                this.gameplayContainer.add(a);\r\n                a['-draggable-'] = true;\r\n            }\r\n\r\n            for (let a of this.selectableLetters) {\r\n                a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\r\n                a.setInteractive(/*{cursor: 'pointer', pixelPerfect:true}*/);\r\n                this.scene.input.setDraggable(a);\r\n\r\n                a.on('pointerdown', () => {\r\n                    a['-pointerdown-'] = true;\r\n                });\r\n                a.on('pointerup', () => {\r\n                    a['-pointerdown-'] = false;\r\n                    if (!a['-draggable-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null);\r\n                });\r\n                a.on('pointerout', () => {\r\n                    if (!a['-draggable-']) return;\r\n                    if (!a['-pointerdown-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null);\r\n                });\r\n            }\r\n\r\n            this.createInput();\r\n            this.setInputEnabled(false);\r\n\r\n            // delayedCall(1200, ()=>{\r\n\r\n            if (this.gameplay.isNewRound()) {\r\n                if (!this.gameplay.isRoundsComplete()) {\r\n                    // delayedCall(2000, ()=>{\r\n                    this.setInputEnabled(true);\r\n                    // });\r\n                }\r\n            } else {\r\n                this.setInputEnabled(true);\r\n            }\r\n            // });\r\n\r\n            this.gameplayContainer.add(this.character);\r\n        }\r\n\r\n        public _update() {\r\n            if (this.selectableLetters) {\r\n                for (let a of this.selectableLetters) {\r\n                    if (a.x < 0 + a[\"-image-\"].width/2) {\r\n                        a.x = 0 + a[\"-image-\"].width/2;\r\n                    } else if (a.x > game.scale.width - a[\"-image-\"].width/2) {\r\n                        a.x = game.scale.width - a[\"-image-\"].width/2;\r\n                    }\r\n                    if (a.y < 0 + a[\"-image-\"].height/2) {\r\n                        a.y = a[\"-image-\"].height/2;\r\n                    } else if (a.y > game.scale.height - a[\"-image-\"].height/2) {\r\n                        a.y = game.scale.height - a[\"-image-\"].height/2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public placeAppleOverBuckets(a):void {\r\n            if (!a.parentContainer) return;\r\n            this.gameplayContainer.remove(a);\r\n            this.gameplayContainer.addAt(a, this.gameplayContainer.length);\r\n        }\r\n\r\n        private onNewRound(showOut:boolean):void {\r\n            this.scene.sound.add(\"next_round\").play();\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            if (showOut) {\r\n                this.prepareRound();\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\r\n                if (!block['-draggable-']) return;\r\n\r\n                block.x = dragX;\r\n                block.y = dragY;\r\n                this.gameplayContainer.bringToTop(block);\r\n\r\n                let targetBlock:any;\r\n                for (targetBlock of this.targetBlocks) {\r\n                    if (targetBlock['alreadyFilled']) continue;\r\n\r\n                    if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\r\n                        block['-draggable-'] = false;\r\n                        block.disableInteractive();\r\n\r\n                        targetBlock['alreadyFilled'] = true;\r\n\r\n                        this.scene.tweens.add({\r\n                            targets: block,\r\n                            x: targetBlock.x,\r\n                            y: targetBlock.y,\r\n                            duration: 300,\r\n                            ease: Phaser.Math.Easing.Back.Out\r\n                        });\r\n\r\n                        targetBlock[\"-block-\"] = block;\r\n\r\n                        this.checkTargetBlockLetters();\r\n\r\n                        this.scene.sound.add(\"drag from its spot\").play();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            this._btnClose.setInteractive({cursor: 'pointer', pixelPerfect:true});\r\n        }\r\n\r\n        private checkTargetBlockLetters():void {\r\n            let sameLettersNum:number = 0;\r\n            for (let targetBlock of this.targetBlocks) {\r\n                if (!targetBlock['-block-']) return;\r\n\r\n                if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\r\n                    sameLettersNum++;\r\n                }\r\n            }\r\n            this.setInputEnabled(false);\r\n            if (sameLettersNum == this.targetBlocks.length) {\r\n                this.onCorrectAnswer();\r\n\r\n                this.scene.sound.add(this.gameplay.correctWord).play();\r\n            } else {\r\n                this.onWrongAnswer();\r\n            }\r\n        }\r\n\r\n        private moveBridgeBackToStartPosition(block, onComplete):void {\r\n            this.scene.tweens.add({\r\n                targets: block,\r\n                x: block['startPosition'].x,\r\n                y: block['startPosition'].y,\r\n                duration: 250,\r\n                ease: Phaser.Math.Easing.Sine.Out,\r\n                onComplete:()=>{\r\n                    if (onComplete) onComplete();\r\n                }\r\n            });\r\n            if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\r\n                delayedCall(100, ()=>{\r\n                    this.scene.sound.add(\"drag from its spot\").play();\r\n                });\r\n\r\n            }\r\n\r\n            this.placeAppleOverBuckets(block);\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = false;\r\n            this.tally[i].visible = true;\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"correct drop\");\r\n            this.soundGooseYes.play();\r\n\r\n            this.scene.tweens.add({\r\n                targets: this.character,\r\n                x: 700,\r\n                duration: 2500,\r\n                ease: Phaser.Math.Easing.Sine.Out\r\n            });\r\n\r\n            Preloader.playAnim('yelling_wrong', this.character, ()=>{\r\n                this.playIdle();\r\n            });\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundWrongDrop = null;\r\n        public onWrongAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tally[i].visible = false;\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\r\n            this.soundWrongDrop.play();\r\n            this.scene.sound.add(\"Goose no\").play();\r\n\r\n            if (this.idleDelayedCall != null) {\r\n                destroyDelayedCall(this.idleDelayedCall);\r\n                this.idleDelayedCall = null;\r\n            }\r\n\r\n            return lost;\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private createTallies(): void {\r\n            if (this.tally) {\r\n                for (let te of this.tallyEmptyArray) {\r\n                    te.visible = false;\r\n                    this.bringToTop(te);\r\n                }\r\n                for (let t of this.tally) {\r\n                    t.visible = false;\r\n                    this.bringToTop(t);\r\n                }\r\n                return;\r\n            }\r\n\r\n            let startX: number = 18;\r\n            let startY: number = 148;\r\n            let dy: number = 34;\r\n            let tallyEmptyArrayPositions = [];\r\n            for (let i = 0; i < 12; i++) {\r\n                tallyEmptyArrayPositions.push({x: startX, y: startY + i * dy});\r\n            }\r\n            this.tallyEmptyArray = [];\r\n            this.tally = [];\r\n\r\n            for (let p of tallyEmptyArrayPositions) {\r\n                let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\r\n                this.tallyEmptyArray.push(_BeehiveEmpty);\r\n                _BeehiveEmpty.visible = false;\r\n\r\n                let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\r\n                this.tally.push(_Beehive);\r\n            }\r\n\r\n            for (let bea of this.tallyEmptyArray) {\r\n                this.add(bea);\r\n            }\r\n            for (let bee of this.tally) {\r\n                this.add(bee);\r\n                bee.visible = false;\r\n            }\r\n        }\r\n\r\n        public hideAllUnusedTallies():void {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            for (let k:number = i + 1; k < this.tallyEmptyArray.length; k++) {\r\n                this.tallyEmptyArray[k].visible = false;\r\n                this.tally[k].visible = false;\r\n            }\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n            this.scene.tweens.pauseAll();\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(2000, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(1500, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let a of this.selectableLetters) a.setInteractive(/*{cursor: 'pointer', pixelPerfect:true}*/);\r\n            } else {\r\n                for (let a of this.selectableLetters) a.disableInteractive();\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            this.scene.sound.stopAll();\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n            this.instrTxt.setWordWrapWidth(500);\r\n            this.instrTxt.setLineSpacing(5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}"]}