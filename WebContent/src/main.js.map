{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts","../ts/src/screen/TryAgainWindow.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","ctb","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","parent","dom","createContainer","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","destroyDelayedCall","ind","indexOf","splice","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","playBtnClickAnim","sc","hasOwnProperty","scaleX","scaleY","tweens","targets","duration","yoyo","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","FIT","core","Gameplay","allLettersNames","currentRound","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onNewRound","nextLetterDelay","failsNumToLose","Number","cache","json","get","useImages","Boolean","onComplete","onLose","totalRoundsNum","score","calculateScore","nextLetter","_this4","fn","thisRound","rounds","shift","blockLetters","correctWord","onLettersPlaced","getCurrentTotalAnswersCountThisRound","letter","_step4","_iterator4","d","setupCallbacks","letters","_step5","_iterator5","_Phaser$Scene","Scene","_super2","_this5","offsetLeft","parentElement","displayScale","x","offsetTop","y","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_update","_Phaser$Scene3","_super4","load","_this6","_step6","_iterator6","l","image","_step7","_iterator7","r","_step8","_iterator8","audio","_step9","_iterator9","progressTxt","text","fontFamily","fontSize","color","align","setOrigin","pack","ceil","nextScene","start","animKey","sprite","undefined","mainScene","getScene","anims","exists","data","ANIMS_DATA","frames","generateFrameNames","end","zeroPad","prefix","suffix","frameRate","repeat","currentAnim","off","stop","once","idle","padNum","atlas","yelling_wrong","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this7","_areYouSurePage","Image","setInteractive","_btnSureYes","cursor","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this8","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","starScore","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this9","bgMusic","correctAudio","correctAudioWord","correctAudioWordDelay","idleDelayedCall","playIdle","playAnim","character","soundGooseYes","soundWrongDrop","wfsnd","showCompleteWindow","completeWindow","destroyGameplay","setInputEnabled","show","showLoseWindow","tryAgainWindow","TryAgainWindow","_gameStage","setScale","_btnClose","onCloseClick","_btnSound","onSoundClick","_this10","areYouSureWindow","parentContainer","pause","playCorrectAudio","_this11","loop","gameplayContainer","reset","prepareRound","createTallies","_this12","removeAll","randomizedLetter","Utils","Shuffle","fixedHeight","setText","selectableLetters","targetBlocks","b","charAt","a","txt","_step10","_iterator10","_loop","setSize","input","setDraggable","moveBridgeBackToStartPosition","createInput","isNewRound","isRoundsComplete","_step11","_iterator11","addAt","showOut","_this13","pointer","block","dragX","dragY","targetBlock","bringToTop","_step12","_iterator12","abs","disableInteractive","checkTargetBlockLetters","pixelPerfect","_step13","sameLettersNum","_iterator13","onCorrectAnswer","onWrongAnswer","_this14","Sine","Distance","Between","placeAppleOverBuckets","_this15","getCurrentTotalAnswersCount","tallyEmptyArray","visible","tally","completed","lost","showAreYouSurePage","_step14","_iterator14","te","_step15","_iterator15","tallyEmptyArrayPositions","_i2","_tallyEmptyArrayPosit","_BeehiveEmpty","_Beehive","_step16","_iterator16","bea","_step17","_iterator17","bee","k","_this16","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this17","pauseAll","pauseSounds","resumeAll","unpauseSounds","enabled","_step18","_iterator18","_step19","_iterator19","stopAll","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this18","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setWordWrapWidth","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this19","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var ctb;\n(function (ctb) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                parent: 'game-container',\n                dom: {\n                    createContainer: false\n                },\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', ctb.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    ctb.App = App;\n})(ctb || (ctb = {}));\nlet game;\nwindow.onload = () => {\n    game = new ctb.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction destroyDelayedCall(dc) {\n    if (dc instanceof Phaser.Time.TimerEvent) {\n        dc.remove(false);\n    }\n    else {\n        clearTimeout(dc);\n    }\n    let ind = delayedCalls.indexOf(dc);\n    if (ind >= 0)\n        delayedCalls.splice(ind, 1);\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction playBtnClickAnim(target) {\n    let sc = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\n    target.scaleX = target.scaleY = sc;\n    let scene = game.scene.getAt(0);\n    scene.tweens.add({\n        targets: target,\n        \"scaleX\": 0.9 * sc,\n        \"scaleY\": 0.9 * sc,\n        duration: 100,\n        yoyo: true\n    });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar ctb;\n(function (ctb) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.allLettersNames = null;\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n                this.onNewRound = null;\n                this.nextLetterDelay = 0;\n                this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\n                this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\n            }\n            setupCallbacks(onComplete, onLose, onNewRound) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n                this.onNewRound = onNewRound;\n            }\n            calculateScore() {\n                return this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLettersPlaced() {\n                this.currentRound++;\n                if (this.currentRound >= this.totalRoundsNum) {\n                    let score = this.calculateScore();\n                    this.onComplete(score, score);\n                    return true;\n                }\n                else {\n                    this.nextLetter();\n                }\n                return false;\n            }\n            nextLetter() {\n                let fn = () => {\n                    let thisRound = this.rounds.shift();\n                    this.blockLetters = thisRound[\"blockLetters\"];\n                    this.correctWord = thisRound[\"correctWord\"];\n                    this.correctAnswersCountThisRound = 0;\n                    this.wrongAnswersCountThisRound = 0;\n                    if (this.onNewRound)\n                        this.onNewRound();\n                };\n                if (this.nextLetterDelay == 0) {\n                    fn();\n                }\n                else {\n                    delayedCall(this.nextLetterDelay, fn);\n                }\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                this.nextLetterDelay = 3500;\n                return this.onLettersPlaced();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                this.nextLetterDelay = 2000;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLettersPlaced();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.currentRound >= this.totalRoundsNum;\n            }\n            getAudioKeyOfChar(letter) {\n                let json = game.cache.json.get('gameplay');\n                let letters = json[\"letters\"];\n                for (let d of letters) {\n                    if (letter == d['letterName']) {\n                        return d['audioKey'];\n                    }\n                }\n                return null;\n            }\n            reset() {\n                this.nextLetterDelay = 0;\n                this.setupCallbacks(null, null, null);\n                let json = game.cache.json.get('gameplay');\n                this.rounds = json[\"rounds\"].slice();\n                this.totalRoundsNum = this.rounds.length;\n                this.letters = json[\"letters\"].slice();\n                this.allLettersNames = [];\n                for (let d of this.letters)\n                    this.allLettersNames.push(d[\"letterName\"]);\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = ctb.core || (ctb.core = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                this.game.scale.transformX = (pageX) => {\n                    let offsetLeft = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetLeft) {\n                            offsetLeft = parentElement.offsetLeft;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageX - offsetLeft) * this.game.scale.displayScale.x;\n                };\n                this.game.scale.transformY = (pageY) => {\n                    let offsetTop = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetTop) {\n                            offsetTop = parentElement.offsetTop;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageY - offsetTop) * this.game.scale.displayScale.y;\n                };\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', ctb.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        var Gameplay = ctb.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n            update() {\n                this.gameplayScreen._update();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n            }\n            create() {\n                let json = game.cache.json.get('gameplay');\n                if (json[\"useImages\"]) {\n                    for (let l of json[\"letters\"]) {\n                        this.load.image(l[\"letterName\"], \"assets/imgs/letters/\" + l[\"letterName\"] + \".png\");\n                    }\n                    for (let r of json[\"rounds\"]) {\n                        this.load.image(r[\"correctWord\"], \"assets/imgs/words/\" + r[\"correctWord\"] + \".png\");\n                    }\n                }\n                for (let l of json[\"letters\"]) {\n                    this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\" + l[\"audioKey\"] + \".mp3\");\n                }\n                for (let r of json[\"rounds\"]) {\n                    this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\" + r[\"correctWord\"] + \".mp3\");\n                }\n                let progressTxt = this.add.text(game.scale.width / 2, game.scale.height / 2, \"\", {\n                    \"fontFamily\": \"Quran Era font\",\n                    \"fontSize\": 25,\n                    \"color\": \"#000000\",\n                    \"align\": 'center'\n                });\n                progressTxt.setOrigin(0.5, 0.5);\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                    progressTxt.text = Math.ceil(value * 100) + \"%\";\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            static playAnim(animKey, sprite, onComplete = null) {\n                let mainScene = game.scene.getScene('ScreenMain');\n                if (!mainScene.anims.exists(animKey)) {\n                    let data = Preloader.ANIMS_DATA[animKey];\n                    mainScene.anims.create({\n                        key: animKey,\n                        frames: mainScene.anims.generateFrameNames(data['atlas'], {\n                            start: data['start'], end: data['end'], zeroPad: data['padNum'],\n                            prefix: data['prefix'], suffix: ''\n                        }),\n                        frameRate: data['frameRate'],\n                        repeat: data['repeat']\n                    });\n                }\n                if (sprite.anims.currentAnim) {\n                    sprite.anims.currentAnim.off('complete');\n                }\n                sprite.anims.stop();\n                sprite.play(animKey);\n                sprite.anims.currentAnim.once('complete', () => {\n                    if (onComplete)\n                        onComplete();\n                });\n                return sprite;\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', ctb.scene.MainScene, true);\n            }\n        }\n        Preloader.ANIMS_DATA = {\n            'idle': {\n                'start': 0,\n                'end': 51,\n                'padNum': 4,\n                'prefix': 'idle',\n                'repeat': 0,\n                'frameRate': 12,\n                'atlas': 'atlas-shake-idle'\n            },\n            'yelling_wrong': {\n                'start': 0,\n                'end': 46,\n                'padNum': 4,\n                'prefix': 'yelling_wrong',\n                'repeat': 0,\n                'frameRate': 12,\n                'atlas': 'atlas-yelling_wrong'\n            }\n        };\n        scene.Preloader = Preloader;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        var Preloader = ctb.scene.Preloader;\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.bgMusic = null;\n                this.correctAudio = null;\n                this.correctAudioWord = null;\n                this.correctAudioWordDelay = null;\n                this.idleDelayedCall = null;\n                this.playIdle = () => {\n                    Preloader.playAnim('idle', this.character, () => {\n                        this.idleDelayedCall = delayedCall(5000, () => {\n                            this.playIdle();\n                        });\n                    });\n                };\n                this.soundGooseYes = null;\n                this.soundWrongDrop = null;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(2000, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"gs\"] = this;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\n                this._gameStage.setOrigin(0.5, 0.5);\n                this._gameStage.setScale(1.02);\n                this._gameStage.setInteractive();\n                this.add(this._gameStage);\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                this._btnClose[\"defScale\"] = this._btnClose.scale;\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.add(this._btnClose);\n                this._btnClose.on('pointerup', () => {\n                    playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                this._btnSound[\"defScale\"] = this._btnSound.scale;\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._btnSound);\n                this._btnSound.on('pointerup', () => {\n                    playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                this.correctAudio = this.scene.sound.add('Make the word map');\n                this.correctAudio.play();\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                    this.correctAudio.pause();\n                }\n                if (this.correctAudioWord)\n                    this.correctAudioWord.stop();\n                if (this.correctAudioWordDelay) {\n                    destroyDelayedCall(this.correctAudioWordDelay);\n                    this.correctAudioWordDelay = null;\n                }\n                this.correctAudioWordDelay = delayedCall(1250, () => {\n                    this.correctAudioWord = this.scene.sound.add(this.gameplay.correctWord);\n                    this.correctAudioWord.play();\n                });\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.add(this.gameplayContainer);\n                this.gameplay.reset();\n                this.prepareRound();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, () => {\n                    this.onNewRound(true);\n                });\n                this.createTallies();\n            }\n            prepareRound() {\n                this.gameplayContainer.removeAll();\n                this.character = this.scene.add.sprite(0, 0, null);\n                this.character.setPosition(750, 310);\n                this.playIdle();\n                let randomizedLetter = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\n                if (this.gameplay.useImages) {\n                    let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                else {\n                    let correctWord = this.scene.add.text(750, 180, \"\", {\n                        \"fontFamily\": \"Quran Era font\",\n                        \"fontSize\": 90,\n                        \"color\": \"#000000\",\n                        \"align\": 'center'\n                    });\n                    correctWord.setOrigin(0.5, 0.5);\n                    correctWord.style.fixedHeight = 140;\n                    correctWord.setText(this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                this.selectableLetters = [];\n                this.targetBlocks = [];\n                for (let i = 0; i < this.gameplay.correctWord.length; i++) {\n                    let b = {\n                        x: 174 + i * 133, y: 215\n                    };\n                    b['alreadyFilled'] = false;\n                    this.targetBlocks.push(b);\n                    b[\"-letter-text\"] = this.gameplay.correctWord.charAt(this.gameplay.correctWord.length - 1 - i);\n                    b[\"-block-\"] = null;\n                }\n                for (let i = 0; i < randomizedLetter.length; i++) {\n                    let a = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\n                    a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'IceBlock'));\n                    a[\"-image-\"].setOrigin(0.5, 0.5);\n                    this.selectableLetters.push(a);\n                    let txt;\n                    if (this.gameplay.useImages) {\n                        txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    else {\n                        txt = this.scene.add.text(0, 0, \"\", {\n                            \"fontFamily\": \"Quran Era font\",\n                            \"fontSize\": 55,\n                            \"color\": \"#000000\",\n                            \"align\": 'center'\n                        });\n                        txt.setOrigin(0.5, 0.5);\n                        txt.style.fixedHeight = 75;\n                        txt.setText(randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    a['startPosition'] = { x: a.x, y: a.y };\n                    a[\"-letter-\"] = txt;\n                    a[\"-letter-text\"] = randomizedLetter[i];\n                    this.gameplayContainer.add(a);\n                    a['-draggable-'] = true;\n                }\n                for (let a of this.selectableLetters) {\n                    a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\n                    a.setInteractive( /*{cursor: 'pointer', pixelPerfect:true}*/);\n                    this.scene.input.setDraggable(a);\n                    a.on('pointerdown', () => {\n                        a['-pointerdown-'] = true;\n                    });\n                    a.on('pointerup', () => {\n                        a['-pointerdown-'] = false;\n                        if (!a['-draggable-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null);\n                    });\n                    a.on('pointerout', () => {\n                        if (!a['-draggable-'])\n                            return;\n                        if (!a['-pointerdown-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null);\n                    });\n                }\n                this.createInput();\n                this.setInputEnabled(false);\n                // delayedCall(1200, ()=>{\n                if (this.gameplay.isNewRound()) {\n                    if (!this.gameplay.isRoundsComplete()) {\n                        // delayedCall(2000, ()=>{\n                        this.setInputEnabled(true);\n                        // });\n                    }\n                }\n                else {\n                    this.setInputEnabled(true);\n                }\n                // });\n                this.gameplayContainer.add(this.character);\n            }\n            _update() {\n                if (this.selectableLetters) {\n                    for (let a of this.selectableLetters) {\n                        if (a.x < 0 + a[\"-image-\"].width / 2) {\n                            a.x = 0 + a[\"-image-\"].width / 2;\n                        }\n                        else if (a.x > game.scale.width - a[\"-image-\"].width / 2) {\n                            a.x = game.scale.width - a[\"-image-\"].width / 2;\n                        }\n                        if (a.y < 0 + a[\"-image-\"].height / 2) {\n                            a.y = a[\"-image-\"].height / 2;\n                        }\n                        else if (a.y > game.scale.height - a[\"-image-\"].height / 2) {\n                            a.y = game.scale.height - a[\"-image-\"].height / 2;\n                        }\n                    }\n                }\n            }\n            placeAppleOverBuckets(a) {\n                if (!a.parentContainer)\n                    return;\n                this.gameplayContainer.remove(a);\n                this.gameplayContainer.addAt(a, this.gameplayContainer.length);\n            }\n            onNewRound(showOut) {\n                this.scene.sound.add(\"next_round\").play();\n                this.setInputEnabled(false);\n                if (showOut) {\n                    this.prepareRound();\n                }\n            }\n            createInput() {\n                this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\n                    if (!block['-draggable-'])\n                        return;\n                    block.x = dragX;\n                    block.y = dragY;\n                    this.gameplayContainer.bringToTop(block);\n                    let targetBlock;\n                    for (targetBlock of this.targetBlocks) {\n                        if (targetBlock['alreadyFilled'])\n                            continue;\n                        if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\n                            block['-draggable-'] = false;\n                            block.disableInteractive();\n                            targetBlock['alreadyFilled'] = true;\n                            this.scene.tweens.add({\n                                targets: block,\n                                x: targetBlock.x,\n                                y: targetBlock.y,\n                                duration: 300,\n                                ease: Phaser.Math.Easing.Back.Out\n                            });\n                            targetBlock[\"-block-\"] = block;\n                            this.checkTargetBlockLetters();\n                            this.scene.sound.add(\"drag from its spot\").play();\n                        }\n                    }\n                });\n                this._btnClose.setInteractive({ cursor: 'pointer', pixelPerfect: true });\n            }\n            checkTargetBlockLetters() {\n                let sameLettersNum = 0;\n                for (let targetBlock of this.targetBlocks) {\n                    if (!targetBlock['-block-'])\n                        return;\n                    if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\n                        sameLettersNum++;\n                    }\n                }\n                this.setInputEnabled(false);\n                if (sameLettersNum == this.targetBlocks.length) {\n                    this.onCorrectAnswer();\n                    this.scene.sound.add(this.gameplay.correctWord).play();\n                }\n                else {\n                    this.onWrongAnswer();\n                }\n            }\n            moveBridgeBackToStartPosition(block, onComplete) {\n                this.scene.tweens.add({\n                    targets: block,\n                    x: block['startPosition'].x,\n                    y: block['startPosition'].y,\n                    duration: 250,\n                    ease: Phaser.Math.Easing.Sine.Out,\n                    onComplete: () => {\n                        if (onComplete)\n                            onComplete();\n                    }\n                });\n                if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\n                    delayedCall(100, () => {\n                        this.scene.sound.add(\"drag from its spot\").play();\n                    });\n                }\n                this.placeAppleOverBuckets(block);\n            }\n            onCorrectAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = false;\n                this.tally[i].visible = true;\n                let completed = this.gameplay.onCorrectAnswer();\n                this.soundGooseYes = this.scene.sound.add(\"correct drop\");\n                this.soundGooseYes.play();\n                this.scene.tweens.add({\n                    targets: this.character,\n                    x: 700,\n                    duration: 2500,\n                    ease: Phaser.Math.Easing.Sine.Out\n                });\n                Preloader.playAnim('yelling_wrong', this.character, () => {\n                    this.playIdle();\n                });\n                return completed;\n            }\n            onWrongAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = true;\n                this.tallyEmptyArray[i].visible = true;\n                this.tally[i].visible = false;\n                let lost = this.gameplay.onWrongAnswer();\n                this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\n                this.soundWrongDrop.play();\n                this.scene.sound.add(\"Goose no\").play();\n                if (this.idleDelayedCall != null) {\n                    destroyDelayedCall(this.idleDelayedCall);\n                    this.idleDelayedCall = null;\n                }\n                return lost;\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            createTallies() {\n                if (this.tally) {\n                    for (let te of this.tallyEmptyArray) {\n                        te.visible = false;\n                        this.bringToTop(te);\n                    }\n                    for (let t of this.tally) {\n                        t.visible = false;\n                        this.bringToTop(t);\n                    }\n                    return;\n                }\n                let startX = 18;\n                let startY = 148;\n                let dy = 34;\n                let tallyEmptyArrayPositions = [];\n                for (let i = 0; i < 12; i++) {\n                    tallyEmptyArrayPositions.push({ x: startX, y: startY + i * dy });\n                }\n                this.tallyEmptyArray = [];\n                this.tally = [];\n                for (let p of tallyEmptyArrayPositions) {\n                    let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\n                    this.tallyEmptyArray.push(_BeehiveEmpty);\n                    _BeehiveEmpty.visible = false;\n                    let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\n                    this.tally.push(_Beehive);\n                }\n                for (let bea of this.tallyEmptyArray) {\n                    this.add(bea);\n                }\n                for (let bee of this.tally) {\n                    this.add(bee);\n                    bee.visible = false;\n                }\n            }\n            hideAllUnusedTallies() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                for (let k = i + 1; k < this.tallyEmptyArray.length; k++) {\n                    this.tallyEmptyArray[k].visible = false;\n                    this.tally[k].visible = false;\n                }\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.scene.tweens.pauseAll();\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let a of this.selectableLetters)\n                        a.setInteractive( /*{cursor: 'pointer', pixelPerfect:true}*/);\n                }\n                else {\n                    for (let a of this.selectableLetters)\n                        a.disableInteractive();\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                this.scene.sound.stopAll();\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this.instrTxt.setWordWrapWidth(500);\n                this.instrTxt.setLineSpacing(5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\n","namespace ctb {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                parent: 'game-container',\r\n                dom: {\r\n                    createContainer: false\r\n                },\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', ctb.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: ctb.App;\r\nwindow.onload = () => {\r\n    game = new ctb.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\nfunction destroyDelayedCall(dc) {\r\n    if (dc instanceof Phaser.Time.TimerEvent) {\r\n        (dc as Phaser.Time.TimerEvent).remove(false);\r\n    } else {\r\n        clearTimeout(dc);\r\n    }\r\n    let ind = delayedCalls.indexOf(dc);\r\n    if (ind >= 0) delayedCalls.splice(ind, 1);\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\n\r\n\r\n\r\nfunction playBtnClickAnim(target): void {\r\n    let sc:number = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\r\n    target.scaleX = target.scaleY = sc;\r\n    let scene = game.scene.getAt(0);\r\n    scene.tweens.add({\r\n        targets: target,\r\n        \"scaleX\": 0.9 * sc,\r\n        \"scaleY\": 0.9 * sc,\r\n        duration: 100,\r\n        yoyo: true\r\n    });\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace ctb.core {\r\n    export class Gameplay {\r\n        public allLettersNames:string[] = null;\r\n\r\n        public totalRoundsNum:number;\r\n        public readonly failsNumToLose:number;\r\n\r\n        private currentRound:number = 0;\r\n        private letters:object[];\r\n        private rounds:object[];\r\n        public blockLetters:string[];\r\n        public correctWord:string;\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n        private onNewRound:()=>void = null;\r\n\r\n        public useImages:boolean;\r\n\r\n        constructor() {\r\n            this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\r\n            this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void, onNewRound:()=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n            this.onNewRound = onNewRound;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLettersPlaced():boolean {\r\n            this.currentRound++;\r\n            if (this.currentRound >= this.totalRoundsNum) {\r\n                let score:number = this.calculateScore();\r\n                this.onComplete(score, score);\r\n                return true;\r\n            } else {\r\n                this.nextLetter();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetterDelay:number = 0;\r\n        public nextLetter():void {\r\n            let fn:()=>void = ()=>{\r\n                let thisRound = this.rounds.shift();\r\n                this.blockLetters = thisRound[\"blockLetters\"];\r\n                this.correctWord = thisRound[\"correctWord\"];\r\n\r\n                this.correctAnswersCountThisRound = 0;\r\n                this.wrongAnswersCountThisRound = 0;\r\n\r\n                if (this.onNewRound) this.onNewRound();\r\n            };\r\n            if (this.nextLetterDelay == 0) {\r\n                fn();\r\n            } else {\r\n                delayedCall(this.nextLetterDelay, fn);\r\n            }\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 3500;\r\n\r\n            return this.onLettersPlaced();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 2000;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLettersPlaced();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.currentRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public getAudioKeyOfChar(letter:string):string {\r\n            let json = game.cache.json.get('gameplay');\r\n            let letters = json[\"letters\"];\r\n            for (let d of letters) {\r\n                if (letter == d['letterName']) {\r\n                    return d['audioKey'];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public reset():void {\r\n            this.nextLetterDelay = 0;\r\n            this.setupCallbacks(null, null, null);\r\n\r\n            let json = game.cache.json.get('gameplay');\r\n            this.rounds = json[\"rounds\"].slice();\r\n            this.totalRoundsNum = this.rounds.length;\r\n            this.letters = json[\"letters\"].slice();\r\n            this.allLettersNames = [];\r\n            for (let d of this.letters) this.allLettersNames.push(d[\"letterName\"]);\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            this.game.scale.transformX = (pageX: number) => {\r\n                let offsetLeft: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetLeft) {\r\n                        offsetLeft = parentElement.offsetLeft;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageX - offsetLeft) * this.game.scale.displayScale.x;\r\n            };\r\n            this.game.scale.transformY = (pageY: number) => {\r\n                let offsetTop: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetTop) {\r\n                        offsetTop = parentElement.offsetTop;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageY - offsetTop) * this.game.scale.displayScale.y;\r\n            };\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', ctb.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace ctb.scene {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import GameplayScreen = ctb.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n\r\n        public update(): void {\r\n            this.gameplayScreen._update();\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        public static readonly ANIMS_DATA:object = {\r\n            'idle': {\r\n                'start': 0,\r\n                'end': 51,\r\n                'padNum': 4,\r\n                'prefix': 'idle',\r\n                'repeat': 0,\r\n                'frameRate': 12,\r\n                'atlas': 'atlas-shake-idle'\r\n            },\r\n            'yelling_wrong': {\r\n                'start': 0,\r\n                'end': 46,\r\n                'padNum': 4,\r\n                'prefix': 'yelling_wrong',\r\n                'repeat': 0,\r\n                'frameRate': 12,\r\n                'atlas': 'atlas-yelling_wrong'\r\n            }\r\n        };\r\n\r\n        preload() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n        }\r\n\r\n        create() {\r\n            let json = game.cache.json.get('gameplay');\r\n            if (json[\"useImages\"]) {\r\n                for (let l of json[\"letters\"]) {\r\n                    this.load.image(l[\"letterName\"], \"assets/imgs/letters/\"+l[\"letterName\"]+\".png\");\r\n                }\r\n                for (let r of json[\"rounds\"]) {\r\n                    this.load.image(r[\"correctWord\"], \"assets/imgs/words/\"+r[\"correctWord\"]+\".png\");\r\n                }\r\n            }\r\n            for (let l of json[\"letters\"]) {\r\n                this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\"+l[\"audioKey\"]+\".mp3\");\r\n            }\r\n            for (let r of json[\"rounds\"]) {\r\n                this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\"+r[\"correctWord\"]+\".mp3\");\r\n            }\r\n\r\n            let progressTxt:Phaser.GameObjects.Text = this.add.text(game.scale.width/2, game.scale.height/2, \"\", {\r\n                \"fontFamily\": \"Quran Era font\",\r\n                \"fontSize\": 25,\r\n                \"color\": \"#000000\",\r\n                \"align\": 'center'\r\n            });\r\n            progressTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n                progressTxt.text = Math.ceil(value * 100) + \"%\";\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        public static playAnim(animKey:string, sprite:Phaser.GameObjects.Sprite, onComplete:()=>void = null):Phaser.GameObjects.Sprite {\r\n            let mainScene = game.scene.getScene('ScreenMain');\r\n            if (!mainScene.anims.exists(animKey)) {\r\n                let data = Preloader.ANIMS_DATA[animKey];\r\n                mainScene.anims.create({\r\n                    key: animKey,\r\n                    frames: mainScene.anims.generateFrameNames(data['atlas'], {\r\n                        start: data['start'], end: data['end'], zeroPad: data['padNum'],\r\n                        prefix: data['prefix'], suffix: ''\r\n                    }),\r\n                    frameRate: data['frameRate'],\r\n                    repeat: data['repeat']\r\n                });\r\n            }\r\n            if (sprite.anims.currentAnim) {\r\n                sprite.anims.currentAnim.off('complete');\r\n            }\r\n            sprite.anims.stop();\r\n            sprite.play(animKey);\r\n            sprite.anims.currentAnim.once('complete', ()=>{\r\n                if (onComplete) onComplete();\r\n            });\r\n            return sprite;\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', ctb.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import Preloader = ctb.scene.Preloader;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        gameplay: Gameplay;\r\n\r\n        _btnSound: Phaser.GameObjects.Image;\r\n\r\n        selectableLetters:Phaser.GameObjects.Container[];\r\n        targetBlocks:object[];\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private character:Phaser.GameObjects.Sprite;\r\n\r\n        tallyEmptyArray: Phaser.GameObjects.Image[];\r\n        tally: Phaser.GameObjects.Image[];\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"gs\"]=this;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\r\n            this._gameStage.setOrigin(0.5, 0.5);\r\n            this._gameStage.setScale(1.02);\r\n            this._gameStage.setInteractive();\r\n            this.add(this._gameStage);\r\n\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            this._btnClose[\"defScale\"] = this._btnClose.scale;\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n            this.add(this._btnClose);\r\n            this._btnClose.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            this._btnSound[\"defScale\"] = this._btnSound.scale;\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this.add(this._btnSound);\r\n            this._btnSound.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n        }\r\n\r\n\r\n        private correctAudio = null;\r\n        private correctAudioWord = null;\r\n        private correctAudioWordDelay = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            this.correctAudio = this.scene.sound.add('Make the word map');\r\n            this.correctAudio.play();\r\n            if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                this.correctAudio.pause();\r\n            }\r\n\r\n            if (this.correctAudioWord) this.correctAudioWord.stop();\r\n            if (this.correctAudioWordDelay) {\r\n                destroyDelayedCall(this.correctAudioWordDelay);\r\n                this.correctAudioWordDelay = null;\r\n            }\r\n            this.correctAudioWordDelay = delayedCall(1250, ()=>{\r\n                this.correctAudioWord = this.scene.sound.add(this.gameplay.correctWord);\r\n                this.correctAudioWord.play();\r\n            });\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        private idleDelayedCall = null;\r\n        private playIdle:()=>void = ()=>{\r\n            Preloader.playAnim('idle', this.character, ()=>{\r\n                this.idleDelayedCall = delayedCall(5000, ()=>{\r\n                    this.playIdle();\r\n                });\r\n            });\r\n        };\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"Bachground ambience\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.add(this.gameplayContainer);\r\n\r\n            this.gameplay.reset();\r\n\r\n            this.prepareRound();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, ()=>{\r\n                this.onNewRound(true);\r\n            });\r\n\r\n            this.createTallies();\r\n        }\r\n\r\n        public prepareRound():void {\r\n            this.gameplayContainer.removeAll();\r\n\r\n            this.character = this.scene.add.sprite(0, 0, null);\r\n            this.character.setPosition(750, 310);\r\n            this.playIdle();\r\n\r\n            let randomizedLetter:string[] = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\r\n\r\n            if (this.gameplay.useImages) {\r\n                let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            } else {\r\n                let correctWord:Phaser.GameObjects.Text = this.scene.add.text(750, 180, \"\", {\r\n                    \"fontFamily\": \"Quran Era font\",\r\n                    \"fontSize\": 90 as any,\r\n                    \"color\": \"#000000\",\r\n                    \"align\": 'center'\r\n                });\r\n                correctWord.setOrigin(0.5, 0.5);\r\n                correctWord.style.fixedHeight = 140;\r\n                correctWord.setText(this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            }\r\n\r\n\r\n            this.selectableLetters = [];\r\n            this.targetBlocks = [];\r\n            for (let i:number = 0; i < this.gameplay.correctWord.length; i++) {\r\n                let b = {\r\n                    x:174 + i * 133, y:215\r\n                };\r\n                b['alreadyFilled'] = false;\r\n                this.targetBlocks.push(b);\r\n                b[\"-letter-text\"] = this.gameplay.correctWord.charAt(this.gameplay.correctWord.length-1-i);\r\n                b[\"-block-\"] = null;\r\n            }\r\n            for (let i:number = 0; i < randomizedLetter.length; i++) {\r\n                let a:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\r\n                a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0,'IceBlock'));\r\n                a[\"-image-\"].setOrigin(0.5, 0.5);\r\n                this.selectableLetters.push(a);\r\n\r\n                let txt:Phaser.GameObjects.Text | Phaser.GameObjects.Image;\r\n                if (this.gameplay.useImages) {\r\n                    txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\r\n                    a.add(txt);\r\n                } else {\r\n                    txt = this.scene.add.text(0, 0, \"\", {\r\n                        \"fontFamily\": \"Quran Era font\",\r\n                        \"fontSize\": 55 as any,\r\n                        \"color\": \"#000000\",\r\n                        \"align\": 'center'\r\n                    });\r\n                    txt.setOrigin(0.5, 0.5);\r\n                    txt.style.fixedHeight = 75;\r\n                    txt.setText(randomizedLetter[i]);\r\n                    a.add(txt);\r\n                }\r\n                a['startPosition'] = {x:a.x, y:a.y};\r\n\r\n                a[\"-letter-\"] = txt;\r\n                a[\"-letter-text\"] = randomizedLetter[i];\r\n                this.gameplayContainer.add(a);\r\n                a['-draggable-'] = true;\r\n            }\r\n\r\n            for (let a of this.selectableLetters) {\r\n                a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\r\n                a.setInteractive(/*{cursor: 'pointer', pixelPerfect:true}*/);\r\n                this.scene.input.setDraggable(a);\r\n\r\n                a.on('pointerdown', () => {\r\n                    a['-pointerdown-'] = true;\r\n                });\r\n                a.on('pointerup', () => {\r\n                    a['-pointerdown-'] = false;\r\n                    if (!a['-draggable-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null);\r\n                });\r\n                a.on('pointerout', () => {\r\n                    if (!a['-draggable-']) return;\r\n                    if (!a['-pointerdown-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null);\r\n                });\r\n            }\r\n\r\n            this.createInput();\r\n            this.setInputEnabled(false);\r\n\r\n            // delayedCall(1200, ()=>{\r\n\r\n            if (this.gameplay.isNewRound()) {\r\n                if (!this.gameplay.isRoundsComplete()) {\r\n                    // delayedCall(2000, ()=>{\r\n                    this.setInputEnabled(true);\r\n                    // });\r\n                }\r\n            } else {\r\n                this.setInputEnabled(true);\r\n            }\r\n            // });\r\n\r\n            this.gameplayContainer.add(this.character);\r\n        }\r\n\r\n        public _update() {\r\n            if (this.selectableLetters) {\r\n                for (let a of this.selectableLetters) {\r\n                    if (a.x < 0 + a[\"-image-\"].width/2) {\r\n                        a.x = 0 + a[\"-image-\"].width/2;\r\n                    } else if (a.x > game.scale.width - a[\"-image-\"].width/2) {\r\n                        a.x = game.scale.width - a[\"-image-\"].width/2;\r\n                    }\r\n                    if (a.y < 0 + a[\"-image-\"].height/2) {\r\n                        a.y = a[\"-image-\"].height/2;\r\n                    } else if (a.y > game.scale.height - a[\"-image-\"].height/2) {\r\n                        a.y = game.scale.height - a[\"-image-\"].height/2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public placeAppleOverBuckets(a):void {\r\n            if (!a.parentContainer) return;\r\n            this.gameplayContainer.remove(a);\r\n            this.gameplayContainer.addAt(a, this.gameplayContainer.length);\r\n        }\r\n\r\n        private onNewRound(showOut:boolean):void {\r\n            this.scene.sound.add(\"next_round\").play();\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            if (showOut) {\r\n                this.prepareRound();\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\r\n                if (!block['-draggable-']) return;\r\n\r\n                block.x = dragX;\r\n                block.y = dragY;\r\n                this.gameplayContainer.bringToTop(block);\r\n\r\n                let targetBlock:any;\r\n                for (targetBlock of this.targetBlocks) {\r\n                    if (targetBlock['alreadyFilled']) continue;\r\n\r\n                    if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\r\n                        block['-draggable-'] = false;\r\n                        block.disableInteractive();\r\n\r\n                        targetBlock['alreadyFilled'] = true;\r\n\r\n                        this.scene.tweens.add({\r\n                            targets: block,\r\n                            x: targetBlock.x,\r\n                            y: targetBlock.y,\r\n                            duration: 300,\r\n                            ease: Phaser.Math.Easing.Back.Out\r\n                        });\r\n\r\n                        targetBlock[\"-block-\"] = block;\r\n\r\n                        this.checkTargetBlockLetters();\r\n\r\n                        this.scene.sound.add(\"drag from its spot\").play();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            this._btnClose.setInteractive({cursor: 'pointer', pixelPerfect:true});\r\n        }\r\n\r\n        private checkTargetBlockLetters():void {\r\n            let sameLettersNum:number = 0;\r\n            for (let targetBlock of this.targetBlocks) {\r\n                if (!targetBlock['-block-']) return;\r\n\r\n                if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\r\n                    sameLettersNum++;\r\n                }\r\n            }\r\n            this.setInputEnabled(false);\r\n            if (sameLettersNum == this.targetBlocks.length) {\r\n                this.onCorrectAnswer();\r\n\r\n                this.scene.sound.add(this.gameplay.correctWord).play();\r\n            } else {\r\n                this.onWrongAnswer();\r\n            }\r\n        }\r\n\r\n        private moveBridgeBackToStartPosition(block, onComplete):void {\r\n            this.scene.tweens.add({\r\n                targets: block,\r\n                x: block['startPosition'].x,\r\n                y: block['startPosition'].y,\r\n                duration: 250,\r\n                ease: Phaser.Math.Easing.Sine.Out,\r\n                onComplete:()=>{\r\n                    if (onComplete) onComplete();\r\n                }\r\n            });\r\n            if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\r\n                delayedCall(100, ()=>{\r\n                    this.scene.sound.add(\"drag from its spot\").play();\r\n                });\r\n\r\n            }\r\n\r\n            this.placeAppleOverBuckets(block);\r\n        }\r\n\r\n        private soundGooseYes = null;\r\n        public onCorrectAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = false;\r\n            this.tally[i].visible = true;\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            this.soundGooseYes = this.scene.sound.add(\"correct drop\");\r\n            this.soundGooseYes.play();\r\n\r\n            this.scene.tweens.add({\r\n                targets: this.character,\r\n                x: 700,\r\n                duration: 2500,\r\n                ease: Phaser.Math.Easing.Sine.Out\r\n            });\r\n\r\n            Preloader.playAnim('yelling_wrong', this.character, ()=>{\r\n                this.playIdle();\r\n            });\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundWrongDrop = null;\r\n        public onWrongAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tally[i].visible = false;\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\r\n            this.soundWrongDrop.play();\r\n            this.scene.sound.add(\"Goose no\").play();\r\n\r\n            if (this.idleDelayedCall != null) {\r\n                destroyDelayedCall(this.idleDelayedCall);\r\n                this.idleDelayedCall = null;\r\n            }\r\n\r\n            return lost;\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private createTallies(): void {\r\n            if (this.tally) {\r\n                for (let te of this.tallyEmptyArray) {\r\n                    te.visible = false;\r\n                    this.bringToTop(te);\r\n                }\r\n                for (let t of this.tally) {\r\n                    t.visible = false;\r\n                    this.bringToTop(t);\r\n                }\r\n                return;\r\n            }\r\n\r\n            let startX: number = 18;\r\n            let startY: number = 148;\r\n            let dy: number = 34;\r\n            let tallyEmptyArrayPositions = [];\r\n            for (let i = 0; i < 12; i++) {\r\n                tallyEmptyArrayPositions.push({x: startX, y: startY + i * dy});\r\n            }\r\n            this.tallyEmptyArray = [];\r\n            this.tally = [];\r\n\r\n            for (let p of tallyEmptyArrayPositions) {\r\n                let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\r\n                this.tallyEmptyArray.push(_BeehiveEmpty);\r\n                _BeehiveEmpty.visible = false;\r\n\r\n                let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\r\n                this.tally.push(_Beehive);\r\n            }\r\n\r\n            for (let bea of this.tallyEmptyArray) {\r\n                this.add(bea);\r\n            }\r\n            for (let bee of this.tally) {\r\n                this.add(bee);\r\n                bee.visible = false;\r\n            }\r\n        }\r\n\r\n        public hideAllUnusedTallies():void {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            for (let k:number = i + 1; k < this.tallyEmptyArray.length; k++) {\r\n                this.tallyEmptyArray[k].visible = false;\r\n                this.tally[k].visible = false;\r\n            }\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n            this.scene.tweens.pauseAll();\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(2000, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(1500, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let a of this.selectableLetters) a.setInteractive(/*{cursor: 'pointer', pixelPerfect:true}*/);\r\n            } else {\r\n                for (let a of this.selectableLetters) a.disableInteractive();\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            this.scene.sound.stopAll();\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n            this.instrTxt.setWordWrapWidth(500);\r\n            this.instrTxt.setLineSpacing(5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}"]}