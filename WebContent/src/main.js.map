{"version":3,"sources":["main.js","../ts/src/App.ts","../ts/src/FitScaleManager.ts","../ts/src/core/Gameplay.ts","../ts/src/scene/Boot.ts","../ts/src/scene/MainScene.ts","../ts/src/scene/Preloader.ts","../ts/src/screen/AreYouSureWindow.ts","../ts/src/screen/CompleteWindow.ts","../ts/src/screen/GameplayScreen.ts","../ts/src/screen/InstructionPage.ts","../ts/src/screen/TryAgainWindow.ts"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","return","minLen","_arrayLikeToArray","toString","call","slice","name","from","test","arr","len","arr2","_classCallCheck","instance","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","this","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Date","getPrototypeOf","game","ctb","App","_Phaser$Game","Phaser","Game","_super","_this","config","type","AUTO","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","parent","dom","createContainer","scale","mode","FitScaleManager","detectBestScaleMode","autoCenter","Scale","CENTER_BOTH","transparent","scene","add","Boot","window","onload","delayedCalls","delayedCall","delay","callback","args","callbackScope","getAt","dc","time","push","t","setTimeout","pauseAllDelayedCalls","_step","_iterator","Time","TimerEvent","paused","resumeAllDelayedCalls","_step2","_iterator2","destroyAllDelayedCalls","_step3","_iterator3","remove","clearTimeout","destroyDelayedCall","ind","indexOf","splice","setPageBackground","bg","document","querySelector","style","backgroundImage","setupButton","btn","frame","on","setFrame","sound","play","setupButtonTextureBased","texture","hoverTexture","setTexture","playBtnClickAnim","sc","hasOwnProperty","scaleX","scaleY","tweens","targets","duration","yoyo","_this2","doResize","calculateScale","newCanvasWidth","phaserScaleManager","newCanvasHeight","canvasStyle","marginLeft","innerWidth","marginTop","innerHeight","canvas","addListener","Events","RESIZE","onResize","overridePhaserTransformMethods","scaleMode","NONE","Math","min","_this3","transformX","pageX","parseInt","split","transformY","pageY","RESIZE_DELAY","iOS","navigator","platform","isAndroid","userAgent","toLowerCase","FIT","core","Gameplay","allLettersNames","currentRound","correctAnswersCount","wrongAnswersCount","correctAnswersCountThisRound","wrongAnswersCountThisRound","onNewRound","nextLetterDelay","failsNumToLose","Number","cache","json","get","useImages","Boolean","at","wordsLetters","correctWord","onComplete","onLose","totalRoundsNum","score","calculateScore","nextLetter","_this4","fn","thisRound","rounds","shift","blockLetters","onLettersPlaced","getCurrentTotalAnswersCountThisRound","letter","_step4","_iterator4","d","setupCallbacks","letters","_step5","_iterator5","_Phaser$Scene","Scene","_super2","_this5","offsetLeft","parentElement","displayScale","x","offsetTop","y","Preloader","MainScene","_Phaser$Scene2","_super3","gameplay","gameplayScreen","screen","GameplayScreen","children","showInstructionPage","_update","_Phaser$Scene3","_super4","load","_this6","_step6","_iterator6","l","image","_step7","_iterator7","r","_step8","_iterator8","audio","_step9","_iterator9","progressTxt","text","fontFamily","fontSize","color","align","setOrigin","pack","ceil","nextScene","start","animKey","sprite","undefined","mainScene","getScene","anims","exists","data","ANIMS_DATA","frames","generateFrameNames","end","zeroPad","prefix","suffix","frameRate","repeat","currentAnim","off","stop","once","idle","padNum","atlas","yelling_wrong","AreYouSureWindow","_Phaser$GameObjects$C","GameObjects","Container","_super5","onYes","onNo","_this7","_areYouSurePage","Image","setInteractive","_btnSureYes","cursor","_btnSureNo","CompleteWindow","_Phaser$GameObjects$C2","_super6","onBack","onReplay","onNext","_this8","music","setPosition","_bgComplete","_cup","_btnBack","_btnReplay","_btnNext","_CollectedPoints","totalScoreTxt","stroke","strokeThickness","grd","context","createLinearGradient","addColorStop","setFill","starScoreTxt","starScore","ease","Easing","Back","Out","String","_Phaser$GameObjects$C3","_super7","_this9","bgMusic","correctAudio","correctAudioWord","idleDelayedCall","playIdle","character","playAnim","soundWrongDrop","wfsnd","showCompleteWindow","completeWindow","destroyGameplay","setInputEnabled","show","showLoseWindow","tryAgainWindow","TryAgainWindow","_gameStage","setScale","_btnClose","onCloseClick","_btnSound","onSoundClick","areYouSureWindow","parentContainer","pause","playCorrectAudio","_this10","loop","gameplayContainer","reset","prepareRound","createTallies","_this11","removeAll","longIce","alpha","randomizedLetter","Utils","Shuffle","fixedHeight","setText","selectableLetters","targetBlocks","getCorrectWordLettersNumber","b","getCorrectWordCharAt","a","txt","_step10","_iterator10","_loop","setSize","input","setDraggable","moveBridgeBackToStartPosition","createInput","isNewRound","isRoundsComplete","_step11","_iterator11","addAt","showOut","_this12","pointer","block","dragX","dragY","targetBlock","bringToTop","_step12","_iterator12","abs","checkTargetBlockLetters","pixelPerfect","_step13","_this13","sameLettersNum","_iterator13","Linear","_step14","_iterator14","Sine","onCorrectAnswer","_step15","_iterator15","onWrongAnswer","_step16","_iterator16","playSound","_this14","Distance","Between","placeAppleOverBuckets","getCurrentTotalAnswersCount","tallyEmptyArray","visible","tally","_this15","lost","showAreYouSurePage","_step17","_iterator17","te","_step18","_iterator18","tallyEmptyArrayPositions","_i2","_tallyEmptyArrayPosit","_BeehiveEmpty","_Beehive","_step19","_iterator19","bea","_step20","_iterator20","bee","k","_this16","playInstructionSound","instructionPage","InstructionPage","showGameplay","_this17","pauseAll","pauseSounds","resumeAll","unpauseSounds","enabled","_step21","_iterator21","_step22","_iterator22","disableInteractive","stopAll","_Phaser$GameObjects$C4","_super8","onPlayClick","onSndClick","_this18","_instructionPage","_instructionPageTitle","_btnPlay","instrTxt","setWordWrapWidth","setLineSpacing","_btnSoundInstruction","_Phaser$GameObjects$C5","_super9","_this19","_bg","_star"],"mappings":"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","file":"main.js","sourcesContent":["var ctb;\n(function (ctb) {\n    class App extends Phaser.Game {\n        constructor() {\n            let config = {\n                type: Phaser.AUTO,\n                width: App.CANVAS_WIDTH,\n                height: App.CANVAS_HEIGHT,\n                parent: 'game-container',\n                dom: {\n                    createContainer: false\n                },\n                scale: {\n                    mode: FitScaleManager.detectBestScaleMode(),\n                    autoCenter: Phaser.Scale.CENTER_BOTH\n                },\n                transparent: true,\n                scene: {\n                    create: () => {\n                        this.scene.add('Boot', ctb.scene.Boot, true);\n                    }\n                }\n            };\n            super(config);\n        }\n    }\n    App.CANVAS_WIDTH = 980;\n    App.CANVAS_HEIGHT = 600;\n    ctb.App = App;\n})(ctb || (ctb = {}));\nlet game;\nwindow.onload = () => {\n    game = new ctb.App();\n};\nlet delayedCalls = [];\nfunction delayedCall(delay, callback, args, callbackScope) {\n    let scene = game.scene.getAt(0);\n    if (scene) {\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\n        delayedCalls.push(dc);\n        return dc;\n    }\n    let t = setTimeout(callback, delay);\n    delayedCalls.push(t);\n    return t;\n}\nfunction pauseAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = true;\n        }\n    }\n}\nfunction resumeAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.paused = false;\n        }\n    }\n}\nfunction destroyAllDelayedCalls() {\n    for (let dc of delayedCalls) {\n        if (dc instanceof Phaser.Time.TimerEvent) {\n            dc.remove(false);\n        }\n        else {\n            clearTimeout(dc);\n        }\n    }\n    delayedCalls = [];\n}\nfunction destroyDelayedCall(dc) {\n    if (dc instanceof Phaser.Time.TimerEvent) {\n        dc.remove(false);\n    }\n    else {\n        clearTimeout(dc);\n    }\n    let ind = delayedCalls.indexOf(dc);\n    if (ind >= 0)\n        delayedCalls.splice(ind, 1);\n}\nfunction setPageBackground(bg) {\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\n}\nfunction setupButton(btn, frame) {\n    btn.on('pointerdown', () => { btn.setFrame(frame + '_hover' + '0000'); });\n    btn.on('pointerover', () => { btn.setFrame(frame + '_hover' + '0000'); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setFrame(frame + '0000'); });\n    btn.on('pointerup', () => { btn.setFrame(frame + '0000'); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction setupButtonTextureBased(btn, texture, hoverTexture) {\n    btn.on('pointerdown', () => { btn.setTexture(hoverTexture); });\n    btn.on('pointerover', () => { btn.setTexture(hoverTexture); game.scene.getAt(0).sound.add(\"button hover\").play(); });\n    btn.on('pointerout', () => { btn.setTexture(texture); });\n    btn.on('pointerup', () => { btn.setTexture(texture); game.scene.getAt(0).sound.add('activity selection - button selection').play(); });\n}\nfunction playBtnClickAnim(target) {\n    let sc = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\n    target.scaleX = target.scaleY = sc;\n    let scene = game.scene.getAt(0);\n    scene.tweens.add({\n        targets: target,\n        \"scaleX\": 0.9 * sc,\n        \"scaleY\": 0.9 * sc,\n        duration: 100,\n        yoyo: true\n    });\n}\n/**\n * @author Roman Parada\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\n *\n * How to use:\n * Just call the code line below in Boot scene's init() method of your project:\n * new FitScaleManager(this.game).setup();\n */\nclass FitScaleManager {\n    constructor(game) {\n        this.doResize = () => {\n            let scale = this.calculateScale();\n            let newCanvasWidth = this.phaserScaleManager.width * scale;\n            let newCanvasHeight = this.phaserScaleManager.height * scale;\n            this.canvasStyle.width = newCanvasWidth + 'px';\n            this.canvasStyle.height = newCanvasHeight + 'px';\n            this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\n            this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\n        };\n        this.game = game;\n        this.canvasStyle = this.game.canvas.style;\n        this.phaserScaleManager = this.game.scale;\n    }\n    static detectBestScaleMode() {\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\n    }\n    ;\n    /**\n     * Just call this method once in Boot scene's init() method\n     */\n    setup() {\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\n        this.overridePhaserTransformMethods();\n        this.onResize();\n    }\n    calculateScale() {\n        if (game.scale.scaleMode == Phaser.Scale.NONE)\n            return 1;\n        return Math.min(window.innerWidth / this.phaserScaleManager.width, window.innerHeight / this.phaserScaleManager.height);\n    }\n    overridePhaserTransformMethods() {\n        this.game.scale.transformX = (pageX) => {\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\n        };\n        this.game.scale.transformY = (pageY) => {\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\n        };\n    }\n    onResize() {\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\n    }\n}\nFitScaleManager.RESIZE_DELAY = 500;\nvar ctb;\n(function (ctb) {\n    var core;\n    (function (core) {\n        class Gameplay {\n            constructor() {\n                this.allLettersNames = null;\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n                this.onNewRound = null;\n                this.nextLetterDelay = 0;\n                this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\n                this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\n            }\n            getCorrectWordCharAt(at) {\n                return this.wordsLetters[this.correctWord][at];\n            }\n            getCorrectWordLettersNumber() {\n                return this.wordsLetters[this.correctWord].length;\n            }\n            setupCallbacks(onComplete, onLose, onNewRound) {\n                this.onComplete = onComplete;\n                this.onLose = onLose;\n                this.onNewRound = onNewRound;\n            }\n            calculateScore() {\n                return this.totalRoundsNum - this.wrongAnswersCount;\n            }\n            onLettersPlaced() {\n                if (this.correctAnswersCountThisRound == 1) {\n                    this.currentRound++;\n                    if (this.currentRound >= this.totalRoundsNum) {\n                        let score = this.calculateScore();\n                        this.onComplete(score, score);\n                        return true;\n                    }\n                    else {\n                        this.nextLetter();\n                    }\n                }\n                return false;\n            }\n            nextLetter() {\n                let fn = () => {\n                    let thisRound = this.rounds.shift();\n                    this.blockLetters = thisRound[\"blockLetters\"];\n                    this.correctWord = thisRound[\"correctWord\"];\n                    this.correctAnswersCountThisRound = 0;\n                    this.wrongAnswersCountThisRound = 0;\n                    if (this.onNewRound)\n                        this.onNewRound();\n                };\n                if (this.nextLetterDelay == 0) {\n                    fn();\n                }\n                else {\n                    delayedCall(this.nextLetterDelay, fn);\n                }\n            }\n            onCorrectAnswer() {\n                this.correctAnswersCount++;\n                this.correctAnswersCountThisRound++;\n                this.nextLetterDelay = 3500;\n                return this.onLettersPlaced();\n            }\n            onWrongAnswer() {\n                this.wrongAnswersCount++;\n                this.wrongAnswersCountThisRound++;\n                this.nextLetterDelay = 2000;\n                if (this.wrongAnswersCount >= this.failsNumToLose) {\n                    this.onLose(0, 0);\n                    return true;\n                }\n                else {\n                    this.onLettersPlaced();\n                }\n                return false;\n            }\n            getCurrentTotalAnswersCount() {\n                return this.correctAnswersCount + this.wrongAnswersCount;\n            }\n            getCurrentTotalAnswersCountThisRound() {\n                return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\n            }\n            isNewRound() {\n                return this.getCurrentTotalAnswersCountThisRound() == 0;\n            }\n            isRoundsComplete() {\n                return this.currentRound >= this.totalRoundsNum;\n            }\n            getAudioKeyOfChar(letter) {\n                let json = game.cache.json.get('gameplay');\n                let letters = json[\"letters\"];\n                for (let d of letters) {\n                    if (letter == d['letterName']) {\n                        return d['audioKey'];\n                    }\n                }\n                return null;\n            }\n            reset() {\n                this.nextLetterDelay = 0;\n                this.setupCallbacks(null, null, null);\n                let json = game.cache.json.get('gameplay');\n                this.wordsLetters = json[\"wordsLetters\"];\n                this.rounds = json[\"rounds\"].slice();\n                this.totalRoundsNum = this.rounds.length;\n                this.letters = json[\"letters\"].slice();\n                this.allLettersNames = [];\n                for (let d of this.letters)\n                    this.allLettersNames.push(d[\"letterName\"]);\n                this.nextLetter();\n                this.currentRound = 0;\n                this.correctAnswersCount = 0;\n                this.wrongAnswersCount = 0;\n                this.correctAnswersCountThisRound = 0;\n                this.wrongAnswersCountThisRound = 0;\n            }\n        }\n        core.Gameplay = Gameplay;\n    })(core = ctb.core || (ctb.core = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Boot extends Phaser.Scene {\n            init() {\n                this.game.scale.transformX = (pageX) => {\n                    let offsetLeft = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetLeft) {\n                            offsetLeft = parentElement.offsetLeft;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageX - offsetLeft) * this.game.scale.displayScale.x;\n                };\n                this.game.scale.transformY = (pageY) => {\n                    let offsetTop = 0;\n                    let parentElement = game.canvas.parentElement;\n                    while (parentElement) {\n                        if (parentElement.offsetTop) {\n                            offsetTop = parentElement.offsetTop;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    return (pageY - offsetTop) * this.game.scale.displayScale.y;\n                };\n            }\n            create() {\n                game.scene.remove('Boot');\n                game.scene.add('Preloader', ctb.scene.Preloader, true);\n            }\n        }\n        scene.Boot = Boot;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        var Gameplay = ctb.core.Gameplay;\n        class MainScene extends Phaser.Scene {\n            create() {\n                this.gameplay = new Gameplay();\n                this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\n                this.children.add(this.gameplayScreen);\n                this.gameplayScreen.showInstructionPage();\n            }\n            update() {\n                this.gameplayScreen._update();\n            }\n        }\n        scene.MainScene = MainScene;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var scene;\n    (function (scene) {\n        class Preloader extends Phaser.Scene {\n            preload() {\n                this.load.json('gameplay', 'assets/json/gameplay.json');\n            }\n            create() {\n                let json = game.cache.json.get('gameplay');\n                if (json[\"useImages\"]) {\n                    for (let l of json[\"letters\"]) {\n                        this.load.image(l[\"letterName\"], \"assets/imgs/letters/\" + l[\"letterName\"] + \".png\");\n                    }\n                    for (let r of json[\"rounds\"]) {\n                        this.load.image(r[\"correctWord\"], \"assets/imgs/words/\" + r[\"correctWord\"] + \".png\");\n                    }\n                }\n                for (let l of json[\"letters\"]) {\n                    this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\" + l[\"audioKey\"] + \".mp3\");\n                }\n                for (let r of json[\"rounds\"]) {\n                    this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\" + r[\"correctWord\"] + \".mp3\");\n                }\n                let progressTxt = this.add.text(game.scale.width / 2, game.scale.height / 2, \"\", {\n                    \"fontFamily\": \"Quran Era font\",\n                    \"fontSize\": 25,\n                    \"color\": \"#000000\",\n                    \"align\": 'center'\n                });\n                progressTxt.setOrigin(0.5, 0.5);\n                this.load.pack('preloader', 'assets/pack.json');\n                this.load.on('progress', (value) => {\n                    progressTxt.text = Math.ceil(value * 100) + \"%\";\n                }, this);\n                this.load.on('complete', () => {\n                    this.nextScene();\n                });\n                this.load.start();\n            }\n            static playAnim(animKey, sprite, onComplete = null) {\n                let mainScene = game.scene.getScene('ScreenMain');\n                if (!mainScene.anims.exists(animKey)) {\n                    let data = Preloader.ANIMS_DATA[animKey];\n                    mainScene.anims.create({\n                        key: animKey,\n                        frames: mainScene.anims.generateFrameNames(data['atlas'], {\n                            start: data['start'], end: data['end'], zeroPad: data['padNum'],\n                            prefix: data['prefix'], suffix: ''\n                        }),\n                        frameRate: data['frameRate'],\n                        repeat: data['repeat']\n                    });\n                }\n                if (sprite.anims.currentAnim) {\n                    sprite.anims.currentAnim.off('complete');\n                }\n                sprite.anims.stop();\n                sprite.play(animKey);\n                sprite.anims.currentAnim.once('complete', () => {\n                    if (onComplete)\n                        onComplete();\n                });\n                return sprite;\n            }\n            nextScene() {\n                game.scene.remove('Preloader');\n                game.scene.add('ScreenMain', ctb.scene.MainScene, true);\n            }\n        }\n        Preloader.ANIMS_DATA = {\n            'idle': {\n                'start': 0,\n                'end': 51,\n                'padNum': 4,\n                'prefix': 'idle',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'atlas-shake'\n            },\n            'yelling_wrong': {\n                'start': 0,\n                'end': 46,\n                'padNum': 4,\n                'prefix': 'yelling_wrong',\n                'repeat': 0,\n                'frameRate': 24,\n                'atlas': 'atlas-shake'\n            }\n        };\n        scene.Preloader = Preloader;\n    })(scene = ctb.scene || (ctb.scene = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class AreYouSureWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onYes, onNo) {\n                super(scene);\n                this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0 - 48, 'Exit warning');\n                this._areYouSurePage.setOrigin(0, 0);\n                this._areYouSurePage.setInteractive();\n                this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485 - 50, 'btnYES1');\n                this._btnSureYes.setInteractive({ cursor: 'pointer' });\n                this._btnSureYes.once('pointerup', onYes);\n                setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\n                this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485 - 50, 'btnNO1');\n                this._btnSureNo.setInteractive({ cursor: 'pointer' });\n                this._btnSureNo.once('pointerup', onNo);\n                setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\n                this.add(this._areYouSurePage);\n                this.add(this._btnSureYes);\n                this.add(this._btnSureNo);\n            }\n        }\n        screen.AreYouSureWindow = AreYouSureWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class CompleteWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay, onNext) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-104.5, -48);\n                this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\n                this._bgComplete.setOrigin(0, 0);\n                this._bgComplete.setInteractive();\n                this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\n                this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\n                let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\n                this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bgComplete,\n                    _CollectedPoints,\n                    this._cup,\n                    this._btnBack,\n                    this._btnReplay,\n                    this._btnNext,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n                this._btnNext.setInteractive({ cursor: 'pointer' });\n                this._btnNext.on('pointerup', () => {\n                    onNext(this._btnNext);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\n            }\n            show(score, starScore) {\n                this._cup.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._cup,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                // let music = this.scene.sound.add(\"viktory\");\n                this.music = this.scene.sound.add(\"Activity completion fantastic\");\n                this.music.play();\n            }\n        }\n        screen.CompleteWindow = CompleteWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        var Preloader = ctb.scene.Preloader;\n        class GameplayScreen extends Phaser.GameObjects.Container {\n            constructor(scene, gameplay) {\n                super(scene);\n                this.bgMusic = null;\n                this.correctAudio = null;\n                this.correctAudioWord = null;\n                this.idleDelayedCall = null;\n                this.playIdle = () => {\n                    this.character.setOrigin(0.5, 0.5);\n                    Preloader.playAnim('idle', this.character, () => {\n                        this.idleDelayedCall = delayedCall(5000, () => {\n                            this.playIdle();\n                        });\n                    });\n                };\n                this.soundWrongDrop = null;\n                this.wfsnd = null;\n                this.showCompleteWindow = (score, starScore) => {\n                    let completeWindow = new screen.CompleteWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(completeWindow);\n                        this.showInstructionPage();\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(2000, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(completeWindow);\n                        completeWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.showLoseWindow = (score, starScore) => {\n                    let tryAgainWindow = new screen.TryAgainWindow(this.scene, (target) => {\n                        playBtnClickAnim(target);\n                    }, (target) => {\n                        playBtnClickAnim(target);\n                        this.destroyGameplay();\n                        this.remove(tryAgainWindow);\n                        this.showInstructionPage();\n                    });\n                    this.setInputEnabled(false);\n                    delayedCall(1500, () => {\n                        setPageBackground(\"bg-blue\");\n                        this.add(tryAgainWindow);\n                        tryAgainWindow.show(score, starScore);\n                        this.bgMusic.stop();\n                    });\n                };\n                this.gameplay = gameplay;\n                window[\"gs\"] = this;\n                this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\n                this._gameStage.setOrigin(0.5, 0.5);\n                this._gameStage.setScale(1.02);\n                this._gameStage.setInteractive();\n                this.add(this._gameStage);\n                this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025 - 105, 100 - 50, 'x Button');\n                this._btnClose.setInteractive({ cursor: 'pointer' });\n                this._btnClose[\"defScale\"] = this._btnClose.scale;\n                setupButtonTextureBased(this._btnClose, 'x Button', 'x Button HOVER EFFECT');\n                this.add(this._btnClose);\n                this._btnClose.on('pointerup', () => {\n                    playBtnClickAnim(this._btnClose);\n                    this.onCloseClick();\n                });\n                this._btnSound = new Phaser.GameObjects.Image(this.scene, 160 - 105, 100 - 50, 'Sound');\n                this._btnSound.setInteractive({ cursor: 'pointer' });\n                this._btnSound[\"defScale\"] = this._btnSound.scale;\n                setupButtonTextureBased(this._btnSound, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._btnSound);\n                this._btnSound.on('pointerup', () => {\n                    playBtnClickAnim(this._btnSound);\n                    this.onSoundClick();\n                });\n            }\n            playCorrectAudio() {\n                if (this.correctAudio) {\n                    this.correctAudio.stop();\n                }\n                this.correctAudio = this.scene.sound.add('Make the word map');\n                this.correctAudio.play();\n                if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\n                    this.correctAudio.pause();\n                }\n                if (this.correctAudioWord)\n                    this.correctAudioWord.stop();\n            }\n            onSoundClick() {\n                this.playCorrectAudio();\n            }\n            showGameplay() {\n                setPageBackground(\"bg-australia\");\n                this.bgMusic = this.scene.sound.add(\"Winter bg sound\");\n                this.bgMusic.play();\n                this.bgMusic.loop = true;\n                this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\n                this.add(this.gameplayContainer);\n                this.gameplay.reset();\n                this.prepareRound();\n                this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, () => {\n                    this.onNewRound(true);\n                });\n                this.createTallies();\n            }\n            prepareRound() {\n                delayedCall(500, () => this.playCorrectAudio());\n                this.gameplayContainer.removeAll();\n                this.character = this.scene.add.sprite(0, 0, null);\n                this.character.setPosition(750, 310);\n                this.playIdle();\n                this.longIce = new Phaser.GameObjects.Image(this.scene, 110, 147, 'Long Ice');\n                this.longIce.setOrigin(0, 0);\n                this.longIce.alpha = 0;\n                this.gameplayContainer.add(this.longIce);\n                let randomizedLetter = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\n                if (this.gameplay.useImages) {\n                    let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                else {\n                    let correctWord = this.scene.add.text(750, 180, \"\", {\n                        \"fontFamily\": \"Quran Era font\",\n                        \"fontSize\": 90,\n                        \"color\": \"#000000\",\n                        \"align\": 'center'\n                    });\n                    correctWord.setOrigin(0.5, 0.5);\n                    correctWord.style.fixedHeight = 140;\n                    correctWord.setText(this.gameplay.correctWord);\n                    this.gameplayContainer.add(correctWord);\n                }\n                this.selectableLetters = [];\n                this.targetBlocks = [];\n                for (let i = 0; i < this.gameplay.getCorrectWordLettersNumber(); i++) {\n                    let b = {\n                        x: 174 + i * 133, y: 215\n                    };\n                    b['alreadyFilled'] = false;\n                    this.targetBlocks.push(b);\n                    b[\"-letter-text\"] = this.gameplay.getCorrectWordCharAt(i);\n                    b[\"-block-\"] = null;\n                }\n                for (let i = 0; i < randomizedLetter.length; i++) {\n                    let a = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\n                    a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0, 'IceBlock'));\n                    a[\"-image-\"].setOrigin(0.5, 0.5);\n                    this.selectableLetters.push(a);\n                    let txt;\n                    if (this.gameplay.useImages) {\n                        txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    else {\n                        txt = this.scene.add.text(0, 0, \"\", {\n                            \"fontFamily\": \"Quran Era font\",\n                            \"fontSize\": 55,\n                            \"color\": \"#000000\",\n                            \"align\": 'center'\n                        });\n                        txt.setOrigin(0.5, 0.5);\n                        txt.style.fixedHeight = 75;\n                        txt.setText(randomizedLetter[i]);\n                        a.add(txt);\n                    }\n                    a['startPosition'] = { x: a.x, y: a.y };\n                    a[\"-letter-\"] = txt;\n                    a[\"-letter-text\"] = randomizedLetter[i];\n                    this.gameplayContainer.add(a);\n                    a['-draggable-'] = true;\n                }\n                for (let a of this.selectableLetters) {\n                    a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\n                    a.setInteractive({ cursor: 'pointer' });\n                    this.scene.input.setDraggable(a);\n                    a.on('pointerdown', () => {\n                        a['-pointerdown-'] = true;\n                        if (a['-draggable-'])\n                            this.scene.sound.add(\"drag from its spot\").play();\n                    });\n                    a.on('pointerup', () => {\n                        a['-pointerdown-'] = false;\n                        if (!a['-draggable-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null, true);\n                    });\n                    a.on('pointerout', () => {\n                        if (!a['-draggable-'])\n                            return;\n                        if (!a['-pointerdown-'])\n                            return;\n                        this.moveBridgeBackToStartPosition(a, null, true);\n                    });\n                }\n                this.createInput();\n                this.setInputEnabled(false);\n                // delayedCall(1200, ()=>{\n                if (this.gameplay.isNewRound()) {\n                    if (!this.gameplay.isRoundsComplete()) {\n                        // delayedCall(2000, ()=>{\n                        this.setInputEnabled(true);\n                        // });\n                    }\n                }\n                else {\n                    this.setInputEnabled(true);\n                }\n                // });\n                this.gameplayContainer.add(this.character);\n            }\n            _update() {\n                if (this.selectableLetters) {\n                    for (let a of this.selectableLetters) {\n                        if (a.x < 0 + a[\"-image-\"].width / 2) {\n                            a.x = 0 + a[\"-image-\"].width / 2;\n                        }\n                        else if (a.x > game.scale.width - a[\"-image-\"].width / 2) {\n                            a.x = game.scale.width - a[\"-image-\"].width / 2;\n                        }\n                        if (a.y < 0 + a[\"-image-\"].height / 2) {\n                            a.y = a[\"-image-\"].height / 2;\n                        }\n                        else if (a.y > game.scale.height - a[\"-image-\"].height / 2) {\n                            a.y = game.scale.height - a[\"-image-\"].height / 2;\n                        }\n                    }\n                }\n            }\n            placeAppleOverBuckets(a) {\n                if (!a.parentContainer)\n                    return;\n                this.gameplayContainer.remove(a);\n                this.gameplayContainer.addAt(a, this.gameplayContainer.length);\n            }\n            onNewRound(showOut) {\n                this.scene.sound.add(\"next_round\").play();\n                this.setInputEnabled(false);\n                if (showOut) {\n                    this.prepareRound();\n                }\n            }\n            createInput() {\n                this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\n                    if (!block['-draggable-'])\n                        return;\n                    block.x = dragX;\n                    block.y = dragY;\n                    this.gameplayContainer.bringToTop(block);\n                    let targetBlock;\n                    for (targetBlock of this.targetBlocks) {\n                        if (targetBlock['alreadyFilled'])\n                            continue;\n                        if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\n                            block['-draggable-'] = false;\n                            targetBlock['alreadyFilled'] = true;\n                            this.scene.tweens.add({\n                                targets: block,\n                                x: targetBlock.x,\n                                y: targetBlock.y,\n                                duration: 300,\n                                ease: Phaser.Math.Easing.Back.Out\n                            });\n                            targetBlock[\"-block-\"] = block;\n                            this.checkTargetBlockLetters();\n                        }\n                    }\n                });\n                this._btnClose.setInteractive({ cursor: 'pointer', pixelPerfect: true });\n            }\n            checkTargetBlockLetters() {\n                let sameLettersNum = 0;\n                for (let targetBlock of this.targetBlocks) {\n                    if (!targetBlock['-block-']) {\n                        this.scene.sound.add(\"Placing block above\").play();\n                        return;\n                    }\n                    if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\n                        sameLettersNum++;\n                    }\n                }\n                this.setInputEnabled(false);\n                if (sameLettersNum == this.targetBlocks.length) {\n                    this.scene.sound.add(\"Placing block above\").play();\n                    this.scene.tweens.add({\n                        targets: this.longIce,\n                        alpha: 1,\n                        duration: 250,\n                        ease: Phaser.Math.Easing.Linear,\n                    });\n                    for (let targetBlock of this.targetBlocks) {\n                        this.scene.tweens.add({\n                            targets: targetBlock['-block-'][\"-image-\"],\n                            alpha: 0,\n                            duration: 250,\n                            ease: Phaser.Math.Easing.Linear\n                        });\n                        if (targetBlock == this.targetBlocks[1])\n                            continue;\n                        this.scene.tweens.add({\n                            targets: targetBlock['-block-'],\n                            x: this.targetBlocks[1]['x'],\n                            duration: 250,\n                            alpha: 0,\n                            ease: Phaser.Math.Easing.Sine.Out,\n                            delay: 250\n                        });\n                        delayedCall(500, () => {\n                            if (this.gameplay.useImages) {\n                                this.targetBlocks[1]['-block-'][\"-letter-\"].setTexture(this.gameplay.correctWord);\n                            }\n                            else {\n                                this.targetBlocks[1]['-block-'][\"-letter-\"].setText(this.gameplay.correctWord);\n                            }\n                        });\n                    }\n                    this.scene.sound.add(\"Letters joining sound\").play();\n                    delayedCall(250, () => this.scene.sound.add(\"Correct click\").play());\n                    delayedCall(1000, () => this.scene.sound.add(\"success for corect word\").play());\n                    this.onCorrectAnswer();\n                }\n                else {\n                    this.scene.sound.add(\"placed- wrong- snake - blocks go back\").play();\n                    // this.scene.sound.add(\"Wrong attempt\").play();\n                    delayedCall(2400, () => {\n                        for (let targetBlock of this.targetBlocks) {\n                            this.moveBridgeBackToStartPosition(targetBlock['-block-'], null, false);\n                        }\n                        // delayedCall(100, ()=>this.scene.sound.add(\"all three blocks move back after wrong\").play());\n                    });\n                    delayedCall(1500, () => {\n                        this.character.setOrigin(0.49, 0.515);\n                        Preloader.playAnim('yelling_wrong', this.character, () => {\n                            this.playIdle();\n                        });\n                        // this.scene.sound.add(\"Snake animation sfx\").play();\n                    });\n                    delayedCall(2500, () => {\n                        this.onWrongAnswer();\n                        for (let targetBlock of this.targetBlocks) {\n                            targetBlock['alreadyFilled'] = false;\n                            targetBlock['-block-']['-draggable-'] = true;\n                            targetBlock[\"-block-\"] = null;\n                        }\n                    });\n                    delayedCall(2750, () => {\n                        this.setInputEnabled(true);\n                    });\n                }\n            }\n            moveBridgeBackToStartPosition(block, onComplete, playSound) {\n                this.scene.tweens.add({\n                    targets: block,\n                    x: block['startPosition'].x,\n                    y: block['startPosition'].y,\n                    duration: 350,\n                    ease: Phaser.Math.Easing.Sine.Out,\n                    onComplete: () => {\n                        if (onComplete)\n                            onComplete();\n                    }\n                });\n                if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\n                    delayedCall(100, () => {\n                        if (playSound) {\n                            this.scene.sound.add(\"block goes back when released\").play();\n                        }\n                    });\n                }\n                this.placeAppleOverBuckets(block);\n            }\n            onCorrectAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = false;\n                this.tally[i].visible = true;\n                let completed = this.gameplay.onCorrectAnswer();\n                return completed;\n            }\n            onWrongAnswer() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                this.tallyEmptyArray[i].visible = true;\n                this.tallyEmptyArray[i].visible = true;\n                this.tally[i].visible = false;\n                let lost = this.gameplay.onWrongAnswer();\n                // this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\n                // this.soundWrongDrop.play();\n                // this.scene.sound.add(\"Goose no\").play();\n                if (this.idleDelayedCall != null) {\n                    destroyDelayedCall(this.idleDelayedCall);\n                    this.idleDelayedCall = null;\n                }\n                if (!lost) {\n                    delayedCall(650, () => this.playCorrectAudio());\n                }\n                return lost;\n            }\n            onCloseClick() {\n                this.showAreYouSurePage();\n                this.scene.sound.add('warning page pop up sfx').play();\n            }\n            createTallies() {\n                if (this.tally) {\n                    for (let te of this.tallyEmptyArray) {\n                        te.visible = false;\n                        this.bringToTop(te);\n                    }\n                    for (let t of this.tally) {\n                        t.visible = false;\n                        this.bringToTop(t);\n                    }\n                    return;\n                }\n                let startX = 26;\n                let startY = 148;\n                let dy = 34;\n                let tallyEmptyArrayPositions = [];\n                for (let i = 0; i < 12; i++) {\n                    tallyEmptyArrayPositions.push({ x: startX, y: startY + i * dy });\n                }\n                this.tallyEmptyArray = [];\n                this.tally = [];\n                for (let p of tallyEmptyArrayPositions) {\n                    let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\n                    this.tallyEmptyArray.push(_BeehiveEmpty);\n                    _BeehiveEmpty.visible = false;\n                    let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\n                    this.tally.push(_Beehive);\n                }\n                for (let bea of this.tallyEmptyArray) {\n                    this.add(bea);\n                }\n                for (let bee of this.tally) {\n                    this.add(bee);\n                    bee.visible = false;\n                }\n            }\n            hideAllUnusedTallies() {\n                let i = this.gameplay.getCurrentTotalAnswersCount();\n                for (let k = i + 1; k < this.tallyEmptyArray.length; k++) {\n                    this.tallyEmptyArray[k].visible = false;\n                    this.tally[k].visible = false;\n                }\n            }\n            showInstructionPage() {\n                setPageBackground(\"bg-blue\");\n                let playInstructionSound = () => {\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                    this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\n                    this.wfsnd.play();\n                };\n                this.instructionPage = new screen.InstructionPage(this.scene, (target) => {\n                    playBtnClickAnim(target);\n                    this.remove(this.instructionPage);\n                    this.showGameplay();\n                    if (this.wfsnd) {\n                        this.wfsnd.stop();\n                    }\n                }, (target) => {\n                    playBtnClickAnim(target);\n                    playInstructionSound();\n                });\n                this.add(this.instructionPage);\n                playInstructionSound();\n            }\n            showAreYouSurePage() {\n                pauseAllDelayedCalls();\n                setPageBackground(\"bg-blue\");\n                this.scene.tweens.pauseAll();\n                this.pauseSounds();\n                this.areYouSureWindow = new screen.AreYouSureWindow(this.scene, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.destroyGameplay();\n                    this.showInstructionPage();\n                }, () => {\n                    this.scene.tweens.resumeAll();\n                    this.remove(this.areYouSureWindow);\n                    this.unpauseSounds();\n                    resumeAllDelayedCalls();\n                    setPageBackground(\"bg-australia\");\n                });\n                this.add(this.areYouSureWindow);\n            }\n            setInputEnabled(enabled) {\n                if (enabled) {\n                    for (let a of this.selectableLetters)\n                        a.setInteractive({ cursor: 'pointer' });\n                }\n                else {\n                    for (let a of this.selectableLetters)\n                        a.disableInteractive();\n                }\n            }\n            pauseSounds() {\n                this.scene.sound.pauseAll();\n            }\n            unpauseSounds() {\n                this.scene.sound.resumeAll();\n            }\n            destroyGameplay() {\n                this.setInputEnabled(false);\n                this.remove(this.gameplayContainer);\n                this.scene.sound.stopAll();\n                destroyAllDelayedCalls();\n            }\n        }\n        screen.GameplayScreen = GameplayScreen;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class InstructionPage extends Phaser.GameObjects.Container {\n            constructor(scene, onPlayClick, onSndClick) {\n                super(scene);\n                this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0 - 105, 0 - 48, 'Instructions page  ALL ACTIVITY  TITLEs');\n                this._instructionPage.setOrigin(0, 0);\n                this._instructionPage.setInteractive();\n                this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\n                this._instructionPageTitle.setScale(0.75);\n                this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\n                this._btnPlay.setInteractive({ cursor: 'pointer' });\n                this._btnPlay.once('pointerup', onPlayClick);\n                setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\n                this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 30,\n                    \"color\": \"#43425D\",\n                    \"align\": 'center'\n                });\n                this.instrTxt.setOrigin(0.5, 0.5);\n                this.instrTxt.setWordWrapWidth(600);\n                this.instrTxt.setLineSpacing(5);\n                this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\n                this._btnSoundInstruction.setInteractive({ cursor: 'pointer' });\n                this._btnSoundInstruction.on('pointerup', onSndClick);\n                this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\n                setupButtonTextureBased(this._btnSoundInstruction, 'Sound', 'Sound HOVER EFFECT');\n                this.add(this._instructionPage);\n                this.add(this._instructionPageTitle);\n                this.add(this.instrTxt);\n                this.add(this._btnPlay);\n                this.add(this._btnSoundInstruction);\n            }\n        }\n        screen.InstructionPage = InstructionPage;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\nvar ctb;\n(function (ctb) {\n    var screen;\n    (function (screen) {\n        class TryAgainWindow extends Phaser.GameObjects.Container {\n            constructor(scene, onBack, onReplay) {\n                super(scene);\n                this.music = null;\n                this.setPosition(-106, -48);\n                this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\n                this._bg.setOrigin(0, 0);\n                this._bg.setInteractive();\n                this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\n                this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\n                this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\n                this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 35,\n                    \"color\": \"#F49F1C\",\n                    \"align\": 'center',\n                    'stroke': '#70451A',\n                    'strokeThickness': 6\n                });\n                this.totalScoreTxt.setOrigin(0.5, 0.5);\n                let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\n                grd.addColorStop(0, '#FFFF00');\n                grd.addColorStop(1, '#C17316');\n                this.totalScoreTxt.setFill(grd);\n                this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\n                    \"fontFamily\": \"Kids Rock Demo\",\n                    \"fontSize\": 24,\n                    \"color\": \"#FFFFFF\",\n                    \"align\": 'center'\n                });\n                this.starScoreTxt.setOrigin(0.5, 0.5);\n                this.add([\n                    this._bg,\n                    this._star,\n                    this._btnBack,\n                    this._btnReplay,\n                    this.totalScoreTxt,\n                    this.starScoreTxt\n                ]);\n                this._btnBack.setInteractive({ cursor: 'pointer' });\n                this._btnBack.on('pointerup', () => {\n                    onBack(this._btnBack);\n                    // if (this.music) {\n                    //     this.music.stop();\n                    // }\n                });\n                setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\n                this._btnReplay.setInteractive({ cursor: 'pointer' });\n                this._btnReplay.once('pointerup', () => {\n                    onReplay(this._btnReplay);\n                    if (this.music) {\n                        this.music.stop();\n                    }\n                });\n                setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\n            }\n            show(score, starScore) {\n                this._star.scale = 1.25;\n                this.scene.tweens.add({\n                    targets: this._star,\n                    \"scale\": 1,\n                    duration: 500,\n                    ease: Phaser.Math.Easing.Back.Out\n                });\n                this.totalScoreTxt.text = String(score);\n                this.starScoreTxt.text = String(starScore);\n                this.music = this.scene.sound.add(\"Fail - close one\");\n                this.music.play();\n            }\n        }\n        screen.TryAgainWindow = TryAgainWindow;\n    })(screen = ctb.screen || (ctb.screen = {}));\n})(ctb || (ctb = {}));\n","namespace ctb {\r\n    export class App extends Phaser.Game {\r\n\r\n        public static readonly CANVAS_WIDTH: number = 980;\r\n        public static readonly CANVAS_HEIGHT: number = 600;\r\n\r\n        constructor() {\r\n            let config: Phaser.Types.Core.GameConfig = {\r\n                type: Phaser.AUTO,\r\n                width: App.CANVAS_WIDTH,\r\n                height: App.CANVAS_HEIGHT,\r\n                parent: 'game-container',\r\n                dom: {\r\n                    createContainer: false\r\n                },\r\n                scale: {\r\n                    mode: FitScaleManager.detectBestScaleMode(),\r\n                    autoCenter: Phaser.Scale.CENTER_BOTH\r\n                },\r\n                transparent: true,\r\n                scene: {\r\n                    create: () => {\r\n                        this.scene.add('Boot', ctb.scene.Boot, true);\r\n                    }\r\n                }\r\n            };\r\n            super(config);\r\n        }\r\n    }\r\n}\r\n\r\nlet game: ctb.App;\r\nwindow.onload = () => {\r\n    game = new ctb.App();\r\n};\r\n\r\nlet delayedCalls = [];\r\nfunction delayedCall(delay: number, callback: Function, args?: any[], callbackScope?: any): Phaser.Time.TimerEvent | number {\r\n    let scene = game.scene.getAt(0);\r\n    if (scene) {\r\n        let dc = scene.time.delayedCall(delay, callback, args, callbackScope);\r\n        delayedCalls.push(dc);\r\n        return dc;\r\n    }\r\n    let t = setTimeout(callback, delay);\r\n    delayedCalls.push(t);\r\n    return t;\r\n}\r\nfunction pauseAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = true;\r\n        }\r\n    }\r\n}\r\nfunction resumeAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).paused = false;\r\n        }\r\n    }\r\n}\r\nfunction destroyAllDelayedCalls() {\r\n    for (let dc of delayedCalls) {\r\n        if (dc instanceof Phaser.Time.TimerEvent) {\r\n            (dc as Phaser.Time.TimerEvent).remove(false);\r\n        } else {\r\n            clearTimeout(dc);\r\n        }\r\n    }\r\n    delayedCalls = [];\r\n}\r\nfunction destroyDelayedCall(dc) {\r\n    if (dc instanceof Phaser.Time.TimerEvent) {\r\n        (dc as Phaser.Time.TimerEvent).remove(false);\r\n    } else {\r\n        clearTimeout(dc);\r\n    }\r\n    let ind = delayedCalls.indexOf(dc);\r\n    if (ind >= 0) delayedCalls.splice(ind, 1);\r\n}\r\n\r\nfunction setPageBackground(bg: string) {\r\n    document.querySelector(\"html\").style.backgroundImage = \"url(assets/imgs/\" + bg + \".jpg)\";\r\n}\r\n\r\nfunction setupButton(btn, frame) {\r\n    btn.on('pointerdown', ()=>{btn.setFrame(frame + '_hover' + '0000')});\r\n    btn.on('pointerover', ()=>{btn.setFrame(frame + '_hover' + '0000');game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setFrame(frame + '0000')});\r\n    btn.on('pointerup', ()=>{btn.setFrame(frame + '0000');game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\nfunction setupButtonTextureBased(btn:Phaser.GameObjects.Image, texture, hoverTexture) {\r\n    btn.on('pointerdown', ()=>{btn.setTexture(hoverTexture)});\r\n    btn.on('pointerover', ()=>{btn.setTexture(hoverTexture);game.scene.getAt(0).sound.add(\"button hover\").play();});\r\n    btn.on('pointerout', ()=>{btn.setTexture(texture)});\r\n    btn.on('pointerup', ()=>{btn.setTexture(texture);game.scene.getAt(0).sound.add('activity selection - button selection').play();});\r\n}\r\n\r\n\r\n\r\nfunction playBtnClickAnim(target): void {\r\n    let sc:number = target.hasOwnProperty(\"defScale\") ? target[\"defScale\"] : 1;\r\n    target.scaleX = target.scaleY = sc;\r\n    let scene = game.scene.getAt(0);\r\n    scene.tweens.add({\r\n        targets: target,\r\n        \"scaleX\": 0.9 * sc,\r\n        \"scaleY\": 0.9 * sc,\r\n        duration: 100,\r\n        yoyo: true\r\n    });\r\n}","/**\r\n * @author Roman Parada\r\n * This class is created to fix overlapping of bottom part of canvas by navigation bar in iOS.\r\n * It make a delayed resize of the canvas (like Phaser-3 FIT methods does) and it overrides Phaser-3 input window to Phaser-3 core transform methods\r\n *\r\n * How to use:\r\n * Just call the code line below in Boot scene's init() method of your project:\r\n * new FitScaleManager(this.game).setup();\r\n */\r\nclass FitScaleManager {\r\n\r\n    public static detectBestScaleMode():integer {\r\n        let iOS = /iPad|iPhone|iPod/.test(navigator.platform || \"\");\r\n        let isAndroid = window.navigator.userAgent.toLowerCase().indexOf(\"android\") > -1;\r\n        return iOS || isAndroid ? Phaser.Scale.FIT : Phaser.Scale.NONE;\r\n    };\r\n\r\n    private static RESIZE_DELAY: number = 500;\r\n\r\n    private game: Phaser.Game;\r\n\r\n    private canvasStyle: CSSStyleDeclaration;\r\n    private phaserScaleManager: Phaser.Scale.ScaleManager;\r\n\r\n    constructor(game: Phaser.Game) {\r\n        this.game = game;\r\n\r\n        this.canvasStyle = this.game.canvas.style;\r\n        this.phaserScaleManager = this.game.scale;\r\n    }\r\n\r\n    /**\r\n     * Just call this method once in Boot scene's init() method\r\n     */\r\n    public setup(): void {\r\n        this.phaserScaleManager.addListener(Phaser.Scale.Events.RESIZE, this.onResize, this);\r\n\r\n        this.overridePhaserTransformMethods();\r\n\r\n        this.onResize();\r\n    }\r\n\r\n    private calculateScale(): number {\r\n        if (game.scale.scaleMode == Phaser.Scale.NONE) return 1;\r\n\r\n        return Math.min(\r\n            window.innerWidth / this.phaserScaleManager.width,\r\n            window.innerHeight / this.phaserScaleManager.height\r\n        );\r\n    }\r\n\r\n    private overridePhaserTransformMethods(): void {\r\n        this.game.scale.transformX = (pageX: number) => {\r\n            return (pageX - parseInt(this.canvasStyle.marginLeft.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n        this.game.scale.transformY = (pageY: number) => {\r\n            return (pageY - parseInt(this.canvasStyle.marginTop.split(\"px\")[0])) / this.calculateScale();\r\n        };\r\n    }\r\n\r\n    private onResize(): void {\r\n        setTimeout(this.doResize, FitScaleManager.RESIZE_DELAY);\r\n    }\r\n\r\n    private doResize: () => void = () => {\r\n        let scale: number = this.calculateScale();\r\n\r\n        let newCanvasWidth: number = this.phaserScaleManager.width * scale;\r\n        let newCanvasHeight: number = this.phaserScaleManager.height * scale;\r\n\r\n        this.canvasStyle.width = newCanvasWidth + 'px';\r\n        this.canvasStyle.height = newCanvasHeight + 'px';\r\n\r\n        this.canvasStyle.marginLeft = (window.innerWidth - newCanvasWidth) / 2 + 'px';\r\n        this.canvasStyle.marginTop = (window.innerHeight - newCanvasHeight) / 2 + 'px';\r\n    };\r\n}","namespace ctb.core {\r\n    export class Gameplay {\r\n        public allLettersNames:string[] = null;\r\n\r\n        public totalRoundsNum:number;\r\n        public readonly failsNumToLose:number;\r\n\r\n        private currentRound:number = 0;\r\n        private letters:object[];\r\n        private rounds:object[];\r\n        public blockLetters:string[];\r\n        public correctWord:string;\r\n\r\n        private correctAnswersCount: number = 0;\r\n        private wrongAnswersCount: number = 0;\r\n        public correctAnswersCountThisRound: number = 0;\r\n        public wrongAnswersCountThisRound: number = 0;\r\n\r\n        private onComplete:(score:number, starScore:number)=>void;\r\n        private onLose:(score:number, starScore:number)=>void;\r\n        private onNewRound:()=>void = null;\r\n\r\n        public useImages:boolean;\r\n\r\n        private wordsLetters:object;\r\n        public getCorrectWordCharAt(at:number):string {\r\n            return this.wordsLetters[this.correctWord][at];\r\n        }\r\n        public getCorrectWordLettersNumber():number {\r\n            return this.wordsLetters[this.correctWord].length;\r\n        }\r\n\r\n        constructor() {\r\n            this.failsNumToLose = Number(game.cache.json.get('gameplay')[\"failsNumToLose\"]);\r\n            this.useImages = Boolean(game.cache.json.get('gameplay')[\"useImages\"]);\r\n        }\r\n\r\n        public setupCallbacks(onComplete:(score:number, starScore:number)=>void, onLose:(score:number, starScore:number)=>void, onNewRound:()=>void):void {\r\n            this.onComplete = onComplete;\r\n            this.onLose = onLose;\r\n            this.onNewRound = onNewRound;\r\n        }\r\n\r\n        public calculateScore():number {\r\n            return this.totalRoundsNum - this.wrongAnswersCount;\r\n        }\r\n\r\n        public onLettersPlaced():boolean {\r\n            if (this.correctAnswersCountThisRound == 1) {\r\n                this.currentRound++;\r\n                if (this.currentRound >= this.totalRoundsNum) {\r\n                    let score:number = this.calculateScore();\r\n                    this.onComplete(score, score);\r\n                    return true;\r\n                } else {\r\n                    this.nextLetter();\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public nextLetterDelay:number = 0;\r\n        public nextLetter():void {\r\n            let fn:()=>void = ()=>{\r\n                let thisRound = this.rounds.shift();\r\n                this.blockLetters = thisRound[\"blockLetters\"];\r\n                this.correctWord = thisRound[\"correctWord\"];\r\n\r\n                this.correctAnswersCountThisRound = 0;\r\n                this.wrongAnswersCountThisRound = 0;\r\n\r\n                if (this.onNewRound) this.onNewRound();\r\n            };\r\n            if (this.nextLetterDelay == 0) {\r\n                fn();\r\n            } else {\r\n                delayedCall(this.nextLetterDelay, fn);\r\n            }\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            this.correctAnswersCount++;\r\n            this.correctAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 3500;\r\n\r\n            return this.onLettersPlaced();\r\n        }\r\n\r\n        public onWrongAnswer(): boolean {\r\n            this.wrongAnswersCount++;\r\n            this.wrongAnswersCountThisRound++;\r\n\r\n            this.nextLetterDelay = 2000;\r\n\r\n            if (this.wrongAnswersCount >= this.failsNumToLose) {\r\n                this.onLose(0, 0);\r\n                return true;\r\n            } else {\r\n                this.onLettersPlaced();\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCount(): number {\r\n            return this.correctAnswersCount + this.wrongAnswersCount;\r\n        }\r\n\r\n        public getCurrentTotalAnswersCountThisRound(): number {\r\n            return this.correctAnswersCountThisRound + this.wrongAnswersCountThisRound;\r\n        }\r\n\r\n        public isNewRound():boolean {\r\n            return this.getCurrentTotalAnswersCountThisRound() == 0;\r\n        }\r\n\r\n        public isRoundsComplete():boolean {\r\n            return this.currentRound >= this.totalRoundsNum;\r\n        }\r\n\r\n        public getAudioKeyOfChar(letter:string):string {\r\n            let json = game.cache.json.get('gameplay');\r\n            let letters = json[\"letters\"];\r\n            for (let d of letters) {\r\n                if (letter == d['letterName']) {\r\n                    return d['audioKey'];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public reset():void {\r\n            this.nextLetterDelay = 0;\r\n            this.setupCallbacks(null, null, null);\r\n\r\n            let json = game.cache.json.get('gameplay');\r\n            this.wordsLetters = json[\"wordsLetters\"];\r\n            this.rounds = json[\"rounds\"].slice();\r\n            this.totalRoundsNum = this.rounds.length;\r\n            this.letters = json[\"letters\"].slice();\r\n            this.allLettersNames = [];\r\n            for (let d of this.letters) this.allLettersNames.push(d[\"letterName\"]);\r\n\r\n            this.nextLetter();\r\n\r\n            this.currentRound = 0;\r\n            this.correctAnswersCount = 0;\r\n            this.wrongAnswersCount = 0;\r\n            this.correctAnswersCountThisRound = 0;\r\n            this.wrongAnswersCountThisRound = 0;\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n    export class Boot extends Phaser.Scene {\r\n        init() {\r\n            this.game.scale.transformX = (pageX: number) => {\r\n                let offsetLeft: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetLeft) {\r\n                        offsetLeft = parentElement.offsetLeft;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageX - offsetLeft) * this.game.scale.displayScale.x;\r\n            };\r\n            this.game.scale.transformY = (pageY: number) => {\r\n                let offsetTop: number = 0;\r\n                let parentElement = game.canvas.parentElement;\r\n                while (parentElement) {\r\n                    if (parentElement.offsetTop) {\r\n                        offsetTop = parentElement.offsetTop;\r\n                        break;\r\n                    }\r\n                    parentElement = parentElement.parentElement;\r\n                }\r\n                return (pageY - offsetTop) * this.game.scale.displayScale.y;\r\n            };\r\n        }\r\n\r\n        create() {\r\n            game.scene.remove('Boot');\r\n            game.scene.add('Preloader', ctb.scene.Preloader, true);\r\n        }\r\n    }\r\n}","namespace ctb.scene {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import GameplayScreen = ctb.screen.GameplayScreen;\r\n\r\n    export class MainScene extends Phaser.Scene {\r\n\r\n        private gameplay:Gameplay;\r\n        private gameplayScreen:GameplayScreen;\r\n\r\n        public create():void {\r\n            this.gameplay = new Gameplay();\r\n\r\n            this.gameplayScreen = new ctb.screen.GameplayScreen(this, this.gameplay);\r\n            this.children.add(this.gameplayScreen);\r\n            this.gameplayScreen.showInstructionPage();\r\n        }\r\n\r\n        public update(): void {\r\n            this.gameplayScreen._update();\r\n        }\r\n    }\r\n}","module ctb.scene {\r\n\r\n    export class Preloader extends Phaser.Scene {\r\n\r\n        public static readonly ANIMS_DATA:object = {\r\n            'idle': {\r\n                'start': 0,\r\n                'end': 51,\r\n                'padNum': 4,\r\n                'prefix': 'idle',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'atlas-shake'\r\n            },\r\n            'yelling_wrong': {\r\n                'start': 0,\r\n                'end': 46,\r\n                'padNum': 4,\r\n                'prefix': 'yelling_wrong',\r\n                'repeat': 0,\r\n                'frameRate': 24,\r\n                'atlas': 'atlas-shake'\r\n            }\r\n        };\r\n\r\n        preload() {\r\n            this.load.json('gameplay', 'assets/json/gameplay.json');\r\n        }\r\n\r\n        create() {\r\n            let json = game.cache.json.get('gameplay');\r\n            if (json[\"useImages\"]) {\r\n                for (let l of json[\"letters\"]) {\r\n                    this.load.image(l[\"letterName\"], \"assets/imgs/letters/\"+l[\"letterName\"]+\".png\");\r\n                }\r\n                for (let r of json[\"rounds\"]) {\r\n                    this.load.image(r[\"correctWord\"], \"assets/imgs/words/\"+r[\"correctWord\"]+\".png\");\r\n                }\r\n            }\r\n            for (let l of json[\"letters\"]) {\r\n                this.load.audio(l[\"audioKey\"], \"assets/sound/mp3/letters/\"+l[\"audioKey\"]+\".mp3\");\r\n            }\r\n            for (let r of json[\"rounds\"]) {\r\n                this.load.audio(r[\"correctWord\"], \"assets/sound/mp3/words/\"+r[\"correctWord\"]+\".mp3\");\r\n            }\r\n\r\n            let progressTxt:Phaser.GameObjects.Text = this.add.text(game.scale.width/2, game.scale.height/2, \"\", {\r\n                \"fontFamily\": \"Quran Era font\",\r\n                \"fontSize\": 25,\r\n                \"color\": \"#000000\",\r\n                \"align\": 'center'\r\n            });\r\n            progressTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.load.pack('preloader', 'assets/pack.json');\r\n\r\n            this.load.on('progress', (value:number) => {\r\n                progressTxt.text = Math.ceil(value * 100) + \"%\";\r\n            }, this);\r\n\r\n            this.load.on('complete', () => {\r\n                this.nextScene();\r\n            });\r\n\r\n            this.load.start();\r\n        }\r\n\r\n        public static playAnim(animKey:string, sprite:Phaser.GameObjects.Sprite, onComplete:()=>void = null):Phaser.GameObjects.Sprite {\r\n            let mainScene = game.scene.getScene('ScreenMain');\r\n            if (!mainScene.anims.exists(animKey)) {\r\n                let data = Preloader.ANIMS_DATA[animKey];\r\n                mainScene.anims.create({\r\n                    key: animKey,\r\n                    frames: mainScene.anims.generateFrameNames(data['atlas'], {\r\n                        start: data['start'], end: data['end'], zeroPad: data['padNum'],\r\n                        prefix: data['prefix'], suffix: ''\r\n                    }),\r\n                    frameRate: data['frameRate'],\r\n                    repeat: data['repeat']\r\n                });\r\n            }\r\n            if (sprite.anims.currentAnim) {\r\n                sprite.anims.currentAnim.off('complete');\r\n            }\r\n            sprite.anims.stop();\r\n            sprite.play(animKey);\r\n            sprite.anims.currentAnim.once('complete', ()=>{\r\n                if (onComplete) onComplete();\r\n            });\r\n            return sprite;\r\n        }\r\n\r\n        private nextScene():void {\r\n            game.scene.remove('Preloader');\r\n            game.scene.add('ScreenMain', ctb.scene.MainScene, true);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class AreYouSureWindow extends Phaser.GameObjects.Container {\r\n\r\n        private _areYouSurePage: Phaser.GameObjects.Image;\r\n        private _btnSureYes: Phaser.GameObjects.Image;\r\n        private _btnSureNo: Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, onYes:()=>void, onNo:()=>void) {\r\n            super(scene);\r\n\r\n            this._areYouSurePage = new Phaser.GameObjects.Image(this.scene, -105, 0-48, 'Exit warning');\r\n            this._areYouSurePage.setOrigin(0, 0);\r\n            this._areYouSurePage.setInteractive();\r\n\r\n            this._btnSureYes = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 - 95, 485-50, 'btnYES1');\r\n            this._btnSureYes.setInteractive({cursor: 'pointer'});\r\n            this._btnSureYes.once('pointerup', onYes);\r\n            setupButtonTextureBased(this._btnSureYes, 'btnYES1', 'btnYES2');\r\n\r\n            this._btnSureNo = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2 + 95, 485-50, 'btnNO1');\r\n            this._btnSureNo.setInteractive({cursor: 'pointer'});\r\n            this._btnSureNo.once('pointerup', onNo);\r\n            setupButtonTextureBased(this._btnSureNo, 'btnNO1', 'btnNO2');\r\n\r\n            this.add(this._areYouSurePage);\r\n            this.add(this._btnSureYes);\r\n            this.add(this._btnSureNo);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class CompleteWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bgComplete:Phaser.GameObjects.Image;\r\n        _cup:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n        _btnNext:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void, onNext:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-104.5, -48);\r\n\r\n            this._bgComplete = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Completion page LATEST UPDATED');\r\n            this._bgComplete.setOrigin(0, 0);\r\n            this._bgComplete.setInteractive();\r\n            this._cup = new Phaser.GameObjects.Image(this.scene, 400, 410, 'Trophy');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 570, 570, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 720, 570, 'btnReplay1');\r\n            this._btnNext = new Phaser.GameObjects.Image(this.scene, 870, 570, 'btnNEXT1');\r\n\r\n            let _CollectedPoints = new Phaser.GameObjects.Image(this.scene, 620, 440, 'Collected Points');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(845, 352, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(648, 433, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bgComplete,\r\n                _CollectedPoints,\r\n                this._cup,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this._btnNext,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n            this._btnNext.setInteractive({cursor: 'pointer'});\r\n            this._btnNext.on('pointerup', ()=>{\r\n                onNext(this._btnNext);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnNext, 'btnNEXT1', 'btnNEXT2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._cup.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._cup,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            // let music = this.scene.sound.add(\"viktory\");\r\n            this.music = this.scene.sound.add(\"Activity completion fantastic\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n\r\n    import Gameplay = ctb.core.Gameplay;\r\n    import Preloader = ctb.scene.Preloader;\r\n\r\n    export class GameplayScreen extends Phaser.GameObjects.Container {\r\n        _gameStage: Phaser.GameObjects.Image;\r\n        _btnClose: Phaser.GameObjects.Image;\r\n\r\n        private gameplayContainer: Phaser.GameObjects.Container;\r\n\r\n        gameplay: Gameplay;\r\n\r\n        _btnSound: Phaser.GameObjects.Image;\r\n\r\n        selectableLetters:Phaser.GameObjects.Container[];\r\n        targetBlocks:object[];\r\n\r\n        private bgMusic:any = null;\r\n\r\n        private character:Phaser.GameObjects.Sprite;\r\n\r\n        tallyEmptyArray: Phaser.GameObjects.Image[];\r\n        tally: Phaser.GameObjects.Image[];\r\n\r\n        longIce:Phaser.GameObjects.Image;\r\n\r\n        constructor(scene: Phaser.Scene, gameplay: Gameplay) {\r\n            super(scene);\r\n            this.gameplay = gameplay;window[\"gs\"]=this;\r\n\r\n            this._gameStage = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, game.scale.height / 2, 'BG');\r\n            this._gameStage.setOrigin(0.5, 0.5);\r\n            this._gameStage.setScale(1.02);\r\n            this._gameStage.setInteractive();\r\n            this.add(this._gameStage);\r\n\r\n            this._btnClose = new Phaser.GameObjects.Image(this.scene, 1025-105, 100-50,'x Button');\r\n            this._btnClose.setInteractive({cursor: 'pointer'});\r\n            this._btnClose[\"defScale\"] = this._btnClose.scale;\r\n            setupButtonTextureBased(this._btnClose, 'x Button','x Button HOVER EFFECT');\r\n            this.add(this._btnClose);\r\n            this._btnClose.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnClose);\r\n\r\n                this.onCloseClick();\r\n            });\r\n            this._btnSound = new Phaser.GameObjects.Image(this.scene, 160-105, 100-50, 'Sound');\r\n            this._btnSound.setInteractive({cursor: 'pointer'});\r\n            this._btnSound[\"defScale\"] = this._btnSound.scale;\r\n            setupButtonTextureBased(this._btnSound, 'Sound','Sound HOVER EFFECT');\r\n            this.add(this._btnSound);\r\n            this._btnSound.on('pointerup', () => {\r\n                playBtnClickAnim(this._btnSound);\r\n\r\n                this.onSoundClick();\r\n            });\r\n        }\r\n\r\n\r\n        private correctAudio = null;\r\n        private correctAudioWord = null;\r\n        private playCorrectAudio():void {\r\n            if (this.correctAudio) {\r\n                this.correctAudio.stop();\r\n            }\r\n            this.correctAudio = this.scene.sound.add('Make the word map');\r\n            this.correctAudio.play();\r\n            if (this.areYouSureWindow && this.areYouSureWindow.parentContainer == this) {\r\n                this.correctAudio.pause();\r\n            }\r\n\r\n            if (this.correctAudioWord) this.correctAudioWord.stop();\r\n        }\r\n\r\n        public onSoundClick(): void {\r\n            this.playCorrectAudio();\r\n        }\r\n\r\n        private idleDelayedCall = null;\r\n        private playIdle:()=>void = ()=>{\r\n            this.character.setOrigin(0.5, 0.5);\r\n            Preloader.playAnim('idle', this.character, ()=>{\r\n                this.idleDelayedCall = delayedCall(5000, ()=>{\r\n                    this.playIdle();\r\n                });\r\n            });\r\n        };\r\n\r\n        public showGameplay(): void {\r\n            setPageBackground(\"bg-australia\");\r\n\r\n            this.bgMusic = this.scene.sound.add(\"Winter bg sound\");\r\n            this.bgMusic.play();\r\n            this.bgMusic.loop = true;\r\n\r\n            this.gameplayContainer = new Phaser.GameObjects.Container(this.scene);\r\n            this.add(this.gameplayContainer);\r\n\r\n            this.gameplay.reset();\r\n\r\n            this.prepareRound();\r\n            this.gameplay.setupCallbacks(this.showCompleteWindow, this.showLoseWindow, ()=>{\r\n                this.onNewRound(true);\r\n            });\r\n\r\n            this.createTallies();\r\n        }\r\n\r\n        public prepareRound():void {\r\n            delayedCall(500, ()=>this.playCorrectAudio());\r\n\r\n            this.gameplayContainer.removeAll();\r\n\r\n            this.character = this.scene.add.sprite(0, 0, null);\r\n            this.character.setPosition(750, 310);\r\n            this.playIdle();\r\n\r\n            this.longIce = new Phaser.GameObjects.Image(this.scene, 110, 147, 'Long Ice');\r\n            this.longIce.setOrigin(0, 0);\r\n            this.longIce.alpha = 0;\r\n            this.gameplayContainer.add(this.longIce);\r\n\r\n            let randomizedLetter:string[] = Phaser.Utils.Array.Shuffle(this.gameplay.blockLetters.slice());\r\n\r\n            if (this.gameplay.useImages) {\r\n                let correctWord = new Phaser.GameObjects.Image(this.scene, 750, 180, this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            } else {\r\n                let correctWord:Phaser.GameObjects.Text = this.scene.add.text(750, 180, \"\", {\r\n                    \"fontFamily\": \"Quran Era font\",\r\n                    \"fontSize\": 90 as any,\r\n                    \"color\": \"#000000\",\r\n                    \"align\": 'center'\r\n                });\r\n                correctWord.setOrigin(0.5, 0.5);\r\n                correctWord.style.fixedHeight = 140;\r\n                correctWord.setText(this.gameplay.correctWord);\r\n                this.gameplayContainer.add(correctWord);\r\n            }\r\n\r\n\r\n            this.selectableLetters = [];\r\n            this.targetBlocks = [];\r\n            for (let i:number = 0; i < this.gameplay.getCorrectWordLettersNumber(); i++) {\r\n                let b = {\r\n                    x:174 + i * 133, y:215\r\n                };\r\n                b['alreadyFilled'] = false;\r\n                this.targetBlocks.push(b);\r\n                b[\"-letter-text\"] = this.gameplay.getCorrectWordCharAt(i);\r\n                b[\"-block-\"] = null;\r\n            }\r\n            for (let i:number = 0; i < randomizedLetter.length; i++) {\r\n                let a:Phaser.GameObjects.Container = new Phaser.GameObjects.Container(this.scene, 100 + i * 150, 525);\r\n                a.add(a[\"-image-\"] = new Phaser.GameObjects.Image(this.scene, 0, 0,'IceBlock'));\r\n                a[\"-image-\"].setOrigin(0.5, 0.5);\r\n                this.selectableLetters.push(a);\r\n\r\n                let txt:Phaser.GameObjects.Text | Phaser.GameObjects.Image;\r\n                if (this.gameplay.useImages) {\r\n                    txt = new Phaser.GameObjects.Image(this.scene, 0, 0, randomizedLetter[i]);\r\n                    a.add(txt);\r\n                } else {\r\n                    txt = this.scene.add.text(0, 0, \"\", {\r\n                        \"fontFamily\": \"Quran Era font\",\r\n                        \"fontSize\": 55 as any,\r\n                        \"color\": \"#000000\",\r\n                        \"align\": 'center'\r\n                    });\r\n                    txt.setOrigin(0.5, 0.5);\r\n                    txt.style.fixedHeight = 75;\r\n                    txt.setText(randomizedLetter[i]);\r\n                    a.add(txt);\r\n                }\r\n                a['startPosition'] = {x:a.x, y:a.y};\r\n\r\n                a[\"-letter-\"] = txt;\r\n                a[\"-letter-text\"] = randomizedLetter[i];\r\n                this.gameplayContainer.add(a);\r\n                a['-draggable-'] = true;\r\n            }\r\n\r\n            for (let a of this.selectableLetters) {\r\n                a.setSize(a[\"-image-\"].width, a[\"-image-\"].height);\r\n                a.setInteractive({cursor: 'pointer'});\r\n                this.scene.input.setDraggable(a);\r\n\r\n                a.on('pointerdown', () => {\r\n                    a['-pointerdown-'] = true;\r\n                    if (a['-draggable-']) this.scene.sound.add(\"drag from its spot\").play();\r\n                });\r\n                a.on('pointerup', () => {\r\n                    a['-pointerdown-'] = false;\r\n                    if (!a['-draggable-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null, true);\r\n                });\r\n                a.on('pointerout', () => {\r\n                    if (!a['-draggable-']) return;\r\n                    if (!a['-pointerdown-']) return;\r\n                    this.moveBridgeBackToStartPosition(a, null, true);\r\n                });\r\n            }\r\n\r\n            this.createInput();\r\n            this.setInputEnabled(false);\r\n\r\n            // delayedCall(1200, ()=>{\r\n\r\n            if (this.gameplay.isNewRound()) {\r\n                if (!this.gameplay.isRoundsComplete()) {\r\n                    // delayedCall(2000, ()=>{\r\n                    this.setInputEnabled(true);\r\n                    // });\r\n                }\r\n            } else {\r\n                this.setInputEnabled(true);\r\n            }\r\n            // });\r\n\r\n            this.gameplayContainer.add(this.character);\r\n        }\r\n\r\n        public _update() {\r\n            if (this.selectableLetters) {\r\n                for (let a of this.selectableLetters) {\r\n                    if (a.x < 0 + a[\"-image-\"].width/2) {\r\n                        a.x = 0 + a[\"-image-\"].width/2;\r\n                    } else if (a.x > game.scale.width - a[\"-image-\"].width/2) {\r\n                        a.x = game.scale.width - a[\"-image-\"].width/2;\r\n                    }\r\n                    if (a.y < 0 + a[\"-image-\"].height/2) {\r\n                        a.y = a[\"-image-\"].height/2;\r\n                    } else if (a.y > game.scale.height - a[\"-image-\"].height/2) {\r\n                        a.y = game.scale.height - a[\"-image-\"].height/2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public placeAppleOverBuckets(a):void {\r\n            if (!a.parentContainer) return;\r\n            this.gameplayContainer.remove(a);\r\n            this.gameplayContainer.addAt(a, this.gameplayContainer.length);\r\n        }\r\n\r\n        private onNewRound(showOut:boolean):void {\r\n            this.scene.sound.add(\"next_round\").play();\r\n\r\n            this.setInputEnabled(false);\r\n\r\n            if (showOut) {\r\n                this.prepareRound();\r\n            }\r\n        }\r\n\r\n        public createInput(): void {\r\n            this.scene.input.on('drag', (pointer, block, dragX, dragY) => {\r\n                if (!block['-draggable-']) return;\r\n\r\n                block.x = dragX;\r\n                block.y = dragY;\r\n                this.gameplayContainer.bringToTop(block);\r\n\r\n                let targetBlock:any;\r\n                for (targetBlock of this.targetBlocks) {\r\n                    if (targetBlock['alreadyFilled']) continue;\r\n\r\n                    if (Math.abs(block.x - targetBlock.x) < 25 && Math.abs(block.y - targetBlock.y) < 60 && (block.y > targetBlock.y - 7)) {\r\n                        block['-draggable-'] = false;\r\n\r\n                        targetBlock['alreadyFilled'] = true;\r\n\r\n                        this.scene.tweens.add({\r\n                            targets: block,\r\n                            x: targetBlock.x,\r\n                            y: targetBlock.y,\r\n                            duration: 300,\r\n                            ease: Phaser.Math.Easing.Back.Out\r\n                        });\r\n\r\n                        targetBlock[\"-block-\"] = block;\r\n\r\n                        this.checkTargetBlockLetters();\r\n                    }\r\n                }\r\n            });\r\n\r\n\r\n            this._btnClose.setInteractive({cursor: 'pointer', pixelPerfect:true});\r\n        }\r\n\r\n        private checkTargetBlockLetters():void {\r\n            let sameLettersNum:number = 0;\r\n            for (let targetBlock of this.targetBlocks) {\r\n                if (!targetBlock['-block-']) {\r\n                    this.scene.sound.add(\"Placing block above\").play();\r\n                    return;\r\n                }\r\n\r\n                if (targetBlock[\"-letter-text\"] == targetBlock['-block-'][\"-letter-text\"]) {\r\n                    sameLettersNum++;\r\n                }\r\n            }\r\n            this.setInputEnabled(false);\r\n            if (sameLettersNum == this.targetBlocks.length) {\r\n                this.scene.sound.add(\"Placing block above\").play();\r\n\r\n                this.scene.tweens.add({\r\n                    targets: this.longIce,\r\n                    alpha: 1,\r\n                    duration: 250,\r\n                    ease: Phaser.Math.Easing.Linear,\r\n                });\r\n\r\n                for (let targetBlock of this.targetBlocks) {\r\n                    this.scene.tweens.add({\r\n                        targets: targetBlock['-block-'][\"-image-\"],\r\n                        alpha: 0,\r\n                        duration: 250,\r\n                        ease: Phaser.Math.Easing.Linear\r\n                    });\r\n\r\n                    if (targetBlock == this.targetBlocks[1]) continue;\r\n\r\n                    this.scene.tweens.add({\r\n                        targets: targetBlock['-block-'],\r\n                        x: this.targetBlocks[1]['x'],\r\n                        duration: 250,\r\n                        alpha: 0,\r\n                        ease: Phaser.Math.Easing.Sine.Out,\r\n                        delay: 250\r\n                    });\r\n                    delayedCall(500, ()=>{\r\n                        if (this.gameplay.useImages) {\r\n                            (this.targetBlocks[1]['-block-'][\"-letter-\"] as Phaser.GameObjects.Image).setTexture(this.gameplay.correctWord);\r\n                        } else {\r\n                            (this.targetBlocks[1]['-block-'][\"-letter-\"] as Phaser.GameObjects.Text).setText(this.gameplay.correctWord);\r\n                        }\r\n                    });\r\n                }\r\n                this.scene.sound.add(\"Letters joining sound\").play();\r\n                delayedCall(250, ()=>this.scene.sound.add(\"Correct click\").play())\r\n                delayedCall(1000, ()=>this.scene.sound.add(\"success for corect word\").play());\r\n                this.onCorrectAnswer();\r\n            } else {\r\n\r\n                this.scene.sound.add(\"placed- wrong- snake - blocks go back\").play();\r\n\r\n                // this.scene.sound.add(\"Wrong attempt\").play();\r\n                delayedCall(2400, ()=>{\r\n                    for (let targetBlock of this.targetBlocks) {\r\n                        this.moveBridgeBackToStartPosition(targetBlock['-block-'], null, false);\r\n                    }\r\n                    // delayedCall(100, ()=>this.scene.sound.add(\"all three blocks move back after wrong\").play());\r\n                });\r\n\r\n                delayedCall(1500, ()=>{\r\n                    this.character.setOrigin(0.49, 0.515);\r\n                    Preloader.playAnim('yelling_wrong', this.character, ()=>{\r\n                        this.playIdle();\r\n                    });\r\n                    // this.scene.sound.add(\"Snake animation sfx\").play();\r\n                });\r\n\r\n                delayedCall(2500, ()=>{\r\n                    this.onWrongAnswer();\r\n\r\n                    for (let targetBlock of this.targetBlocks) {\r\n                        targetBlock['alreadyFilled'] = false;\r\n                        targetBlock['-block-']['-draggable-'] = true;\r\n                        targetBlock[\"-block-\"] = null;\r\n                    }\r\n                });\r\n\r\n                delayedCall(2750, ()=>{\r\n                    this.setInputEnabled(true);\r\n                });\r\n            }\r\n        }\r\n\r\n        private moveBridgeBackToStartPosition(block, onComplete, playSound):void {\r\n            this.scene.tweens.add({\r\n                targets: block,\r\n                x: block['startPosition'].x,\r\n                y: block['startPosition'].y,\r\n                duration: 350,\r\n                ease: Phaser.Math.Easing.Sine.Out,\r\n                onComplete:()=>{\r\n                    if (onComplete) onComplete();\r\n                }\r\n            });\r\n            if (Phaser.Math.Distance.Between(block['startPosition'].x, block['startPosition'].y, block.x, block.y) > 20) {\r\n                delayedCall(100, ()=>{\r\n                    if (playSound) {\r\n                        this.scene.sound.add(\"block goes back when released\").play();\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            this.placeAppleOverBuckets(block);\r\n        }\r\n\r\n        public onCorrectAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = false;\r\n            this.tally[i].visible = true;\r\n\r\n            let completed:boolean = this.gameplay.onCorrectAnswer();\r\n\r\n            return completed;\r\n        }\r\n\r\n        private soundWrongDrop = null;\r\n        public onWrongAnswer(): boolean {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tallyEmptyArray[i].visible = true;\r\n            this.tally[i].visible = false;\r\n\r\n            let lost:boolean = this.gameplay.onWrongAnswer();\r\n\r\n            // this.soundWrongDrop = this.scene.sound.add(\"wrong drop\");\r\n            // this.soundWrongDrop.play();\r\n            // this.scene.sound.add(\"Goose no\").play();\r\n\r\n            if (this.idleDelayedCall != null) {\r\n                destroyDelayedCall(this.idleDelayedCall);\r\n                this.idleDelayedCall = null;\r\n            }\r\n\r\n            if (!lost) {\r\n                delayedCall(650, ()=>this.playCorrectAudio());\r\n            }\r\n\r\n            return lost;\r\n        }\r\n\r\n        public onCloseClick(): void {\r\n            this.showAreYouSurePage();\r\n            this.scene.sound.add('warning page pop up sfx').play();\r\n        }\r\n\r\n        private createTallies(): void {\r\n            if (this.tally) {\r\n                for (let te of this.tallyEmptyArray) {\r\n                    te.visible = false;\r\n                    this.bringToTop(te);\r\n                }\r\n                for (let t of this.tally) {\r\n                    t.visible = false;\r\n                    this.bringToTop(t);\r\n                }\r\n                return;\r\n            }\r\n\r\n            let startX: number = 26;\r\n            let startY: number = 148;\r\n            let dy: number = 34;\r\n            let tallyEmptyArrayPositions = [];\r\n            for (let i = 0; i < 12; i++) {\r\n                tallyEmptyArrayPositions.push({x: startX, y: startY + i * dy});\r\n            }\r\n            this.tallyEmptyArray = [];\r\n            this.tally = [];\r\n\r\n            for (let p of tallyEmptyArrayPositions) {\r\n                let _BeehiveEmpty = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally Empty');\r\n                this.tallyEmptyArray.push(_BeehiveEmpty);\r\n                _BeehiveEmpty.visible = false;\r\n\r\n                let _Beehive = new Phaser.GameObjects.Image(this.scene, p['x'], p['y'], 'tally');\r\n                this.tally.push(_Beehive);\r\n            }\r\n\r\n            for (let bea of this.tallyEmptyArray) {\r\n                this.add(bea);\r\n            }\r\n            for (let bee of this.tally) {\r\n                this.add(bee);\r\n                bee.visible = false;\r\n            }\r\n        }\r\n\r\n        public hideAllUnusedTallies():void {\r\n            let i: number = this.gameplay.getCurrentTotalAnswersCount();\r\n            for (let k:number = i + 1; k < this.tallyEmptyArray.length; k++) {\r\n                this.tallyEmptyArray[k].visible = false;\r\n                this.tally[k].visible = false;\r\n            }\r\n        }\r\n\r\n        private wfsnd = null;\r\n        private instructionPage: InstructionPage;\r\n        public showInstructionPage(): void {\r\n            setPageBackground(\"bg-blue\");\r\n\r\n            let playInstructionSound:()=>void = ()=>{\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n                this.wfsnd = this.scene.sound.add(\"Drag the ice blocks to make the word\");\r\n                this.wfsnd.play();\r\n            };\r\n\r\n            this.instructionPage = new InstructionPage(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.remove(this.instructionPage);\r\n                this.showGameplay();\r\n\r\n                if (this.wfsnd) {\r\n                    this.wfsnd.stop();\r\n                }\r\n            },(target) => {\r\n                playBtnClickAnim(target);\r\n                playInstructionSound();\r\n            });\r\n            this.add(this.instructionPage);\r\n            playInstructionSound();\r\n        }\r\n\r\n        private areYouSureWindow:AreYouSureWindow;\r\n        public showAreYouSurePage(): void {\r\n            pauseAllDelayedCalls();\r\n            setPageBackground(\"bg-blue\");\r\n            this.scene.tweens.pauseAll();\r\n\r\n            this.pauseSounds();\r\n\r\n            this.areYouSureWindow = new AreYouSureWindow(this.scene, ()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.destroyGameplay();\r\n                this.showInstructionPage();\r\n            },()=> {\r\n                this.scene.tweens.resumeAll();\r\n                this.remove(this.areYouSureWindow);\r\n                this.unpauseSounds();\r\n                resumeAllDelayedCalls();\r\n                setPageBackground(\"bg-australia\");\r\n            });\r\n            this.add(this.areYouSureWindow);\r\n        }\r\n\r\n        public showCompleteWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let completeWindow: CompleteWindow = new CompleteWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(completeWindow);\r\n                this.showInstructionPage();\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(2000, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(completeWindow);\r\n                completeWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public showLoseWindow: (score: number, starScore: number) => void = (score: number, starScore: number) => {\r\n            let tryAgainWindow: TryAgainWindow = new TryAgainWindow(this.scene, (target) => {\r\n                playBtnClickAnim(target);\r\n            }, (target) => {\r\n                playBtnClickAnim(target);\r\n                this.destroyGameplay();\r\n                this.remove(tryAgainWindow);\r\n                this.showInstructionPage();\r\n            });\r\n            this.setInputEnabled(false);\r\n            delayedCall(1500, () => {\r\n                setPageBackground(\"bg-blue\");\r\n\r\n                this.add(tryAgainWindow);\r\n                tryAgainWindow.show(score, starScore);\r\n\r\n                this.bgMusic.stop();\r\n            });\r\n        };\r\n\r\n        public setInputEnabled(enabled: boolean): void {\r\n            if (enabled) {\r\n                for (let a of this.selectableLetters) a.setInteractive({cursor: 'pointer'});\r\n            } else {\r\n                for (let a of this.selectableLetters) a.disableInteractive();\r\n            }\r\n        }\r\n\r\n        public pauseSounds():void {\r\n            this.scene.sound.pauseAll();\r\n        }\r\n\r\n        public unpauseSounds():void {\r\n            this.scene.sound.resumeAll();\r\n        }\r\n\r\n        public destroyGameplay():void {\r\n            this.setInputEnabled(false);\r\n            this.remove(this.gameplayContainer);\r\n            this.scene.sound.stopAll();\r\n            destroyAllDelayedCalls();\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class InstructionPage extends Phaser.GameObjects.Container {\r\n\r\n        private _instructionPage: Phaser.GameObjects.Image;\r\n        private _instructionPageTitle: Phaser.GameObjects.Image;\r\n        private _btnPlay: Phaser.GameObjects.Image;\r\n        private _btnSoundInstruction: Phaser.GameObjects.Image;\r\n        private instrTxt: Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onPlayClick:(target)=>void, onSndClick:(target)=>void) {\r\n            super(scene);\r\n\r\n            this._instructionPage = new Phaser.GameObjects.Image(this.scene, 0-105, 0-48, 'Instructions page  ALL ACTIVITY  TITLEs');\r\n            this._instructionPage.setOrigin(0, 0);\r\n            this._instructionPage.setInteractive();\r\n\r\n            this._instructionPageTitle = new Phaser.GameObjects.Image(this.scene, 495, 105, 'Ice Blocks');\r\n            this._instructionPageTitle.setScale(0.75);\r\n\r\n            this._btnPlay = new Phaser.GameObjects.Image(this.scene, game.scale.width / 2, 480 - 50, 'btnPLAY1');\r\n            this._btnPlay.setInteractive({cursor: 'pointer'});\r\n            this._btnPlay.once('pointerup', onPlayClick);\r\n            setupButtonTextureBased(this._btnPlay, 'btnPLAY1', 'btnPLAY2');\r\n\r\n            this.instrTxt = this.scene.add.text(game.scale.width / 2, game.scale.height / 2, \"Drag the ice blocks to make the word.\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 30,\r\n                \"color\": \"#43425D\",\r\n                \"align\": 'center'\r\n            });\r\n            this.instrTxt.setOrigin(0.5, 0.5);\r\n            this.instrTxt.setWordWrapWidth(600);\r\n            this.instrTxt.setLineSpacing(5);\r\n\r\n            this._btnSoundInstruction = new Phaser.GameObjects.Image(this.scene, 800 - 105, 156 - 50, 'Sound');\r\n            this._btnSoundInstruction.setInteractive({cursor: 'pointer'});\r\n            this._btnSoundInstruction.on('pointerup', onSndClick);\r\n            this._btnSoundInstruction[\"defScale\"] = this._btnSoundInstruction.scale;\r\n            setupButtonTextureBased(this._btnSoundInstruction, 'Sound','Sound HOVER EFFECT');\r\n\r\n            this.add(this._instructionPage);\r\n            this.add(this._instructionPageTitle);\r\n            this.add(this.instrTxt);\r\n            this.add(this._btnPlay);\r\n            this.add(this._btnSoundInstruction);\r\n        }\r\n    }\r\n}","namespace ctb.screen {\r\n    export class TryAgainWindow extends Phaser.GameObjects.Container {\r\n\r\n        _bg:Phaser.GameObjects.Image;\r\n        _star:Phaser.GameObjects.Image;\r\n        _btnBack:Phaser.GameObjects.Image;\r\n        _btnReplay:Phaser.GameObjects.Image;\r\n\r\n        totalScoreTxt:Phaser.GameObjects.Text;\r\n        starScoreTxt:Phaser.GameObjects.Text;\r\n\r\n        constructor(scene: Phaser.Scene, onBack:(target)=>void, onReplay:(target)=>void) {\r\n            super(scene);\r\n\r\n            this.setPosition(-106, -48);\r\n\r\n            this._bg = new Phaser.GameObjects.Image(this.scene, 0, 0, 'Try again page');\r\n            this._bg.setOrigin(0, 0);\r\n            this._bg.setInteractive();\r\n            this._star = new Phaser.GameObjects.Image(this.scene, 400, 415, 'Break Star');\r\n            this._btnBack = new Phaser.GameObjects.Image(this.scene, 600, 580, 'btnBACK1');\r\n            this._btnReplay = new Phaser.GameObjects.Image(this.scene, 765, 580, 'btnReplay1');\r\n\r\n            this.totalScoreTxt = this.scene.add.text(830, 355, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 35,\r\n                \"color\": \"#F49F1C\",\r\n                \"align\": 'center',\r\n                'stroke': '#70451A',\r\n                'strokeThickness': 6\r\n            });\r\n            this.totalScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            let grd = this.totalScoreTxt.context.createLinearGradient(0, 0, 0, this.totalScoreTxt.height);\r\n            grd.addColorStop(0, '#FFFF00');\r\n            grd.addColorStop(1, '#C17316');\r\n            this.totalScoreTxt.setFill(grd);\r\n\r\n            this.starScoreTxt = this.scene.add.text(635, 431, \"\", {\r\n                \"fontFamily\": \"Kids Rock Demo\",\r\n                \"fontSize\": 24,\r\n                \"color\": \"#FFFFFF\",\r\n                \"align\": 'center'\r\n            });\r\n            this.starScoreTxt.setOrigin(0.5, 0.5);\r\n\r\n            this.add([\r\n                this._bg,\r\n                this._star,\r\n                this._btnBack,\r\n                this._btnReplay,\r\n                this.totalScoreTxt,\r\n                this.starScoreTxt\r\n            ]);\r\n\r\n            this._btnBack.setInteractive({cursor: 'pointer'});\r\n            this._btnBack.on('pointerup', ()=>{\r\n                onBack(this._btnBack);\r\n                // if (this.music) {\r\n                //     this.music.stop();\r\n                // }\r\n            });\r\n            setupButtonTextureBased(this._btnBack, 'btnBACK1', 'btnBACK2');\r\n            this._btnReplay.setInteractive({cursor: 'pointer'});\r\n            this._btnReplay.once('pointerup', ()=>{\r\n                onReplay(this._btnReplay);\r\n                if (this.music) {\r\n                    this.music.stop();\r\n                }\r\n            });\r\n            setupButtonTextureBased(this._btnReplay, 'btnReplay1', 'btnReplay2');\r\n        }\r\n\r\n        private music = null;\r\n        public show(score:number, starScore:number):void {\r\n            this._star.scale = 1.25;\r\n            this.scene.tweens.add({\r\n                targets: this._star,\r\n                \"scale\": 1,\r\n                duration: 500,\r\n                ease: Phaser.Math.Easing.Back.Out\r\n            });\r\n\r\n            this.totalScoreTxt.text = String(score);\r\n            this.starScoreTxt.text = String(starScore);\r\n\r\n            this.music = this.scene.sound.add(\"Fail - close one\");\r\n            this.music.play();\r\n        }\r\n    }\r\n}"]}